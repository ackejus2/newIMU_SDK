
IMU_SDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  08009cf0  08009cf0  00019cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a480  0800a480  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a480  0800a480  0001a480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a488  0800a488  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a488  0800a488  0001a488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a48c  0800a48c  0001a48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  200001e4  0800a674  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800a674  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0b1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002003  00000000  00000000  0002f2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000312c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00032030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a2e  00000000  00000000  00032cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103bc  00000000  00000000  0005a6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed8b5  00000000  00000000  0006aaaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015835f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f08  00000000  00000000  001583b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cd4 	.word	0x08009cd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009cd4 	.word	0x08009cd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <readAcceleration>:
void readTime(I2C_HandleTypeDef *hi2c, uint8_t *buffer) {
    HAL_I2C_Mem_Read(&hi2c1, IICADDR, WIT_TIME, I2C_MEMADD_SIZE_8BIT, buffer, 8, HAL_MAX_DELAY);
    // Process time data as needed
}

void readAcceleration(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
    uint8_t data[3];
    data[0] = WitReadReg(AX, WIT_ACC);
 8000ffe:	2151      	movs	r1, #81	; 0x51
 8001000:	2034      	movs	r0, #52	; 0x34
 8001002:	f000 fdf5 	bl	8001bf0 <WitReadReg>
 8001006:	4603      	mov	r3, r0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	713b      	strb	r3, [r7, #4]
    data[1] = WitReadReg(AY, WIT_ACC);
 800100c:	2151      	movs	r1, #81	; 0x51
 800100e:	2035      	movs	r0, #53	; 0x35
 8001010:	f000 fdee 	bl	8001bf0 <WitReadReg>
 8001014:	4603      	mov	r3, r0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	717b      	strb	r3, [r7, #5]
    data[2] = WitReadReg(AZ, WIT_ACC);
 800101a:	2151      	movs	r1, #81	; 0x51
 800101c:	2036      	movs	r0, #54	; 0x36
 800101e:	f000 fde7 	bl	8001bf0 <WitReadReg>
 8001022:	4603      	mov	r3, r0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	71bb      	strb	r3, [r7, #6]
    uint8_t ahigh0 = data[0] >> 8 & 0xFF;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
    uint8_t alow0  = data[0] << 8 & 0xFF;
 800102c:	2300      	movs	r3, #0
 800102e:	73bb      	strb	r3, [r7, #14]
    uint8_t ahigh1 = data[1] >> 8 & 0xFF;
 8001030:	2300      	movs	r3, #0
 8001032:	737b      	strb	r3, [r7, #13]
    uint8_t alow1  = data[1] << 8 & 0xFF;
 8001034:	2300      	movs	r3, #0
 8001036:	733b      	strb	r3, [r7, #12]
    uint8_t ahigh2 = data[2] >> 8 & 0xFF;
 8001038:	2300      	movs	r3, #0
 800103a:	72fb      	strb	r3, [r7, #11]
    uint8_t alow2  = data[2] << 8 & 0xFF;
 800103c:	2300      	movs	r3, #0
 800103e:	72bb      	strb	r3, [r7, #10]
    accel[0] = ((ahigh0 << 8) | alow0); //* ACC_SC;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	021a      	lsls	r2, r3, #8
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	4313      	orrs	r3, r2
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <readAcceleration+0x94>)
 8001052:	edc3 7a00 	vstr	s15, [r3]
    accel[1] = ((ahigh1 << 8) | alow1); //* ACC_SC;
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	021a      	lsls	r2, r3, #8
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <readAcceleration+0x94>)
 8001068:	edc3 7a01 	vstr	s15, [r3, #4]
    accel[2] = ((ahigh2 << 8) | alow2); //* ACC_SC;
 800106c:	7afb      	ldrb	r3, [r7, #11]
 800106e:	021a      	lsls	r2, r3, #8
 8001070:	7abb      	ldrb	r3, [r7, #10]
 8001072:	4313      	orrs	r3, r2
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <readAcceleration+0x94>)
 800107e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002d8 	.word	0x200002d8

08001090 <readQuaternion>:

void readQuaternion(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
    uint8_t data[4];
    data[0] = WitReadReg(q0, 1);
 8001096:	2101      	movs	r1, #1
 8001098:	2051      	movs	r0, #81	; 0x51
 800109a:	f000 fda9 	bl	8001bf0 <WitReadReg>
 800109e:	4603      	mov	r3, r0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	713b      	strb	r3, [r7, #4]
    data[1] = WitReadReg(q1, 1);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2052      	movs	r0, #82	; 0x52
 80010a8:	f000 fda2 	bl	8001bf0 <WitReadReg>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	717b      	strb	r3, [r7, #5]
    data[2] = WitReadReg(q2, 1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2053      	movs	r0, #83	; 0x53
 80010b6:	f000 fd9b 	bl	8001bf0 <WitReadReg>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	71bb      	strb	r3, [r7, #6]
    data[3] = WitReadReg(q3, 1);
 80010c0:	2101      	movs	r1, #1
 80010c2:	2054      	movs	r0, #84	; 0x54
 80010c4:	f000 fd94 	bl	8001bf0 <WitReadReg>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	71fb      	strb	r3, [r7, #7]
    uint8_t qhigh0 = data[0] >> 8 & 0xFF;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
    uint8_t qlow0  = data[0] << 8 & 0xFF;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
    uint8_t qhigh1 = data[1] >> 8 & 0xFF;
 80010d6:	2300      	movs	r3, #0
 80010d8:	737b      	strb	r3, [r7, #13]
    uint8_t qlow1  = data[1] << 8 & 0xFF;
 80010da:	2300      	movs	r3, #0
 80010dc:	733b      	strb	r3, [r7, #12]
    uint8_t qhigh2 = data[2] >> 8 & 0xFF;
 80010de:	2300      	movs	r3, #0
 80010e0:	72fb      	strb	r3, [r7, #11]
    uint8_t qlow2  = data[2] << 8 & 0xFF;
 80010e2:	2300      	movs	r3, #0
 80010e4:	72bb      	strb	r3, [r7, #10]
    uint8_t qhigh3 = data[3] >> 8 & 0xFF;
 80010e6:	2300      	movs	r3, #0
 80010e8:	727b      	strb	r3, [r7, #9]
    uint8_t qlow3  = data[3] << 8 & 0xFF;
 80010ea:	2300      	movs	r3, #0
 80010ec:	723b      	strb	r3, [r7, #8]
    quat[0] = ((qhigh0 << 8) | qlow0) * QUATER_SC;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	021a      	lsls	r2, r3, #8
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa14 	bl	8000524 <__aeabi_i2d>
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001104:	f7ff fa78 	bl	80005f8 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fd6a 	bl	8000be8 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <readQuaternion+0x118>)
 8001118:	6013      	str	r3, [r2, #0]
    quat[1] = ((qhigh1 << 8) | qlow1) * QUATER_SC;
 800111a:	7b7b      	ldrb	r3, [r7, #13]
 800111c:	021a      	lsls	r2, r3, #8
 800111e:	7b3b      	ldrb	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9fe 	bl	8000524 <__aeabi_i2d>
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001130:	f7ff fa62 	bl	80005f8 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fd54 	bl	8000be8 <__aeabi_d2f>
 8001140:	4603      	mov	r3, r0
 8001142:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <readQuaternion+0x118>)
 8001144:	6053      	str	r3, [r2, #4]
    quat[2] = ((qhigh2 << 8) | qlow2) * QUATER_SC;
 8001146:	7afb      	ldrb	r3, [r7, #11]
 8001148:	021a      	lsls	r2, r3, #8
 800114a:	7abb      	ldrb	r3, [r7, #10]
 800114c:	4313      	orrs	r3, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f9e8 	bl	8000524 <__aeabi_i2d>
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800115c:	f7ff fa4c 	bl	80005f8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd3e 	bl	8000be8 <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <readQuaternion+0x118>)
 8001170:	6093      	str	r3, [r2, #8]
    quat[3] = ((qhigh3 << 8) | qlow3) * QUATER_SC;
 8001172:	7a7b      	ldrb	r3, [r7, #9]
 8001174:	021a      	lsls	r2, r3, #8
 8001176:	7a3b      	ldrb	r3, [r7, #8]
 8001178:	4313      	orrs	r3, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9d2 	bl	8000524 <__aeabi_i2d>
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd28 	bl	8000be8 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <readQuaternion+0x118>)
 800119c:	60d3      	str	r3, [r2, #12]
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200002fc 	.word	0x200002fc

080011ac <quaternionToEuler>:

void quaternionToEuler(const float *quat, float *euler) {
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    // Convert quaternion to Euler angles
    euler[0] = atan2(2.0f * (quat[0] * quat[1] + quat[2] * quat[3]), 1.0f - 2.0f * (quat[1] * quat[1] + quat[2] * quat[2]));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	ed93 7a00 	vldr	s14, [r3]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3304      	adds	r3, #4
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3308      	adds	r3, #8
 80011cc:	edd3 6a00 	vldr	s13, [r3]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	330c      	adds	r3, #12
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011e4:	ee17 0a90 	vmov	r0, s15
 80011e8:	f7ff f9ae 	bl	8000548 <__aeabi_f2d>
 80011ec:	4604      	mov	r4, r0
 80011ee:	460d      	mov	r5, r1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3304      	adds	r3, #4
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3304      	adds	r3, #4
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3308      	adds	r3, #8
 8001208:	edd3 6a00 	vldr	s13, [r3]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3308      	adds	r3, #8
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001228:	ee17 0a90 	vmov	r0, s15
 800122c:	f7ff f98c 	bl	8000548 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	ec43 2b11 	vmov	d1, r2, r3
 8001238:	ec45 4b10 	vmov	d0, r4, r5
 800123c:	f008 f80c 	bl	8009258 <atan2>
 8001240:	ec53 2b10 	vmov	r2, r3, d0
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fcce 	bl	8000be8 <__aeabi_d2f>
 800124c:	4602      	mov	r2, r0
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	601a      	str	r2, [r3, #0]
    euler[1] = asin(2.0f * (quat[0] * quat[2] - quat[3] * quat[1]));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	ed93 7a00 	vldr	s14, [r3]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3308      	adds	r3, #8
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	330c      	adds	r3, #12
 8001268:	edd3 6a00 	vldr	s13, [r3]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3304      	adds	r3, #4
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001280:	ee17 0a90 	vmov	r0, s15
 8001284:	f7ff f960 	bl	8000548 <__aeabi_f2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	ec43 2b10 	vmov	d0, r2, r3
 8001290:	f007 ffae 	bl	80091f0 <asin>
 8001294:	ec51 0b10 	vmov	r0, r1, d0
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	1d1c      	adds	r4, r3, #4
 800129c:	f7ff fca4 	bl	8000be8 <__aeabi_d2f>
 80012a0:	4603      	mov	r3, r0
 80012a2:	6023      	str	r3, [r4, #0]
    euler[2] = atan2(2.0f * (quat[0] * quat[3] + quat[1] * quat[2]), 1.0f - 2.0f * (quat[2] * quat[2] + quat[3] * quat[3]));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	330c      	adds	r3, #12
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3304      	adds	r3, #4
 80012ba:	edd3 6a00 	vldr	s13, [r3]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3308      	adds	r3, #8
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d2:	ee17 0a90 	vmov	r0, s15
 80012d6:	f7ff f937 	bl	8000548 <__aeabi_f2d>
 80012da:	4604      	mov	r4, r0
 80012dc:	460d      	mov	r5, r1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3308      	adds	r3, #8
 80012e2:	ed93 7a00 	vldr	s14, [r3]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3308      	adds	r3, #8
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	330c      	adds	r3, #12
 80012f6:	edd3 6a00 	vldr	s13, [r3]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	330c      	adds	r3, #12
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800130e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001316:	ee17 0a90 	vmov	r0, s15
 800131a:	f7ff f915 	bl	8000548 <__aeabi_f2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	ec43 2b11 	vmov	d1, r2, r3
 8001326:	ec45 4b10 	vmov	d0, r4, r5
 800132a:	f007 ff95 	bl	8009258 <atan2>
 800132e:	ec51 0b10 	vmov	r0, r1, d0
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f103 0408 	add.w	r4, r3, #8
 8001338:	f7ff fc56 	bl	8000be8 <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
 800133e:	6023      	str	r3, [r4, #0]
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bdb0      	pop	{r4, r5, r7, pc}

08001348 <computeRelativePosition>:

void computeRelativePosition(const float *accel, float deltaTime, float *pos) {
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	ed87 0a02 	vstr	s0, [r7, #8]
 8001354:	6079      	str	r1, [r7, #4]
    // Simple integration of acceleration to compute position change
    for (int i = 0; i < 3; ++i) {
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e048      	b.n	80013ee <computeRelativePosition+0xa6>
        vel_f[i] = vel_i[i] + accel[i] * deltaTime;
 800135c:	4a29      	ldr	r2, [pc, #164]	; (8001404 <computeRelativePosition+0xbc>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	ed93 7a00 	vldr	s14, [r3]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	edd3 6a00 	vldr	s13, [r3]
 8001374:	edd7 7a02 	vldr	s15, [r7, #8]
 8001378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	4a21      	ldr	r2, [pc, #132]	; (8001408 <computeRelativePosition+0xc0>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	edc3 7a00 	vstr	s15, [r3]
        pos[i] = (vel_i[i] * deltaTime) + ((1/2) * (accel[i] * deltaTime * deltaTime));
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <computeRelativePosition+0xbc>)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	ed93 7a00 	vldr	s14, [r3]
 8001398:	edd7 7a02 	vldr	s15, [r7, #8]
 800139c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	edd3 6a00 	vldr	s13, [r3]
 80013ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80013b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013bc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800140c <computeRelativePosition+0xc4>
 80013c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d0:	edc3 7a00 	vstr	s15, [r3]
        vel_i[i] = vel_f[i];
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <computeRelativePosition+0xc0>)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4909      	ldr	r1, [pc, #36]	; (8001404 <computeRelativePosition+0xbc>)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; ++i) {
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	ddb3      	ble.n	800135c <computeRelativePosition+0x14>
    }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200002e4 	.word	0x200002e4
 8001408:	200002f0 	.word	0x200002f0
 800140c:	00000000 	.word	0x00000000

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001414:	b0b4      	sub	sp, #208	; 0xd0
 8001416:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	float accel[3], quat[4], euler[3], pos[3] = {0};
 8001418:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001424:	f000 fd38 	bl	8001e98 <HAL_Init>

  /* USER CODE BEGIN Init */

  // Initialize IMU for I2C
  	 WitInit(3, IICADDR);
 8001428:	211a      	movs	r1, #26
 800142a:	2003      	movs	r0, #3
 800142c:	f000 fce8 	bl	8001e00 <WitInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001430:	f000 f894 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001434:	f000 f954 	bl	80016e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001438:	f000 f922 	bl	8001680 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800143c:	f000 f8e0 	bl	8001600 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  const char *openingStatement = "UART Trial\r\n";
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <main+0x130>)
 8001442:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  HAL_UART_Transmit(&huart2, (uint8_t *)openingStatement, strlen(openingStatement), 1000);
 8001446:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800144a:	f7fe fec1 	bl	80001d0 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800145a:	483a      	ldr	r0, [pc, #232]	; (8001544 <main+0x134>)
 800145c:	f002 fcf8 	bl	8003e50 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  time_f = WitReadReg(MS, WIT_TIME);
 8001460:	2150      	movs	r1, #80	; 0x50
 8001462:	2033      	movs	r0, #51	; 0x33
 8001464:	f000 fbc4 	bl	8001bf0 <WitReadReg>
 8001468:	ee07 0a90 	vmov	s15, r0
 800146c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001470:	4b35      	ldr	r3, [pc, #212]	; (8001548 <main+0x138>)
 8001472:	edc3 7a00 	vstr	s15, [r3]
	  time_elapsed += time_f;
 8001476:	4b35      	ldr	r3, [pc, #212]	; (800154c <main+0x13c>)
 8001478:	ed93 7a00 	vldr	s14, [r3]
 800147c:	4b32      	ldr	r3, [pc, #200]	; (8001548 <main+0x138>)
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <main+0x13c>)
 8001488:	edc3 7a00 	vstr	s15, [r3]
	  deltaTime = time_f - time_i;
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <main+0x138>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <main+0x140>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <main+0x144>)
 800149e:	edc3 7a00 	vstr	s15, [r3]
	  readAcceleration();
 80014a2:	f7ff fda9 	bl	8000ff8 <readAcceleration>
	  readQuaternion();
 80014a6:	f7ff fdf3 	bl	8001090 <readQuaternion>
	  quaternionToEuler(quat, euler);
 80014aa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe79 	bl	80011ac <quaternionToEuler>
	  computeRelativePosition(accel, deltaTime, pos);
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <main+0x144>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80014c4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80014c8:	4611      	mov	r1, r2
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff3a 	bl	8001348 <computeRelativePosition>
	  time_i = time_f;
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <main+0x138>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <main+0x140>)
 80014da:	6013      	str	r3, [r2, #0]
//	  float deltaTime = 1.0; // Example: 1 second
//	  computeRelativePosition(accel, deltaTime, pos);
//
	  // Use timeData, euler, and position as needed
	  char positionString[128]; // Adjust the size as needed
	  snprintf(positionString, sizeof(positionString), "Position: X: %f, Y: %f, Z: %f\r\n", pos[0], pos[1], pos[2]);
 80014dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f831 	bl	8000548 <__aeabi_f2d>
 80014e6:	4604      	mov	r4, r0
 80014e8:	460d      	mov	r5, r1
 80014ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f82a 	bl	8000548 <__aeabi_f2d>
 80014f4:	4680      	mov	r8, r0
 80014f6:	4689      	mov	r9, r1
 80014f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f823 	bl	8000548 <__aeabi_f2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4638      	mov	r0, r7
 8001508:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800150c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001510:	e9cd 4500 	strd	r4, r5, [sp]
 8001514:	4a10      	ldr	r2, [pc, #64]	; (8001558 <main+0x148>)
 8001516:	2180      	movs	r1, #128	; 0x80
 8001518:	f004 f856 	bl	80055c8 <sniprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t*)positionString, strlen(positionString), 1000);
 800151c:	463b      	mov	r3, r7
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe fe56 	bl	80001d0 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	4639      	mov	r1, r7
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <main+0x134>)
 8001530:	f002 fc8e 	bl	8003e50 <HAL_UART_Transmit>

	  // ...

	  HAL_Delay(1000); // Example delay, adjust as needed
 8001534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001538:	f000 fd2a 	bl	8001f90 <HAL_Delay>
  {
 800153c:	e790      	b.n	8001460 <main+0x50>
 800153e:	bf00      	nop
 8001540:	08009cf0 	.word	0x08009cf0
 8001544:	20000254 	.word	0x20000254
 8001548:	20000310 	.word	0x20000310
 800154c:	20000318 	.word	0x20000318
 8001550:	2000030c 	.word	0x2000030c
 8001554:	20000314 	.word	0x20000314
 8001558:	08009d00 	.word	0x08009d00

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b096      	sub	sp, #88	; 0x58
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2244      	movs	r2, #68	; 0x44
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f003 f9a4 	bl	80048b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800157e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001582:	f001 f905 	bl	8002790 <HAL_PWREx_ControlVoltageScaling>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800158c:	f000 f90e 	bl	80017ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001598:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159a:	2310      	movs	r3, #16
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159e:	2302      	movs	r3, #2
 80015a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a2:	2302      	movs	r3, #2
 80015a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015aa:	230a      	movs	r3, #10
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ae:	2307      	movs	r3, #7
 80015b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 f93c 	bl	800283c <HAL_RCC_OscConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015ca:	f000 f8ef 	bl	80017ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ce:	230f      	movs	r3, #15
 80015d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d2:	2303      	movs	r3, #3
 80015d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2104      	movs	r1, #4
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fd04 	bl	8002ff4 <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015f2:	f000 f8db 	bl	80017ac <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3758      	adds	r7, #88	; 0x58
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_I2C1_Init+0x74>)
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <MX_I2C1_Init+0x78>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <MX_I2C1_Init+0x74>)
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <MX_I2C1_Init+0x7c>)
 800160e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_I2C1_Init+0x74>)
 8001618:	2201      	movs	r2, #1
 800161a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_I2C1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_I2C1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <MX_I2C1_Init+0x74>)
 800163c:	f000 ff74 	bl	8002528 <HAL_I2C_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001646:	f000 f8b1 	bl	80017ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <MX_I2C1_Init+0x74>)
 800164e:	f000 fffa 	bl	8002646 <HAL_I2CEx_ConfigAnalogFilter>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001658:	f000 f8a8 	bl	80017ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800165c:	2100      	movs	r1, #0
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_I2C1_Init+0x74>)
 8001660:	f001 f83c 	bl	80026dc <HAL_I2CEx_ConfigDigitalFilter>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800166a:	f000 f89f 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000200 	.word	0x20000200
 8001678:	40005400 	.word	0x40005400
 800167c:	10909cec 	.word	0x10909cec

08001680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <MX_USART2_UART_Init+0x5c>)
 8001688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016c4:	f002 fb76 	bl	8003db4 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016ce:	f000 f86d 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000254 	.word	0x20000254
 80016dc:	40004400 	.word	0x40004400

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <MX_GPIO_Init+0xc4>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <MX_GPIO_Init+0xc4>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <MX_GPIO_Init+0xc4>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <MX_GPIO_Init+0xc4>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4a24      	ldr	r2, [pc, #144]	; (80017a4 <MX_GPIO_Init+0xc4>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_GPIO_Init+0xc4>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_GPIO_Init+0xc4>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <MX_GPIO_Init+0xc4>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_GPIO_Init+0xc4>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_GPIO_Init+0xc4>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <MX_GPIO_Init+0xc4>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_GPIO_Init+0xc4>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2120      	movs	r1, #32
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f000 fecb 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001768:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <MX_GPIO_Init+0xc8>)
 800177a:	f000 fd13 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800177e:	2320      	movs	r3, #32
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001798:	f000 fd04 	bl	80021a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	; 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	48000800 	.word	0x48000800

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_MspInit+0x44>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c2:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <HAL_MspInit+0x44>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_MspInit+0x44>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_MspInit+0x44>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_MspInit+0x44>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6593      	str	r3, [r2, #88]	; 0x58
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_MspInit+0x44>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000

08001800 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b0ac      	sub	sp, #176	; 0xb0
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2288      	movs	r2, #136	; 0x88
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f003 f849 	bl	80048b8 <memset>
  if(hi2c->Instance==I2C1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <HAL_I2C_MspInit+0xb0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d13a      	bne.n	80018a6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001830:	2340      	movs	r3, #64	; 0x40
 8001832:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001834:	2300      	movs	r3, #0
 8001836:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4618      	mov	r0, r3
 800183e:	f001 fdfd 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001848:	f7ff ffb0 	bl	80017ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_I2C_MspInit+0xb4>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001850:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <HAL_I2C_MspInit+0xb4>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_I2C_MspInit+0xb4>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001864:	23c0      	movs	r3, #192	; 0xc0
 8001866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186a:	2312      	movs	r3, #18
 800186c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187c:	2304      	movs	r3, #4
 800187e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001886:	4619      	mov	r1, r3
 8001888:	480b      	ldr	r0, [pc, #44]	; (80018b8 <HAL_I2C_MspInit+0xb8>)
 800188a:	f000 fc8b 	bl	80021a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_I2C_MspInit+0xb4>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_I2C_MspInit+0xb4>)
 8001894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001898:	6593      	str	r3, [r2, #88]	; 0x58
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_I2C_MspInit+0xb4>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	37b0      	adds	r7, #176	; 0xb0
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40005400 	.word	0x40005400
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000400 	.word	0x48000400

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0ac      	sub	sp, #176	; 0xb0
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2288      	movs	r2, #136	; 0x88
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 ffeb 	bl	80048b8 <memset>
  if(huart->Instance==USART2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a21      	ldr	r2, [pc, #132]	; (800196c <HAL_UART_MspInit+0xb0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d13b      	bne.n	8001964 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4618      	mov	r0, r3
 80018fa:	f001 fd9f 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001904:	f7ff ff52 	bl	80017ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_UART_MspInit+0xb4>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_UART_MspInit+0xb4>)
 800190e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001912:	6593      	str	r3, [r2, #88]	; 0x58
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_UART_MspInit+0xb4>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_UART_MspInit+0xb4>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <HAL_UART_MspInit+0xb4>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_UART_MspInit+0xb4>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001938:	230c      	movs	r3, #12
 800193a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001950:	2307      	movs	r3, #7
 8001952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f000 fc20 	bl	80021a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	37b0      	adds	r7, #176	; 0xb0
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40004400 	.word	0x40004400
 8001970:	40021000 	.word	0x40021000

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c0:	f000 fac6 	bl	8001f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_kill>:

int _kill(int pid, int sig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e2:	f002 ff31 	bl	8004848 <__errno>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2216      	movs	r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
  return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_exit>:

void _exit (int status)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffe7 	bl	80019d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0a:	e7fe      	b.n	8001a0a <_exit+0x12>

08001a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e00a      	b.n	8001a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a1e:	f3af 8000 	nop.w
 8001a22:	4601      	mov	r1, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf0      	blt.n	8001a1e <_read+0x12>
  }

  return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e009      	b.n	8001a6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	60ba      	str	r2, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf1      	blt.n	8001a58 <_write+0x12>
  }
  return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_close>:

int _close(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa6:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_isatty>:

int _isatty(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f002 fe96 	bl	8004848 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20018000 	.word	0x20018000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	2000031c 	.word	0x2000031c
 8001b50:	20000570 	.word	0x20000570

08001b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <SystemInit+0x20>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <SystemInit+0x20>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__CRC16>:
    0x40
};


static uint16_t __CRC16(uint8_t *puchMsg, uint16_t usDataLen)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
    uint8_t uchCRCHi = 0xFF;
 8001b84:	23ff      	movs	r3, #255	; 0xff
 8001b86:	75fb      	strb	r3, [r7, #23]
    uint8_t uchCRCLo = 0xFF;
 8001b88:	23ff      	movs	r3, #255	; 0xff
 8001b8a:	75bb      	strb	r3, [r7, #22]
    uint8_t uIndex;
    int i = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
    uchCRCHi = 0xFF;
 8001b90:	23ff      	movs	r3, #255	; 0xff
 8001b92:	75fb      	strb	r3, [r7, #23]
    uchCRCLo = 0xFF;
 8001b94:	23ff      	movs	r3, #255	; 0xff
 8001b96:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 8001b98:	e013      	b.n	8001bc2 <__CRC16+0x4a>
    {
        uIndex = uchCRCHi ^ puchMsg[i];
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	4053      	eors	r3, r2
 8001ba6:	73fb      	strb	r3, [r7, #15]
        uchCRCHi = uchCRCLo ^ __auchCRCHi[uIndex];
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <__CRC16+0x70>)
 8001bac:	5cd2      	ldrb	r2, [r2, r3]
 8001bae:	7dbb      	ldrb	r3, [r7, #22]
 8001bb0:	4053      	eors	r3, r2
 8001bb2:	75fb      	strb	r3, [r7, #23]
        uchCRCLo = __auchCRCLo[uIndex] ;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <__CRC16+0x74>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	75bb      	strb	r3, [r7, #22]
    for (; i<usDataLen; i++)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dbe7      	blt.n	8001b9a <__CRC16+0x22>
    }
    return (uint16_t)(((uint16_t)uchCRCHi << 8) | (uint16_t)uchCRCLo) ;
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	7dbb      	ldrb	r3, [r7, #22]
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	b29b      	uxth	r3, r3
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	08009d68 	.word	0x08009d68
 8001bec:	08009e68 	.word	0x08009e68

08001bf0 <WitReadReg>:
            return WIT_HAL_INVAL;
    }
    return WIT_HAL_OK;
}
int32_t WitReadReg(uint32_t uiReg, uint32_t uiReadNum)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
    uint16_t usTemp, i;
    uint8_t ucBuff[8];
    if((uiReg + uiReadNum) >= REGSIZE)return WIT_HAL_INVAL;
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	2b8f      	cmp	r3, #143	; 0x8f
 8001c02:	d902      	bls.n	8001c0a <WitReadReg+0x1a>
 8001c04:	f06f 0305 	mvn.w	r3, #5
 8001c08:	e0e4      	b.n	8001dd4 <WitReadReg+0x1e4>
    switch(s_uiProtoclo)
 8001c0a:	4b74      	ldr	r3, [pc, #464]	; (8001ddc <WitReadReg+0x1ec>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	f200 80d8 	bhi.w	8001dc4 <WitReadReg+0x1d4>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <WitReadReg+0x2c>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c71 	.word	0x08001c71
 8001c24:	08001ce9 	.word	0x08001ce9
 8001c28:	08001d2f 	.word	0x08001d2f
    {
        case WIT_PROTOCOL_NORMAL:
            if(uiReadNum > 4)return WIT_HAL_INVAL;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d902      	bls.n	8001c38 <WitReadReg+0x48>
 8001c32:	f06f 0305 	mvn.w	r3, #5
 8001c36:	e0cd      	b.n	8001dd4 <WitReadReg+0x1e4>
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8001c38:	4b69      	ldr	r3, [pc, #420]	; (8001de0 <WitReadReg+0x1f0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <WitReadReg+0x56>
 8001c40:	f06f 0304 	mvn.w	r3, #4
 8001c44:	e0c6      	b.n	8001dd4 <WitReadReg+0x1e4>
            ucBuff[0] = 0xFF;
 8001c46:	23ff      	movs	r3, #255	; 0xff
 8001c48:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 8001c4a:	23aa      	movs	r3, #170	; 0xaa
 8001c4c:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8001c4e:	2327      	movs	r3, #39	; 0x27
 8001c50:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	743b      	strb	r3, [r7, #16]
            p_WitSerialWriteFunc(ucBuff, 5);
 8001c60:	4b5f      	ldr	r3, [pc, #380]	; (8001de0 <WitReadReg+0x1f0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f107 020c 	add.w	r2, r7, #12
 8001c68:	2105      	movs	r1, #5
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4798      	blx	r3
            break;
 8001c6e:	e0ad      	b.n	8001dcc <WitReadReg+0x1dc>
        case WIT_PROTOCOL_MODBUS:
            if(p_WitSerialWriteFunc == NULL)return WIT_HAL_EMPTY;
 8001c70:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <WitReadReg+0x1f0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <WitReadReg+0x8e>
 8001c78:	f06f 0304 	mvn.w	r3, #4
 8001c7c:	e0aa      	b.n	8001dd4 <WitReadReg+0x1e4>
            usTemp = uiReadNum << 1;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	82bb      	strh	r3, [r7, #20]
            if((usTemp + 5) > WIT_DATA_BUFF_SIZE)return WIT_HAL_NOMEM;
 8001c86:	8abb      	ldrh	r3, [r7, #20]
 8001c88:	2bfb      	cmp	r3, #251	; 0xfb
 8001c8a:	d902      	bls.n	8001c92 <WitReadReg+0xa2>
 8001c8c:	f06f 0303 	mvn.w	r3, #3
 8001c90:	e0a0      	b.n	8001dd4 <WitReadReg+0x1e4>
            ucBuff[0] = s_ucAddr;
 8001c92:	4b54      	ldr	r3, [pc, #336]	; (8001de4 <WitReadReg+0x1f4>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = FuncR;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = uiReg >> 8;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	0a1b      	lsrs	r3, r3, #8
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xFF;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReadNum >> 8;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	743b      	strb	r3, [r7, #16]
            ucBuff[5] = uiReadNum & 0xff;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	747b      	strb	r3, [r7, #17]
            usTemp = __CRC16(ucBuff, 6);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2106      	movs	r1, #6
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff5a 	bl	8001b78 <__CRC16>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	82bb      	strh	r3, [r7, #20]
            ucBuff[6] = usTemp >> 8;
 8001cc8:	8abb      	ldrh	r3, [r7, #20]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	74bb      	strb	r3, [r7, #18]
            ucBuff[7] = usTemp & 0xff;
 8001cd2:	8abb      	ldrh	r3, [r7, #20]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	74fb      	strb	r3, [r7, #19]
            p_WitSerialWriteFunc(ucBuff, 8);
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <WitReadReg+0x1f0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f107 020c 	add.w	r2, r7, #12
 8001ce0:	2108      	movs	r1, #8
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4798      	blx	r3
            break;
 8001ce6:	e071      	b.n	8001dcc <WitReadReg+0x1dc>
        case WIT_PROTOCOL_CAN:
            if(uiReadNum > 3)return WIT_HAL_INVAL;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d902      	bls.n	8001cf4 <WitReadReg+0x104>
 8001cee:	f06f 0305 	mvn.w	r3, #5
 8001cf2:	e06f      	b.n	8001dd4 <WitReadReg+0x1e4>
            if(p_WitCanWriteFunc == NULL)return WIT_HAL_EMPTY;
 8001cf4:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <WitReadReg+0x1f8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <WitReadReg+0x112>
 8001cfc:	f06f 0304 	mvn.w	r3, #4
 8001d00:	e068      	b.n	8001dd4 <WitReadReg+0x1e4>
            ucBuff[0] = 0xFF;
 8001d02:	23ff      	movs	r3, #255	; 0xff
 8001d04:	733b      	strb	r3, [r7, #12]
            ucBuff[1] = 0xAA;
 8001d06:	23aa      	movs	r3, #170	; 0xaa
 8001d08:	737b      	strb	r3, [r7, #13]
            ucBuff[2] = 0x27;
 8001d0a:	2327      	movs	r3, #39	; 0x27
 8001d0c:	73bb      	strb	r3, [r7, #14]
            ucBuff[3] = uiReg & 0xff;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	73fb      	strb	r3, [r7, #15]
            ucBuff[4] = uiReg >> 8;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	743b      	strb	r3, [r7, #16]
            p_WitCanWriteFunc(s_ucAddr, ucBuff, 5);
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <WitReadReg+0x1f8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <WitReadReg+0x1f4>)
 8001d22:	7810      	ldrb	r0, [r2, #0]
 8001d24:	f107 010c 	add.w	r1, r7, #12
 8001d28:	2205      	movs	r2, #5
 8001d2a:	4798      	blx	r3
            break;
 8001d2c:	e04e      	b.n	8001dcc <WitReadReg+0x1dc>
        case WIT_PROTOCOL_I2C:
            if(p_WitI2cReadFunc == NULL)return WIT_HAL_EMPTY;
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <WitReadReg+0x1fc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <WitReadReg+0x14c>
 8001d36:	f06f 0304 	mvn.w	r3, #4
 8001d3a:	e04b      	b.n	8001dd4 <WitReadReg+0x1e4>
            usTemp = uiReadNum << 1;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	82bb      	strh	r3, [r7, #20]
            if(WIT_DATA_BUFF_SIZE < usTemp)return WIT_HAL_NOMEM;
 8001d44:	8abb      	ldrh	r3, [r7, #20]
 8001d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d4a:	d902      	bls.n	8001d52 <WitReadReg+0x162>
 8001d4c:	f06f 0303 	mvn.w	r3, #3
 8001d50:	e040      	b.n	8001dd4 <WitReadReg+0x1e4>
            if(p_WitI2cReadFunc(s_ucAddr << 1, uiReg, s_ucWitDataBuff, usTemp) == 1)
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <WitReadReg+0x1fc>)
 8001d54:	681c      	ldr	r4, [r3, #0]
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <WitReadReg+0x1f4>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	b2d8      	uxtb	r0, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	b2d9      	uxtb	r1, r3
 8001d62:	8abb      	ldrh	r3, [r7, #20]
 8001d64:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <WitReadReg+0x200>)
 8001d66:	47a0      	blx	r4
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d12d      	bne.n	8001dca <WitReadReg+0x1da>
            {
                if(p_WitRegUpdateCbFunc == NULL)return WIT_HAL_EMPTY;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <WitReadReg+0x204>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <WitReadReg+0x18c>
 8001d76:	f06f 0304 	mvn.w	r3, #4
 8001d7a:	e02b      	b.n	8001dd4 <WitReadReg+0x1e4>
                for(i = 0; i < uiReadNum; i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	82fb      	strh	r3, [r7, #22]
 8001d80:	e016      	b.n	8001db0 <WitReadReg+0x1c0>
                {
                    sReg[i+uiReg] = ((uint16_t)s_ucWitDataBuff[(i<<1)+1] << 8) | s_ucWitDataBuff[i<<1];
 8001d82:	8afb      	ldrh	r3, [r7, #22]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	3301      	adds	r3, #1
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <WitReadReg+0x200>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b219      	sxth	r1, r3
 8001d90:	8afb      	ldrh	r3, [r7, #22]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4a16      	ldr	r2, [pc, #88]	; (8001df0 <WitReadReg+0x200>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	8af8      	ldrh	r0, [r7, #22]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4403      	add	r3, r0
 8001da0:	430a      	orrs	r2, r1
 8001da2:	b211      	sxth	r1, r2
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <WitReadReg+0x208>)
 8001da6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for(i = 0; i < uiReadNum; i++)
 8001daa:	8afb      	ldrh	r3, [r7, #22]
 8001dac:	3301      	adds	r3, #1
 8001dae:	82fb      	strh	r3, [r7, #22]
 8001db0:	8afb      	ldrh	r3, [r7, #22]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8e4      	bhi.n	8001d82 <WitReadReg+0x192>
                }
                p_WitRegUpdateCbFunc(uiReg, uiReadNum);
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <WitReadReg+0x204>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6839      	ldr	r1, [r7, #0]
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
            }

            break;
 8001dc2:	e002      	b.n	8001dca <WitReadReg+0x1da>
		default:
            return WIT_HAL_INVAL;
 8001dc4:	f06f 0305 	mvn.w	r3, #5
 8001dc8:	e004      	b.n	8001dd4 <WitReadReg+0x1e4>
            break;
 8001dca:	bf00      	nop
    }
    s_uiReadRegIndex = uiReg;
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <WitReadReg+0x20c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]

    return WIT_HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd90      	pop	{r4, r7, pc}
 8001ddc:	20000434 	.word	0x20000434
 8001de0:	20000320 	.word	0x20000320
 8001de4:	20000004 	.word	0x20000004
 8001de8:	20000328 	.word	0x20000328
 8001dec:	20000324 	.word	0x20000324
 8001df0:	20000330 	.word	0x20000330
 8001df4:	2000032c 	.word	0x2000032c
 8001df8:	2000043c 	.word	0x2000043c
 8001dfc:	20000438 	.word	0x20000438

08001e00 <WitInit>:
int32_t WitInit(uint32_t uiProtocol, uint8_t ucAddr)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
	if(uiProtocol > WIT_PROTOCOL_I2C)return WIT_HAL_INVAL;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d902      	bls.n	8001e18 <WitInit+0x18>
 8001e12:	f06f 0305 	mvn.w	r3, #5
 8001e16:	e009      	b.n	8001e2c <WitInit+0x2c>
    s_uiProtoclo = uiProtocol;
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <WitInit+0x38>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
    s_ucAddr = ucAddr;
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <WitInit+0x3c>)
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	7013      	strb	r3, [r2, #0]
    s_uiWitDataCnt = 0;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <WitInit+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
    return WIT_HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	20000434 	.word	0x20000434
 8001e3c:	20000004 	.word	0x20000004
 8001e40:	20000430 	.word	0x20000430

08001e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e48:	f7ff fe84 	bl	8001b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4e:	490d      	ldr	r1, [pc, #52]	; (8001e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <LoopForever+0xe>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e64:	4c0a      	ldr	r4, [pc, #40]	; (8001e90 <LoopForever+0x16>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e72:	f002 fcef 	bl	8004854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e76:	f7ff facb 	bl	8001410 <main>

08001e7a <LoopForever>:

LoopForever:
    b LoopForever
 8001e7a:	e7fe      	b.n	8001e7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e88:	0800a490 	.word	0x0800a490
  ldr r2, =_sbss
 8001e8c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e90:	20000570 	.word	0x20000570

08001e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC1_2_IRQHandler>
	...

08001e98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_Init+0x3c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <HAL_Init+0x3c>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eae:	2003      	movs	r0, #3
 8001eb0:	f000 f944 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f000 f80f 	bl	8001ed8 <HAL_InitTick>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	71fb      	strb	r3, [r7, #7]
 8001ec4:	e001      	b.n	8001eca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ec6:	f7ff fc77 	bl	80017b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eca:	79fb      	ldrb	r3, [r7, #7]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40022000 	.word	0x40022000

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_InitTick+0x6c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d023      	beq.n	8001f34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_InitTick+0x70>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_InitTick+0x6c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f941 	bl	800218a <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10f      	bne.n	8001f2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d809      	bhi.n	8001f28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f000 f919 	bl	8002152 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_InitTick+0x74>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e007      	b.n	8001f38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e004      	b.n	8001f38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
 8001f32:	e001      	b.n	8001f38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000000c 	.word	0x2000000c
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000008 	.word	0x20000008

08001f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x20>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x24>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_IncTick+0x24>)
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	2000055c 	.word	0x2000055c

08001f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_GetTick+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	2000055c 	.word	0x2000055c

08001f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff ffee 	bl	8001f78 <HAL_GetTick>
 8001f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d005      	beq.n	8001fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_Delay+0x44>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fb6:	bf00      	nop
 8001fb8:	f7ff ffde 	bl	8001f78 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d8f7      	bhi.n	8001fb8 <HAL_Delay+0x28>
  {
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000000c 	.word	0x2000000c

08001fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <__NVIC_SetPriorityGrouping+0x44>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200a:	4a04      	ldr	r2, [pc, #16]	; (800201c <__NVIC_SetPriorityGrouping+0x44>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	60d3      	str	r3, [r2, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <__NVIC_GetPriorityGrouping+0x18>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	f003 0307 	and.w	r3, r3, #7
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff47 	bl	8001fd8 <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff5c 	bl	8002020 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff8e 	bl	8002090 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5d 	bl	800203c <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffb0 	bl	80020f8 <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b2:	e17f      	b.n	80024b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2101      	movs	r1, #1
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8171 	beq.w	80024ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d005      	beq.n	80021e4 <HAL_GPIO_Init+0x40>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d130      	bne.n	8002246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800221a:	2201      	movs	r2, #1
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f003 0201 	and.w	r2, r3, #1
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b03      	cmp	r3, #3
 8002250:	d118      	bne.n	8002284 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002258:	2201      	movs	r2, #1
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	f003 0201 	and.w	r2, r3, #1
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b03      	cmp	r3, #3
 800228e:	d017      	beq.n	80022c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	6939      	ldr	r1, [r7, #16]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80ac 	beq.w	80024ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <HAL_GPIO_Init+0x330>)
 8002358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235a:	4a5e      	ldr	r2, [pc, #376]	; (80024d4 <HAL_GPIO_Init+0x330>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6613      	str	r3, [r2, #96]	; 0x60
 8002362:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <HAL_GPIO_Init+0x330>)
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800236e:	4a5a      	ldr	r2, [pc, #360]	; (80024d8 <HAL_GPIO_Init+0x334>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	220f      	movs	r2, #15
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002398:	d025      	beq.n	80023e6 <HAL_GPIO_Init+0x242>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4f      	ldr	r2, [pc, #316]	; (80024dc <HAL_GPIO_Init+0x338>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01f      	beq.n	80023e2 <HAL_GPIO_Init+0x23e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4e      	ldr	r2, [pc, #312]	; (80024e0 <HAL_GPIO_Init+0x33c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x23a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4d      	ldr	r2, [pc, #308]	; (80024e4 <HAL_GPIO_Init+0x340>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x236>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4c      	ldr	r2, [pc, #304]	; (80024e8 <HAL_GPIO_Init+0x344>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x232>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_GPIO_Init+0x348>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x22e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4a      	ldr	r2, [pc, #296]	; (80024f0 <HAL_GPIO_Init+0x34c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x22a>
 80023ca:	2306      	movs	r3, #6
 80023cc:	e00c      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023ce:	2307      	movs	r3, #7
 80023d0:	e00a      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x244>
 80023e6:	2300      	movs	r3, #0
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023f8:	4937      	ldr	r1, [pc, #220]	; (80024d8 <HAL_GPIO_Init+0x334>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_GPIO_Init+0x350>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800242a:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <HAL_GPIO_Init+0x350>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002430:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_GPIO_Init+0x350>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <HAL_GPIO_Init+0x350>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_GPIO_Init+0x350>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800247e:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <HAL_GPIO_Init+0x350>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_GPIO_Init+0x350>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024a8:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_GPIO_Init+0x350>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f47f ae78 	bne.w	80021b4 <HAL_GPIO_Init+0x10>
  }
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010000 	.word	0x40010000
 80024dc:	48000400 	.word	0x48000400
 80024e0:	48000800 	.word	0x48000800
 80024e4:	48000c00 	.word	0x48000c00
 80024e8:	48001000 	.word	0x48001000
 80024ec:	48001400 	.word	0x48001400
 80024f0:	48001800 	.word	0x48001800
 80024f4:	40010400 	.word	0x40010400

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002514:	e002      	b.n	800251c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e081      	b.n	800263e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff f956 	bl	8001800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002578:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002588:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d107      	bne.n	80025a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	e006      	b.n	80025b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d104      	bne.n	80025c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69d9      	ldr	r1, [r3, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1a      	ldr	r2, [r3, #32]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b20      	cmp	r3, #32
 800265a:	d138      	bne.n	80026ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002666:	2302      	movs	r3, #2
 8002668:	e032      	b.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2224      	movs	r2, #36	; 0x24
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002698:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d139      	bne.n	8002766 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e033      	b.n	8002768 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2224      	movs	r2, #36	; 0x24
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800272e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <HAL_PWREx_GetVoltageRange+0x18>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40007000 	.word	0x40007000

08002790 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279e:	d130      	bne.n	8002802 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ac:	d038      	beq.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2232      	movs	r2, #50	; 0x32
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0c9b      	lsrs	r3, r3, #18
 80027d0:	3301      	adds	r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d4:	e002      	b.n	80027dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3b01      	subs	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	d102      	bne.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f2      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fc:	d110      	bne.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e00f      	b.n	8002822 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280e:	d007      	beq.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002818:	4a05      	ldr	r2, [pc, #20]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40007000 	.word	0x40007000
 8002834:	20000000 	.word	0x20000000
 8002838:	431bde83 	.word	0x431bde83

0800283c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e3ca      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284e:	4b97      	ldr	r3, [pc, #604]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002858:	4b94      	ldr	r3, [pc, #592]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80e4 	beq.w	8002a38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_RCC_OscConfig+0x4a>
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	f040 808b 	bne.w	8002994 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b01      	cmp	r3, #1
 8002882:	f040 8087 	bne.w	8002994 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002886:	4b89      	ldr	r3, [pc, #548]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x62>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e3a2      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1a      	ldr	r2, [r3, #32]
 80028a2:	4b82      	ldr	r3, [pc, #520]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <HAL_RCC_OscConfig+0x7c>
 80028ae:	4b7f      	ldr	r3, [pc, #508]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_OscConfig+0x88>
 80028b8:	4b7c      	ldr	r3, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d223      	bcs.n	8002910 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fd55 	bl	800337c <RCC_SetFlashLatencyFromMSIRange>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e383      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028dc:	4b73      	ldr	r3, [pc, #460]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a72      	ldr	r2, [pc, #456]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b70      	ldr	r3, [pc, #448]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	496d      	ldr	r1, [pc, #436]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fa:	4b6c      	ldr	r3, [pc, #432]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	4968      	ldr	r1, [pc, #416]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
 800290e:	e025      	b.n	800295c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002910:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a65      	ldr	r2, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002916:	f043 0308 	orr.w	r3, r3, #8
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4960      	ldr	r1, [pc, #384]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800292e:	4b5f      	ldr	r3, [pc, #380]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	495b      	ldr	r1, [pc, #364]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fd15 	bl	800337c <RCC_SetFlashLatencyFromMSIRange>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e343      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800295c:	f000 fc4a 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b52      	ldr	r3, [pc, #328]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	4950      	ldr	r1, [pc, #320]	; (8002ab0 <HAL_RCC_OscConfig+0x274>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_RCC_OscConfig+0x278>)
 800297a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800297c:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_RCC_OscConfig+0x27c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff faa9 	bl	8001ed8 <HAL_InitTick>
 8002986:	4603      	mov	r3, r0
 8002988:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d052      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	e327      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d032      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a42      	ldr	r2, [pc, #264]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029a8:	f7ff fae6 	bl	8001f78 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b0:	f7ff fae2 	bl	8001f78 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e310      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c2:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ce:	4b37      	ldr	r3, [pc, #220]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a36      	ldr	r2, [pc, #216]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4931      	ldr	r1, [pc, #196]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ec:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	492c      	ldr	r1, [pc, #176]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
 8002a00:	e01a      	b.n	8002a38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a29      	ldr	r2, [pc, #164]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a0e:	f7ff fab3 	bl	8001f78 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a16:	f7ff faaf 	bl	8001f78 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e2dd      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a28:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x1da>
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d074      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d005      	beq.n	8002a56 <HAL_RCC_OscConfig+0x21a>
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d10e      	bne.n	8002a6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d10b      	bne.n	8002a6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d064      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d160      	bne.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e2ba      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x24a>
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e026      	b.n	8002ad4 <HAL_RCC_OscConfig+0x298>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a8e:	d115      	bne.n	8002abc <HAL_RCC_OscConfig+0x280>
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a05      	ldr	r2, [pc, #20]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a02      	ldr	r2, [pc, #8]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCC_OscConfig+0x298>
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08009d20 	.word	0x08009d20
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000008 	.word	0x20000008
 8002abc:	4ba0      	ldr	r3, [pc, #640]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a9f      	ldr	r2, [pc, #636]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b9d      	ldr	r3, [pc, #628]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a9c      	ldr	r2, [pc, #624]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d013      	beq.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7ff fa4c 	bl	8001f78 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7ff fa48 	bl	8001f78 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e276      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	4b92      	ldr	r3, [pc, #584]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2a8>
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7ff fa38 	bl	8001f78 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7ff fa34 	bl	8001f78 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e262      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1e:	4b88      	ldr	r3, [pc, #544]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x2d0>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d060      	beq.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x310>
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	d119      	bne.n	8002b7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d116      	bne.n	8002b7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b4c:	4b7c      	ldr	r3, [pc, #496]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_OscConfig+0x328>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e23f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	4973      	ldr	r1, [pc, #460]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b78:	e040      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d023      	beq.n	8002bca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6e      	ldr	r2, [pc, #440]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7ff f9f3 	bl	8001f78 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b96:	f7ff f9ef 	bl	8001f78 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e21d      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba8:	4b65      	ldr	r3, [pc, #404]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	495f      	ldr	r1, [pc, #380]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
 8002bc8:	e018      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bca:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5c      	ldr	r2, [pc, #368]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7ff f9cf 	bl	8001f78 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7ff f9cb 	bl	8001f78 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1f9      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf0:	4b53      	ldr	r3, [pc, #332]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d03c      	beq.n	8002c82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c10:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c16:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7ff f9aa 	bl	8001f78 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7ff f9a6 	bl	8001f78 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1d4      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3a:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ef      	beq.n	8002c28 <HAL_RCC_OscConfig+0x3ec>
 8002c48:	e01b      	b.n	8002c82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4a:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c50:	4a3b      	ldr	r2, [pc, #236]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7ff f98d 	bl	8001f78 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c62:	f7ff f989 	bl	8001f78 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1b7      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ef      	bne.n	8002c62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80a6 	beq.w	8002ddc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c90:	2300      	movs	r3, #0
 8002c92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6593      	str	r3, [r2, #88]	; 0x58
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbc:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d118      	bne.n	8002cfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd4:	f7ff f950 	bl	8001f78 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cdc:	f7ff f94c 	bl	8001f78 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e17a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_RCC_OscConfig+0x508>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d108      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4d8>
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d12:	e029      	b.n	8002d68 <HAL_RCC_OscConfig+0x52c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d115      	bne.n	8002d48 <HAL_RCC_OscConfig+0x50c>
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d3c:	e014      	b.n	8002d68 <HAL_RCC_OscConfig+0x52c>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40007000 	.word	0x40007000
 8002d48:	4b9c      	ldr	r3, [pc, #624]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	4a9b      	ldr	r2, [pc, #620]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d58:	4b98      	ldr	r3, [pc, #608]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	4a97      	ldr	r2, [pc, #604]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d016      	beq.n	8002d9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7ff f902 	bl	8001f78 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7ff f8fe 	bl	8001f78 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e12a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8e:	4b8b      	ldr	r3, [pc, #556]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ed      	beq.n	8002d78 <HAL_RCC_OscConfig+0x53c>
 8002d9c:	e015      	b.n	8002dca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7ff f8eb 	bl	8001f78 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7ff f8e7 	bl	8001f78 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e113      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dbc:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1ed      	bne.n	8002da6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d105      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd0:	4b7a      	ldr	r3, [pc, #488]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	4a79      	ldr	r2, [pc, #484]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80fe 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	f040 80d0 	bne.w	8002f90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002df0:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0203 	and.w	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d130      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d127      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d11f      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e30:	2a07      	cmp	r2, #7
 8002e32:	bf14      	ite	ne
 8002e34:	2201      	movne	r2, #1
 8002e36:	2200      	moveq	r2, #0
 8002e38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d113      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d06e      	beq.n	8002f44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d069      	beq.n	8002f40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e6c:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e78:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0ad      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e88:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a4b      	ldr	r2, [pc, #300]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e94:	f7ff f870 	bl	8001f78 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7ff f86c 	bl	8001f78 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e09a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eae:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eba:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_RCC_OscConfig+0x784>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ed4:	0212      	lsls	r2, r2, #8
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002edc:	0852      	lsrs	r2, r2, #1
 8002ede:	3a01      	subs	r2, #1
 8002ee0:	0552      	lsls	r2, r2, #21
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ee8:	0852      	lsrs	r2, r2, #1
 8002eea:	3a01      	subs	r2, #1
 8002eec:	0652      	lsls	r2, r2, #25
 8002eee:	4311      	orrs	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ef4:	0912      	lsrs	r2, r2, #4
 8002ef6:	0452      	lsls	r2, r2, #17
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	4930      	ldr	r1, [pc, #192]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f00:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f18:	f7ff f82e 	bl	8001f78 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7ff f82a 	bl	8001f78 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e058      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f3e:	e050      	b.n	8002fe2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e04f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d148      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f68:	f7ff f806 	bl	8001f78 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7ff f802 	bl	8001f78 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e030      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x734>
 8002f8e:	e028      	b.n	8002fe2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d023      	beq.n	8002fde <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <HAL_RCC_OscConfig+0x780>)
 8002f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fe ffe9 	bl	8001f78 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa8:	e00c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe ffe5 	bl	8001f78 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d905      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e013      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCC_OscConfig+0x7b0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ec      	bne.n	8002faa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_RCC_OscConfig+0x7b0>)
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	4905      	ldr	r1, [pc, #20]	; (8002fec <HAL_RCC_OscConfig+0x7b0>)
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_OscConfig+0x7b4>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60cb      	str	r3, [r1, #12]
 8002fdc:	e001      	b.n	8002fe2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	feeefffc 	.word	0xfeeefffc

08002ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0e7      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003008:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d910      	bls.n	8003038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b72      	ldr	r3, [pc, #456]	; (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 0207 	bic.w	r2, r3, #7
 800301e:	4970      	ldr	r1, [pc, #448]	; (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b6e      	ldr	r3, [pc, #440]	; (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0cf      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d010      	beq.n	8003066 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003050:	429a      	cmp	r2, r3
 8003052:	d908      	bls.n	8003066 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003054:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4960      	ldr	r1, [pc, #384]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d04c      	beq.n	800310c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307a:	4b5a      	ldr	r3, [pc, #360]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d121      	bne.n	80030ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0a6      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003092:	4b54      	ldr	r3, [pc, #336]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d115      	bne.n	80030ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e09a      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030aa:	4b4e      	ldr	r3, [pc, #312]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e08e      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ba:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e086      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ca:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f023 0203 	bic.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4943      	ldr	r1, [pc, #268]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030dc:	f7fe ff4c 	bl	8001f78 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7fe ff48 	bl	8001f78 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e06e      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	4b3a      	ldr	r3, [pc, #232]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 020c 	and.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	429a      	cmp	r2, r3
 800310a:	d1eb      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003124:	429a      	cmp	r2, r3
 8003126:	d208      	bcs.n	800313a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	492b      	ldr	r1, [pc, #172]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800313a:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d210      	bcs.n	800316a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 0207 	bic.w	r2, r3, #7
 8003150:	4923      	ldr	r1, [pc, #140]	; (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <HAL_RCC_ClockConfig+0x1ec>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e036      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4918      	ldr	r1, [pc, #96]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4910      	ldr	r1, [pc, #64]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031a8:	f000 f824 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	490b      	ldr	r1, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1f4>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
 80031c4:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 80031c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1fc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fe fe83 	bl	8001ed8 <HAL_InitTick>
 80031d2:	4603      	mov	r3, r0
 80031d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80031d6:	7afb      	ldrb	r3, [r7, #11]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40022000 	.word	0x40022000
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08009d20 	.word	0x08009d20
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000008 	.word	0x20000008

080031f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003202:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320c:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x34>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d121      	bne.n	8003266 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d11e      	bne.n	8003266 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003228:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003234:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e005      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003244:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003250:	4a2b      	ldr	r2, [pc, #172]	; (8003300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003258:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003264:	e00a      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d102      	bne.n	8003272 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <HAL_RCC_GetSysClockFreq+0x110>)
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	e004      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d101      	bne.n	800327c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003278:	4b23      	ldr	r3, [pc, #140]	; (8003308 <HAL_RCC_GetSysClockFreq+0x114>)
 800327a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d134      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003282:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0xa6>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d003      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003298:	e005      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <HAL_RCC_GetSysClockFreq+0x110>)
 800329c:	617b      	str	r3, [r7, #20]
      break;
 800329e:	e005      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_GetSysClockFreq+0x114>)
 80032a2:	617b      	str	r3, [r7, #20]
      break;
 80032a4:	e002      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	617b      	str	r3, [r7, #20]
      break;
 80032aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	3301      	adds	r3, #1
 80032b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	fb03 f202 	mul.w	r2, r3, r2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_RCC_GetSysClockFreq+0x108>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	0e5b      	lsrs	r3, r3, #25
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	3301      	adds	r3, #1
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032ec:	69bb      	ldr	r3, [r7, #24]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	; 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	08009d38 	.word	0x08009d38
 8003304:	00f42400 	.word	0x00f42400
 8003308:	007a1200 	.word	0x007a1200

0800330c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <HAL_RCC_GetHCLKFreq+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000000 	.word	0x20000000

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003328:	f7ff fff0 	bl	800330c <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4904      	ldr	r1, [pc, #16]	; (800334c <HAL_RCC_GetPCLK1Freq+0x28>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	08009d30 	.word	0x08009d30

08003350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003354:	f7ff ffda 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	0adb      	lsrs	r3, r3, #11
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4904      	ldr	r1, [pc, #16]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	08009d30 	.word	0x08009d30

0800337c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003388:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003394:	f7ff f9ee 	bl	8002774 <HAL_PWREx_GetVoltageRange>
 8003398:	6178      	str	r0, [r7, #20]
 800339a:	e014      	b.n	80033c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	4a24      	ldr	r2, [pc, #144]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a6:	6593      	str	r3, [r2, #88]	; 0x58
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033b4:	f7ff f9de 	bl	8002774 <HAL_PWREx_GetVoltageRange>
 80033b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ba:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033cc:	d10b      	bne.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d919      	bls.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2ba0      	cmp	r3, #160	; 0xa0
 80033d8:	d902      	bls.n	80033e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033da:	2302      	movs	r3, #2
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	e013      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e0:	2301      	movs	r3, #1
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	e010      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d902      	bls.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033ec:	2303      	movs	r3, #3
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e00a      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d102      	bne.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033f8:	2302      	movs	r3, #2
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e004      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b70      	cmp	r3, #112	; 0x70
 8003402:	d101      	bne.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003404:	2301      	movs	r3, #1
 8003406:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 0207 	bic.w	r2, r3, #7
 8003410:	4909      	ldr	r1, [pc, #36]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	40022000 	.word	0x40022000

0800343c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003444:	2300      	movs	r3, #0
 8003446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003448:	2300      	movs	r3, #0
 800344a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003454:	2b00      	cmp	r3, #0
 8003456:	d041      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003460:	d02a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003462:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003466:	d824      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800346c:	d008      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800346e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003472:	d81e      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347c:	d010      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800347e:	e018      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003480:	4b86      	ldr	r3, [pc, #536]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a85      	ldr	r2, [pc, #532]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800348c:	e015      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fabb 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800349e:	e00c      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3320      	adds	r3, #32
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fba6 	bl	8003bf8 <RCCEx_PLLSAI2_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b0:	e003      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	74fb      	strb	r3, [r7, #19]
      break;
 80034b6:	e000      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c0:	4b76      	ldr	r3, [pc, #472]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ce:	4973      	ldr	r1, [pc, #460]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034d6:	e001      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d041      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034f0:	d02a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034f6:	d824      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003502:	d81e      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350c:	d010      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800350e:	e018      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003510:	4b62      	ldr	r3, [pc, #392]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a61      	ldr	r2, [pc, #388]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800351c:	e015      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3304      	adds	r3, #4
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fa73 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800352e:	e00c      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3320      	adds	r3, #32
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fb5e 	bl	8003bf8 <RCCEx_PLLSAI2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003540:	e003      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	74fb      	strb	r3, [r7, #19]
      break;
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003550:	4b52      	ldr	r3, [pc, #328]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355e:	494f      	ldr	r1, [pc, #316]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003566:	e001      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80a0 	beq.w	80036ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357a:	2300      	movs	r3, #0
 800357c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800357e:	4b47      	ldr	r3, [pc, #284]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003594:	4b41      	ldr	r3, [pc, #260]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	4a40      	ldr	r2, [pc, #256]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359e:	6593      	str	r3, [r2, #88]	; 0x58
 80035a0:	4b3e      	ldr	r3, [pc, #248]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b0:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a3a      	ldr	r2, [pc, #232]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035bc:	f7fe fcdc 	bl	8001f78 <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c2:	e009      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c4:	f7fe fcd8 	bl	8001f78 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d902      	bls.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	74fb      	strb	r3, [r7, #19]
        break;
 80035d6:	e005      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035d8:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ef      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d15c      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ea:	4b2c      	ldr	r3, [pc, #176]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01f      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	429a      	cmp	r2, r3
 8003606:	d019      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003608:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003612:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003614:	4b21      	ldr	r3, [pc, #132]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	4a20      	ldr	r2, [pc, #128]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	4a1c      	ldr	r2, [pc, #112]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003634:	4a19      	ldr	r2, [pc, #100]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7fe fc97 	bl	8001f78 <HAL_GetTick>
 800364a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364c:	e00b      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe fc93 	bl	8001f78 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d902      	bls.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	74fb      	strb	r3, [r7, #19]
            break;
 8003664:	e006      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ec      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10c      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367a:	4b08      	ldr	r3, [pc, #32]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368a:	4904      	ldr	r1, [pc, #16]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003692:	e009      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	74bb      	strb	r3, [r7, #18]
 8003698:	e006      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a8:	7c7b      	ldrb	r3, [r7, #17]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b9e      	ldr	r3, [pc, #632]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	4a9d      	ldr	r2, [pc, #628]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036c6:	4b98      	ldr	r3, [pc, #608]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036cc:	f023 0203 	bic.w	r2, r3, #3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	4994      	ldr	r1, [pc, #592]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036e8:	4b8f      	ldr	r3, [pc, #572]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f023 020c 	bic.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	498c      	ldr	r1, [pc, #560]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800370a:	4b87      	ldr	r3, [pc, #540]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003710:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	4983      	ldr	r1, [pc, #524]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800372c:	4b7e      	ldr	r3, [pc, #504]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	497b      	ldr	r1, [pc, #492]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800374e:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375c:	4972      	ldr	r1, [pc, #456]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003770:	4b6d      	ldr	r3, [pc, #436]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377e:	496a      	ldr	r1, [pc, #424]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003792:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	4961      	ldr	r1, [pc, #388]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037b4:	4b5c      	ldr	r3, [pc, #368]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	4959      	ldr	r1, [pc, #356]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037d6:	4b54      	ldr	r3, [pc, #336]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	4950      	ldr	r1, [pc, #320]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037f8:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	4948      	ldr	r1, [pc, #288]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800381a:	4b43      	ldr	r3, [pc, #268]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	493f      	ldr	r1, [pc, #252]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d028      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800383c:	4b3a      	ldr	r3, [pc, #232]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384a:	4937      	ldr	r1, [pc, #220]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385a:	d106      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800385c:	4b32      	ldr	r3, [pc, #200]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a31      	ldr	r2, [pc, #196]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003866:	60d3      	str	r3, [r2, #12]
 8003868:	e011      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003872:	d10c      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f8c8 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d028      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	491f      	ldr	r1, [pc, #124]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b8:	d106      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c4:	60d3      	str	r3, [r2, #12]
 80038c6:	e011      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f899 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02b      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003906:	4908      	ldr	r1, [pc, #32]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003916:	d109      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a02      	ldr	r2, [pc, #8]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003922:	60d3      	str	r3, [r2, #12]
 8003924:	e014      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003934:	d10c      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f867 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02f      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396a:	4928      	ldr	r1, [pc, #160]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800397a:	d10d      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	2102      	movs	r1, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f844 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d014      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003992:	7cfb      	ldrb	r3, [r7, #19]
 8003994:	74bb      	strb	r3, [r7, #18]
 8003996:	e011      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800399c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a0:	d10c      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3320      	adds	r3, #32
 80039a6:	2102      	movs	r1, #2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f925 	bl	8003bf8 <RCCEx_PLLSAI2_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039c8:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d6:	490d      	ldr	r1, [pc, #52]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fa:	4904      	ldr	r1, [pc, #16]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a02:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000

08003a10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1e:	4b75      	ldr	r3, [pc, #468]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a2a:	4b72      	ldr	r3, [pc, #456]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0203 	and.w	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d10d      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a42:	4b6c      	ldr	r3, [pc, #432]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
       ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d047      	beq.n	8003ae6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e044      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d018      	beq.n	8003a96 <RCCEx_PLLSAI1_Config+0x86>
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d825      	bhi.n	8003ab4 <RCCEx_PLLSAI1_Config+0xa4>
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d002      	beq.n	8003a72 <RCCEx_PLLSAI1_Config+0x62>
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d009      	beq.n	8003a84 <RCCEx_PLLSAI1_Config+0x74>
 8003a70:	e020      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a72:	4b60      	ldr	r3, [pc, #384]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11d      	bne.n	8003aba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a82:	e01a      	b.n	8003aba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a84:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d116      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a94:	e013      	b.n	8003abe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a96:	4b57      	ldr	r3, [pc, #348]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10f      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aa2:	4b54      	ldr	r3, [pc, #336]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ab2:	e006      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e004      	b.n	8003ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aca:	4b4a      	ldr	r3, [pc, #296]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	4944      	ldr	r1, [pc, #272]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d17d      	bne.n	8003be8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003aec:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a40      	ldr	r2, [pc, #256]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fe fa3e 	bl	8001f78 <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003afe:	e009      	b.n	8003b14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b00:	f7fe fa3a 	bl	8001f78 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d902      	bls.n	8003b14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	73fb      	strb	r3, [r7, #15]
        break;
 8003b12:	e005      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b14:	4b37      	ldr	r3, [pc, #220]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ef      	bne.n	8003b00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d160      	bne.n	8003be8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d111      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b2c:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6892      	ldr	r2, [r2, #8]
 8003b3c:	0211      	lsls	r1, r2, #8
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	0912      	lsrs	r2, r2, #4
 8003b44:	0452      	lsls	r2, r2, #17
 8003b46:	430a      	orrs	r2, r1
 8003b48:	492a      	ldr	r1, [pc, #168]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	610b      	str	r3, [r1, #16]
 8003b4e:	e027      	b.n	8003ba0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d112      	bne.n	8003b7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b56:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6892      	ldr	r2, [r2, #8]
 8003b66:	0211      	lsls	r1, r2, #8
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6912      	ldr	r2, [r2, #16]
 8003b6c:	0852      	lsrs	r2, r2, #1
 8003b6e:	3a01      	subs	r2, #1
 8003b70:	0552      	lsls	r2, r2, #21
 8003b72:	430a      	orrs	r2, r1
 8003b74:	491f      	ldr	r1, [pc, #124]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	610b      	str	r3, [r1, #16]
 8003b7a:	e011      	b.n	8003ba0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6892      	ldr	r2, [r2, #8]
 8003b8c:	0211      	lsls	r1, r2, #8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6952      	ldr	r2, [r2, #20]
 8003b92:	0852      	lsrs	r2, r2, #1
 8003b94:	3a01      	subs	r2, #1
 8003b96:	0652      	lsls	r2, r2, #25
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	4916      	ldr	r1, [pc, #88]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003baa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fe f9e4 	bl	8001f78 <HAL_GetTick>
 8003bb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb2:	e009      	b.n	8003bc8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bb4:	f7fe f9e0 	bl	8001f78 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d902      	bls.n	8003bc8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	73fb      	strb	r3, [r7, #15]
          break;
 8003bc6:	e005      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0ef      	beq.n	8003bb4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	4904      	ldr	r1, [pc, #16]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000

08003bf8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c06:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d018      	beq.n	8003c44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c12:	4b67      	ldr	r3, [pc, #412]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0203 	and.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d10d      	bne.n	8003c3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
       ||
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c2a:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
       ||
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d047      	beq.n	8003cce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
 8003c42:	e044      	b.n	8003cce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d018      	beq.n	8003c7e <RCCEx_PLLSAI2_Config+0x86>
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d825      	bhi.n	8003c9c <RCCEx_PLLSAI2_Config+0xa4>
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d002      	beq.n	8003c5a <RCCEx_PLLSAI2_Config+0x62>
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d009      	beq.n	8003c6c <RCCEx_PLLSAI2_Config+0x74>
 8003c58:	e020      	b.n	8003c9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c5a:	4b55      	ldr	r3, [pc, #340]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d11d      	bne.n	8003ca2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6a:	e01a      	b.n	8003ca2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d116      	bne.n	8003ca6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c7c:	e013      	b.n	8003ca6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c7e:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10f      	bne.n	8003caa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c8a:	4b49      	ldr	r3, [pc, #292]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c9a:	e006      	b.n	8003caa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca0:	e004      	b.n	8003cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e002      	b.n	8003cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e000      	b.n	8003cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003caa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10d      	bne.n	8003cce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cb2:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6819      	ldr	r1, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	4939      	ldr	r1, [pc, #228]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d167      	bne.n	8003da4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cd4:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a35      	ldr	r2, [pc, #212]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce0:	f7fe f94a 	bl	8001f78 <HAL_GetTick>
 8003ce4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ce6:	e009      	b.n	8003cfc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ce8:	f7fe f946 	bl	8001f78 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d902      	bls.n	8003cfc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cfa:	e005      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1ef      	bne.n	8003ce8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d14a      	bne.n	8003da4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d111      	bne.n	8003d38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d14:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6892      	ldr	r2, [r2, #8]
 8003d24:	0211      	lsls	r1, r2, #8
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	0912      	lsrs	r2, r2, #4
 8003d2c:	0452      	lsls	r2, r2, #17
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	491f      	ldr	r1, [pc, #124]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	614b      	str	r3, [r1, #20]
 8003d36:	e011      	b.n	8003d5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6892      	ldr	r2, [r2, #8]
 8003d48:	0211      	lsls	r1, r2, #8
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6912      	ldr	r2, [r2, #16]
 8003d4e:	0852      	lsrs	r2, r2, #1
 8003d50:	3a01      	subs	r2, #1
 8003d52:	0652      	lsls	r2, r2, #25
 8003d54:	430a      	orrs	r2, r1
 8003d56:	4916      	ldr	r1, [pc, #88]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fe f906 	bl	8001f78 <HAL_GetTick>
 8003d6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d6e:	e009      	b.n	8003d84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d70:	f7fe f902 	bl	8001f78 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73fb      	strb	r3, [r7, #15]
          break;
 8003d82:	e005      	b.n	8003d90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ef      	beq.n	8003d70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	4904      	ldr	r1, [pc, #16]	; (8003db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000

08003db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e040      	b.n	8003e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd fd70 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8c0 	bl	8003f78 <UART_SetConfig>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e022      	b.n	8003e48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fb6c 	bl	80044e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fbf3 	bl	800462c <UART_CheckIdleState>
 8003e46:	4603      	mov	r3, r0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	f040 8082 	bne.w	8003f6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_UART_Transmit+0x26>
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e07a      	b.n	8003f70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_UART_Transmit+0x38>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e073      	b.n	8003f70 <HAL_UART_Transmit+0x120>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2221      	movs	r2, #33	; 0x21
 8003e9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e9e:	f7fe f86b 	bl	8001f78 <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d108      	bne.n	8003ed0 <HAL_UART_Transmit+0x80>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d104      	bne.n	8003ed0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e003      	b.n	8003ed8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003ee0:	e02d      	b.n	8003f3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fbe6 	bl	80046be <UART_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e039      	b.n	8003f70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	881a      	ldrh	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f0e:	b292      	uxth	r2, r2
 8003f10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	3302      	adds	r3, #2
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	e008      	b.n	8003f2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b292      	uxth	r2, r2
 8003f24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1cb      	bne.n	8003ee2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2200      	movs	r2, #0
 8003f52:	2140      	movs	r1, #64	; 0x40
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fbb2 	bl	80046be <UART_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e005      	b.n	8003f70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
  }
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f7c:	b08a      	sub	sp, #40	; 0x28
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4ba4      	ldr	r3, [pc, #656]	; (8004238 <UART_SetConfig+0x2c0>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a99      	ldr	r2, [pc, #612]	; (800423c <UART_SetConfig+0x2c4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d004      	beq.n	8003fe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a90      	ldr	r2, [pc, #576]	; (8004240 <UART_SetConfig+0x2c8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d126      	bne.n	8004050 <UART_SetConfig+0xd8>
 8004002:	4b90      	ldr	r3, [pc, #576]	; (8004244 <UART_SetConfig+0x2cc>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b03      	cmp	r3, #3
 800400e:	d81b      	bhi.n	8004048 <UART_SetConfig+0xd0>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0xa0>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004029 	.word	0x08004029
 800401c:	08004039 	.word	0x08004039
 8004020:	08004031 	.word	0x08004031
 8004024:	08004041 	.word	0x08004041
 8004028:	2301      	movs	r3, #1
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402e:	e116      	b.n	800425e <UART_SetConfig+0x2e6>
 8004030:	2302      	movs	r3, #2
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004036:	e112      	b.n	800425e <UART_SetConfig+0x2e6>
 8004038:	2304      	movs	r3, #4
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403e:	e10e      	b.n	800425e <UART_SetConfig+0x2e6>
 8004040:	2308      	movs	r3, #8
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004046:	e10a      	b.n	800425e <UART_SetConfig+0x2e6>
 8004048:	2310      	movs	r3, #16
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404e:	e106      	b.n	800425e <UART_SetConfig+0x2e6>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a7c      	ldr	r2, [pc, #496]	; (8004248 <UART_SetConfig+0x2d0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d138      	bne.n	80040cc <UART_SetConfig+0x154>
 800405a:	4b7a      	ldr	r3, [pc, #488]	; (8004244 <UART_SetConfig+0x2cc>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b0c      	cmp	r3, #12
 8004066:	d82d      	bhi.n	80040c4 <UART_SetConfig+0x14c>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <UART_SetConfig+0xf8>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	080040a5 	.word	0x080040a5
 8004074:	080040c5 	.word	0x080040c5
 8004078:	080040c5 	.word	0x080040c5
 800407c:	080040c5 	.word	0x080040c5
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080040c5 	.word	0x080040c5
 8004088:	080040c5 	.word	0x080040c5
 800408c:	080040c5 	.word	0x080040c5
 8004090:	080040ad 	.word	0x080040ad
 8004094:	080040c5 	.word	0x080040c5
 8004098:	080040c5 	.word	0x080040c5
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040bd 	.word	0x080040bd
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040aa:	e0d8      	b.n	800425e <UART_SetConfig+0x2e6>
 80040ac:	2302      	movs	r3, #2
 80040ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b2:	e0d4      	b.n	800425e <UART_SetConfig+0x2e6>
 80040b4:	2304      	movs	r3, #4
 80040b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ba:	e0d0      	b.n	800425e <UART_SetConfig+0x2e6>
 80040bc:	2308      	movs	r3, #8
 80040be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c2:	e0cc      	b.n	800425e <UART_SetConfig+0x2e6>
 80040c4:	2310      	movs	r3, #16
 80040c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ca:	e0c8      	b.n	800425e <UART_SetConfig+0x2e6>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a5e      	ldr	r2, [pc, #376]	; (800424c <UART_SetConfig+0x2d4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d125      	bne.n	8004122 <UART_SetConfig+0x1aa>
 80040d6:	4b5b      	ldr	r3, [pc, #364]	; (8004244 <UART_SetConfig+0x2cc>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040e0:	2b30      	cmp	r3, #48	; 0x30
 80040e2:	d016      	beq.n	8004112 <UART_SetConfig+0x19a>
 80040e4:	2b30      	cmp	r3, #48	; 0x30
 80040e6:	d818      	bhi.n	800411a <UART_SetConfig+0x1a2>
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d00a      	beq.n	8004102 <UART_SetConfig+0x18a>
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d814      	bhi.n	800411a <UART_SetConfig+0x1a2>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <UART_SetConfig+0x182>
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d008      	beq.n	800410a <UART_SetConfig+0x192>
 80040f8:	e00f      	b.n	800411a <UART_SetConfig+0x1a2>
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004100:	e0ad      	b.n	800425e <UART_SetConfig+0x2e6>
 8004102:	2302      	movs	r3, #2
 8004104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004108:	e0a9      	b.n	800425e <UART_SetConfig+0x2e6>
 800410a:	2304      	movs	r3, #4
 800410c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004110:	e0a5      	b.n	800425e <UART_SetConfig+0x2e6>
 8004112:	2308      	movs	r3, #8
 8004114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004118:	e0a1      	b.n	800425e <UART_SetConfig+0x2e6>
 800411a:	2310      	movs	r3, #16
 800411c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004120:	e09d      	b.n	800425e <UART_SetConfig+0x2e6>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a4a      	ldr	r2, [pc, #296]	; (8004250 <UART_SetConfig+0x2d8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d125      	bne.n	8004178 <UART_SetConfig+0x200>
 800412c:	4b45      	ldr	r3, [pc, #276]	; (8004244 <UART_SetConfig+0x2cc>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004136:	2bc0      	cmp	r3, #192	; 0xc0
 8004138:	d016      	beq.n	8004168 <UART_SetConfig+0x1f0>
 800413a:	2bc0      	cmp	r3, #192	; 0xc0
 800413c:	d818      	bhi.n	8004170 <UART_SetConfig+0x1f8>
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	d00a      	beq.n	8004158 <UART_SetConfig+0x1e0>
 8004142:	2b80      	cmp	r3, #128	; 0x80
 8004144:	d814      	bhi.n	8004170 <UART_SetConfig+0x1f8>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <UART_SetConfig+0x1d8>
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d008      	beq.n	8004160 <UART_SetConfig+0x1e8>
 800414e:	e00f      	b.n	8004170 <UART_SetConfig+0x1f8>
 8004150:	2300      	movs	r3, #0
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004156:	e082      	b.n	800425e <UART_SetConfig+0x2e6>
 8004158:	2302      	movs	r3, #2
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415e:	e07e      	b.n	800425e <UART_SetConfig+0x2e6>
 8004160:	2304      	movs	r3, #4
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e07a      	b.n	800425e <UART_SetConfig+0x2e6>
 8004168:	2308      	movs	r3, #8
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416e:	e076      	b.n	800425e <UART_SetConfig+0x2e6>
 8004170:	2310      	movs	r3, #16
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004176:	e072      	b.n	800425e <UART_SetConfig+0x2e6>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a35      	ldr	r2, [pc, #212]	; (8004254 <UART_SetConfig+0x2dc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d12a      	bne.n	80041d8 <UART_SetConfig+0x260>
 8004182:	4b30      	ldr	r3, [pc, #192]	; (8004244 <UART_SetConfig+0x2cc>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004190:	d01a      	beq.n	80041c8 <UART_SetConfig+0x250>
 8004192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004196:	d81b      	bhi.n	80041d0 <UART_SetConfig+0x258>
 8004198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800419c:	d00c      	beq.n	80041b8 <UART_SetConfig+0x240>
 800419e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a2:	d815      	bhi.n	80041d0 <UART_SetConfig+0x258>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <UART_SetConfig+0x238>
 80041a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ac:	d008      	beq.n	80041c0 <UART_SetConfig+0x248>
 80041ae:	e00f      	b.n	80041d0 <UART_SetConfig+0x258>
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e052      	b.n	800425e <UART_SetConfig+0x2e6>
 80041b8:	2302      	movs	r3, #2
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041be:	e04e      	b.n	800425e <UART_SetConfig+0x2e6>
 80041c0:	2304      	movs	r3, #4
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c6:	e04a      	b.n	800425e <UART_SetConfig+0x2e6>
 80041c8:	2308      	movs	r3, #8
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ce:	e046      	b.n	800425e <UART_SetConfig+0x2e6>
 80041d0:	2310      	movs	r3, #16
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d6:	e042      	b.n	800425e <UART_SetConfig+0x2e6>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a17      	ldr	r2, [pc, #92]	; (800423c <UART_SetConfig+0x2c4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d13a      	bne.n	8004258 <UART_SetConfig+0x2e0>
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <UART_SetConfig+0x2cc>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041f0:	d01a      	beq.n	8004228 <UART_SetConfig+0x2b0>
 80041f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041f6:	d81b      	bhi.n	8004230 <UART_SetConfig+0x2b8>
 80041f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fc:	d00c      	beq.n	8004218 <UART_SetConfig+0x2a0>
 80041fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004202:	d815      	bhi.n	8004230 <UART_SetConfig+0x2b8>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <UART_SetConfig+0x298>
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420c:	d008      	beq.n	8004220 <UART_SetConfig+0x2a8>
 800420e:	e00f      	b.n	8004230 <UART_SetConfig+0x2b8>
 8004210:	2300      	movs	r3, #0
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004216:	e022      	b.n	800425e <UART_SetConfig+0x2e6>
 8004218:	2302      	movs	r3, #2
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421e:	e01e      	b.n	800425e <UART_SetConfig+0x2e6>
 8004220:	2304      	movs	r3, #4
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004226:	e01a      	b.n	800425e <UART_SetConfig+0x2e6>
 8004228:	2308      	movs	r3, #8
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422e:	e016      	b.n	800425e <UART_SetConfig+0x2e6>
 8004230:	2310      	movs	r3, #16
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004236:	e012      	b.n	800425e <UART_SetConfig+0x2e6>
 8004238:	efff69f3 	.word	0xefff69f3
 800423c:	40008000 	.word	0x40008000
 8004240:	40013800 	.word	0x40013800
 8004244:	40021000 	.word	0x40021000
 8004248:	40004400 	.word	0x40004400
 800424c:	40004800 	.word	0x40004800
 8004250:	40004c00 	.word	0x40004c00
 8004254:	40005000 	.word	0x40005000
 8004258:	2310      	movs	r3, #16
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a9f      	ldr	r2, [pc, #636]	; (80044e0 <UART_SetConfig+0x568>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d17a      	bne.n	800435e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800426c:	2b08      	cmp	r3, #8
 800426e:	d824      	bhi.n	80042ba <UART_SetConfig+0x342>
 8004270:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <UART_SetConfig+0x300>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	0800429d 	.word	0x0800429d
 800427c:	080042bb 	.word	0x080042bb
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042bb 	.word	0x080042bb
 8004288:	080042ab 	.word	0x080042ab
 800428c:	080042bb 	.word	0x080042bb
 8004290:	080042bb 	.word	0x080042bb
 8004294:	080042bb 	.word	0x080042bb
 8004298:	080042b3 	.word	0x080042b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800429c:	f7ff f842 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80042a0:	61f8      	str	r0, [r7, #28]
        break;
 80042a2:	e010      	b.n	80042c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a4:	4b8f      	ldr	r3, [pc, #572]	; (80044e4 <UART_SetConfig+0x56c>)
 80042a6:	61fb      	str	r3, [r7, #28]
        break;
 80042a8:	e00d      	b.n	80042c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042aa:	f7fe ffa3 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80042ae:	61f8      	str	r0, [r7, #28]
        break;
 80042b0:	e009      	b.n	80042c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b6:	61fb      	str	r3, [r7, #28]
        break;
 80042b8:	e005      	b.n	80042c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80fb 	beq.w	80044c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d305      	bcc.n	80042ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d903      	bls.n	80042f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042f0:	e0e8      	b.n	80044c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2200      	movs	r2, #0
 80042f6:	461c      	mov	r4, r3
 80042f8:	4615      	mov	r5, r2
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	022b      	lsls	r3, r5, #8
 8004304:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004308:	0222      	lsls	r2, r4, #8
 800430a:	68f9      	ldr	r1, [r7, #12]
 800430c:	6849      	ldr	r1, [r1, #4]
 800430e:	0849      	lsrs	r1, r1, #1
 8004310:	2000      	movs	r0, #0
 8004312:	4688      	mov	r8, r1
 8004314:	4681      	mov	r9, r0
 8004316:	eb12 0a08 	adds.w	sl, r2, r8
 800431a:	eb43 0b09 	adc.w	fp, r3, r9
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432c:	4650      	mov	r0, sl
 800432e:	4659      	mov	r1, fp
 8004330:	f7fc fcaa 	bl	8000c88 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4613      	mov	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004342:	d308      	bcc.n	8004356 <UART_SetConfig+0x3de>
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434a:	d204      	bcs.n	8004356 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	60da      	str	r2, [r3, #12]
 8004354:	e0b6      	b.n	80044c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800435c:	e0b2      	b.n	80044c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004366:	d15e      	bne.n	8004426 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800436c:	2b08      	cmp	r3, #8
 800436e:	d828      	bhi.n	80043c2 <UART_SetConfig+0x44a>
 8004370:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <UART_SetConfig+0x400>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	0800439d 	.word	0x0800439d
 800437c:	080043a5 	.word	0x080043a5
 8004380:	080043ad 	.word	0x080043ad
 8004384:	080043c3 	.word	0x080043c3
 8004388:	080043b3 	.word	0x080043b3
 800438c:	080043c3 	.word	0x080043c3
 8004390:	080043c3 	.word	0x080043c3
 8004394:	080043c3 	.word	0x080043c3
 8004398:	080043bb 	.word	0x080043bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7fe ffc2 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80043a0:	61f8      	str	r0, [r7, #28]
        break;
 80043a2:	e014      	b.n	80043ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043a4:	f7fe ffd4 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 80043a8:	61f8      	str	r0, [r7, #28]
        break;
 80043aa:	e010      	b.n	80043ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ac:	4b4d      	ldr	r3, [pc, #308]	; (80044e4 <UART_SetConfig+0x56c>)
 80043ae:	61fb      	str	r3, [r7, #28]
        break;
 80043b0:	e00d      	b.n	80043ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b2:	f7fe ff1f 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80043b6:	61f8      	str	r0, [r7, #28]
        break;
 80043b8:	e009      	b.n	80043ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043be:	61fb      	str	r3, [r7, #28]
        break;
 80043c0:	e005      	b.n	80043ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d077      	beq.n	80044c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005a      	lsls	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	441a      	add	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b0f      	cmp	r3, #15
 80043ee:	d916      	bls.n	800441e <UART_SetConfig+0x4a6>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d212      	bcs.n	800441e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f023 030f 	bic.w	r3, r3, #15
 8004400:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	085b      	lsrs	r3, r3, #1
 8004406:	b29b      	uxth	r3, r3
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	b29a      	uxth	r2, r3
 800440e:	8afb      	ldrh	r3, [r7, #22]
 8004410:	4313      	orrs	r3, r2
 8004412:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	8afa      	ldrh	r2, [r7, #22]
 800441a:	60da      	str	r2, [r3, #12]
 800441c:	e052      	b.n	80044c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004424:	e04e      	b.n	80044c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004426:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800442a:	2b08      	cmp	r3, #8
 800442c:	d827      	bhi.n	800447e <UART_SetConfig+0x506>
 800442e:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <UART_SetConfig+0x4bc>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	08004459 	.word	0x08004459
 8004438:	08004461 	.word	0x08004461
 800443c:	08004469 	.word	0x08004469
 8004440:	0800447f 	.word	0x0800447f
 8004444:	0800446f 	.word	0x0800446f
 8004448:	0800447f 	.word	0x0800447f
 800444c:	0800447f 	.word	0x0800447f
 8004450:	0800447f 	.word	0x0800447f
 8004454:	08004477 	.word	0x08004477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004458:	f7fe ff64 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800445c:	61f8      	str	r0, [r7, #28]
        break;
 800445e:	e014      	b.n	800448a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004460:	f7fe ff76 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 8004464:	61f8      	str	r0, [r7, #28]
        break;
 8004466:	e010      	b.n	800448a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004468:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <UART_SetConfig+0x56c>)
 800446a:	61fb      	str	r3, [r7, #28]
        break;
 800446c:	e00d      	b.n	800448a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800446e:	f7fe fec1 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8004472:	61f8      	str	r0, [r7, #28]
        break;
 8004474:	e009      	b.n	800448a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800447a:	61fb      	str	r3, [r7, #28]
        break;
 800447c:	e005      	b.n	800448a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004488:	bf00      	nop
    }

    if (pclk != 0U)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d019      	beq.n	80044c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	085a      	lsrs	r2, r3, #1
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	441a      	add	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b0f      	cmp	r3, #15
 80044a8:	d909      	bls.n	80044be <UART_SetConfig+0x546>
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d205      	bcs.n	80044be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60da      	str	r2, [r3, #12]
 80044bc:	e002      	b.n	80044c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3728      	adds	r7, #40	; 0x28
 80044d8:	46bd      	mov	sp, r7
 80044da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044de:	bf00      	nop
 80044e0:	40008000 	.word	0x40008000
 80044e4:	00f42400 	.word	0x00f42400

080044e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01a      	beq.n	80045fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e6:	d10a      	bne.n	80045fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  }
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af02      	add	r7, sp, #8
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800463c:	f7fd fc9c 	bl	8001f78 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b08      	cmp	r3, #8
 800464e:	d10e      	bne.n	800466e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f82d 	bl	80046be <UART_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e023      	b.n	80046b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b04      	cmp	r3, #4
 800467a:	d10e      	bne.n	800469a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800467c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f817 	bl	80046be <UART_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e00d      	b.n	80046b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b09c      	sub	sp, #112	; 0x70
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ce:	e0a5      	b.n	800481c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	f000 80a1 	beq.w	800481c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7fd fc4d 	bl	8001f78 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80046ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d13e      	bne.n	800476e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004704:	667b      	str	r3, [r7, #100]	; 0x64
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800470e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004710:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004714:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800471c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e6      	bne.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3308      	adds	r3, #8
 8004728:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	663b      	str	r3, [r7, #96]	; 0x60
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3308      	adds	r3, #8
 8004740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004742:	64ba      	str	r2, [r7, #72]	; 0x48
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e5      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e067      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d04f      	beq.n	800481c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478a:	d147      	bne.n	800481c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004794:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b4:	637b      	str	r3, [r7, #52]	; 0x34
 80047b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e6      	bne.n	8004796 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	613b      	str	r3, [r7, #16]
   return(result);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047e8:	623a      	str	r2, [r7, #32]
 80047ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	69f9      	ldr	r1, [r7, #28]
 80047ee:	6a3a      	ldr	r2, [r7, #32]
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e5      	bne.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e010      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4013      	ands	r3, r2
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	429a      	cmp	r2, r3
 8004838:	f43f af4a 	beq.w	80046d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3770      	adds	r7, #112	; 0x70
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <__errno>:
 8004848:	4b01      	ldr	r3, [pc, #4]	; (8004850 <__errno+0x8>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000010 	.word	0x20000010

08004854 <__libc_init_array>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	4d0d      	ldr	r5, [pc, #52]	; (800488c <__libc_init_array+0x38>)
 8004858:	4c0d      	ldr	r4, [pc, #52]	; (8004890 <__libc_init_array+0x3c>)
 800485a:	1b64      	subs	r4, r4, r5
 800485c:	10a4      	asrs	r4, r4, #2
 800485e:	2600      	movs	r6, #0
 8004860:	42a6      	cmp	r6, r4
 8004862:	d109      	bne.n	8004878 <__libc_init_array+0x24>
 8004864:	4d0b      	ldr	r5, [pc, #44]	; (8004894 <__libc_init_array+0x40>)
 8004866:	4c0c      	ldr	r4, [pc, #48]	; (8004898 <__libc_init_array+0x44>)
 8004868:	f005 fa34 	bl	8009cd4 <_init>
 800486c:	1b64      	subs	r4, r4, r5
 800486e:	10a4      	asrs	r4, r4, #2
 8004870:	2600      	movs	r6, #0
 8004872:	42a6      	cmp	r6, r4
 8004874:	d105      	bne.n	8004882 <__libc_init_array+0x2e>
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	f855 3b04 	ldr.w	r3, [r5], #4
 800487c:	4798      	blx	r3
 800487e:	3601      	adds	r6, #1
 8004880:	e7ee      	b.n	8004860 <__libc_init_array+0xc>
 8004882:	f855 3b04 	ldr.w	r3, [r5], #4
 8004886:	4798      	blx	r3
 8004888:	3601      	adds	r6, #1
 800488a:	e7f2      	b.n	8004872 <__libc_init_array+0x1e>
 800488c:	0800a488 	.word	0x0800a488
 8004890:	0800a488 	.word	0x0800a488
 8004894:	0800a488 	.word	0x0800a488
 8004898:	0800a48c 	.word	0x0800a48c

0800489c <memcpy>:
 800489c:	440a      	add	r2, r1
 800489e:	4291      	cmp	r1, r2
 80048a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80048a4:	d100      	bne.n	80048a8 <memcpy+0xc>
 80048a6:	4770      	bx	lr
 80048a8:	b510      	push	{r4, lr}
 80048aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048b2:	4291      	cmp	r1, r2
 80048b4:	d1f9      	bne.n	80048aa <memcpy+0xe>
 80048b6:	bd10      	pop	{r4, pc}

080048b8 <memset>:
 80048b8:	4402      	add	r2, r0
 80048ba:	4603      	mov	r3, r0
 80048bc:	4293      	cmp	r3, r2
 80048be:	d100      	bne.n	80048c2 <memset+0xa>
 80048c0:	4770      	bx	lr
 80048c2:	f803 1b01 	strb.w	r1, [r3], #1
 80048c6:	e7f9      	b.n	80048bc <memset+0x4>

080048c8 <__cvt>:
 80048c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	ec55 4b10 	vmov	r4, r5, d0
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	460e      	mov	r6, r1
 80048d4:	4619      	mov	r1, r3
 80048d6:	462b      	mov	r3, r5
 80048d8:	bfbb      	ittet	lt
 80048da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048de:	461d      	movlt	r5, r3
 80048e0:	2300      	movge	r3, #0
 80048e2:	232d      	movlt	r3, #45	; 0x2d
 80048e4:	700b      	strb	r3, [r1, #0]
 80048e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048ec:	4691      	mov	r9, r2
 80048ee:	f023 0820 	bic.w	r8, r3, #32
 80048f2:	bfbc      	itt	lt
 80048f4:	4622      	movlt	r2, r4
 80048f6:	4614      	movlt	r4, r2
 80048f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048fc:	d005      	beq.n	800490a <__cvt+0x42>
 80048fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004902:	d100      	bne.n	8004906 <__cvt+0x3e>
 8004904:	3601      	adds	r6, #1
 8004906:	2102      	movs	r1, #2
 8004908:	e000      	b.n	800490c <__cvt+0x44>
 800490a:	2103      	movs	r1, #3
 800490c:	ab03      	add	r3, sp, #12
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	ab02      	add	r3, sp, #8
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	ec45 4b10 	vmov	d0, r4, r5
 8004918:	4653      	mov	r3, sl
 800491a:	4632      	mov	r2, r6
 800491c:	f001 fde0 	bl	80064e0 <_dtoa_r>
 8004920:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004924:	4607      	mov	r7, r0
 8004926:	d102      	bne.n	800492e <__cvt+0x66>
 8004928:	f019 0f01 	tst.w	r9, #1
 800492c:	d022      	beq.n	8004974 <__cvt+0xac>
 800492e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004932:	eb07 0906 	add.w	r9, r7, r6
 8004936:	d110      	bne.n	800495a <__cvt+0x92>
 8004938:	783b      	ldrb	r3, [r7, #0]
 800493a:	2b30      	cmp	r3, #48	; 0x30
 800493c:	d10a      	bne.n	8004954 <__cvt+0x8c>
 800493e:	2200      	movs	r2, #0
 8004940:	2300      	movs	r3, #0
 8004942:	4620      	mov	r0, r4
 8004944:	4629      	mov	r1, r5
 8004946:	f7fc f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800494a:	b918      	cbnz	r0, 8004954 <__cvt+0x8c>
 800494c:	f1c6 0601 	rsb	r6, r6, #1
 8004950:	f8ca 6000 	str.w	r6, [sl]
 8004954:	f8da 3000 	ldr.w	r3, [sl]
 8004958:	4499      	add	r9, r3
 800495a:	2200      	movs	r2, #0
 800495c:	2300      	movs	r3, #0
 800495e:	4620      	mov	r0, r4
 8004960:	4629      	mov	r1, r5
 8004962:	f7fc f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004966:	b108      	cbz	r0, 800496c <__cvt+0xa4>
 8004968:	f8cd 900c 	str.w	r9, [sp, #12]
 800496c:	2230      	movs	r2, #48	; 0x30
 800496e:	9b03      	ldr	r3, [sp, #12]
 8004970:	454b      	cmp	r3, r9
 8004972:	d307      	bcc.n	8004984 <__cvt+0xbc>
 8004974:	9b03      	ldr	r3, [sp, #12]
 8004976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004978:	1bdb      	subs	r3, r3, r7
 800497a:	4638      	mov	r0, r7
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	b004      	add	sp, #16
 8004980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004984:	1c59      	adds	r1, r3, #1
 8004986:	9103      	str	r1, [sp, #12]
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e7f0      	b.n	800496e <__cvt+0xa6>

0800498c <__exponent>:
 800498c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800498e:	4603      	mov	r3, r0
 8004990:	2900      	cmp	r1, #0
 8004992:	bfb8      	it	lt
 8004994:	4249      	neglt	r1, r1
 8004996:	f803 2b02 	strb.w	r2, [r3], #2
 800499a:	bfb4      	ite	lt
 800499c:	222d      	movlt	r2, #45	; 0x2d
 800499e:	222b      	movge	r2, #43	; 0x2b
 80049a0:	2909      	cmp	r1, #9
 80049a2:	7042      	strb	r2, [r0, #1]
 80049a4:	dd2a      	ble.n	80049fc <__exponent+0x70>
 80049a6:	f10d 0407 	add.w	r4, sp, #7
 80049aa:	46a4      	mov	ip, r4
 80049ac:	270a      	movs	r7, #10
 80049ae:	46a6      	mov	lr, r4
 80049b0:	460a      	mov	r2, r1
 80049b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80049b6:	fb07 1516 	mls	r5, r7, r6, r1
 80049ba:	3530      	adds	r5, #48	; 0x30
 80049bc:	2a63      	cmp	r2, #99	; 0x63
 80049be:	f104 34ff 	add.w	r4, r4, #4294967295
 80049c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049c6:	4631      	mov	r1, r6
 80049c8:	dcf1      	bgt.n	80049ae <__exponent+0x22>
 80049ca:	3130      	adds	r1, #48	; 0x30
 80049cc:	f1ae 0502 	sub.w	r5, lr, #2
 80049d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049d4:	1c44      	adds	r4, r0, #1
 80049d6:	4629      	mov	r1, r5
 80049d8:	4561      	cmp	r1, ip
 80049da:	d30a      	bcc.n	80049f2 <__exponent+0x66>
 80049dc:	f10d 0209 	add.w	r2, sp, #9
 80049e0:	eba2 020e 	sub.w	r2, r2, lr
 80049e4:	4565      	cmp	r5, ip
 80049e6:	bf88      	it	hi
 80049e8:	2200      	movhi	r2, #0
 80049ea:	4413      	add	r3, r2
 80049ec:	1a18      	subs	r0, r3, r0
 80049ee:	b003      	add	sp, #12
 80049f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049fa:	e7ed      	b.n	80049d8 <__exponent+0x4c>
 80049fc:	2330      	movs	r3, #48	; 0x30
 80049fe:	3130      	adds	r1, #48	; 0x30
 8004a00:	7083      	strb	r3, [r0, #2]
 8004a02:	70c1      	strb	r1, [r0, #3]
 8004a04:	1d03      	adds	r3, r0, #4
 8004a06:	e7f1      	b.n	80049ec <__exponent+0x60>

08004a08 <_printf_float>:
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	ed2d 8b02 	vpush	{d8}
 8004a10:	b08d      	sub	sp, #52	; 0x34
 8004a12:	460c      	mov	r4, r1
 8004a14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a18:	4616      	mov	r6, r2
 8004a1a:	461f      	mov	r7, r3
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	f002 febd 	bl	800779c <_localeconv_r>
 8004a22:	f8d0 a000 	ldr.w	sl, [r0]
 8004a26:	4650      	mov	r0, sl
 8004a28:	f7fb fbd2 	bl	80001d0 <strlen>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	9305      	str	r3, [sp, #20]
 8004a34:	f8d8 3000 	ldr.w	r3, [r8]
 8004a38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a3c:	3307      	adds	r3, #7
 8004a3e:	f023 0307 	bic.w	r3, r3, #7
 8004a42:	f103 0208 	add.w	r2, r3, #8
 8004a46:	f8c8 2000 	str.w	r2, [r8]
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a5a:	9307      	str	r3, [sp, #28]
 8004a5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a60:	ee08 0a10 	vmov	s16, r0
 8004a64:	4b9f      	ldr	r3, [pc, #636]	; (8004ce4 <_printf_float+0x2dc>)
 8004a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6e:	f7fc f85d 	bl	8000b2c <__aeabi_dcmpun>
 8004a72:	bb88      	cbnz	r0, 8004ad8 <_printf_float+0xd0>
 8004a74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a78:	4b9a      	ldr	r3, [pc, #616]	; (8004ce4 <_printf_float+0x2dc>)
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7e:	f7fc f837 	bl	8000af0 <__aeabi_dcmple>
 8004a82:	bb48      	cbnz	r0, 8004ad8 <_printf_float+0xd0>
 8004a84:	2200      	movs	r2, #0
 8004a86:	2300      	movs	r3, #0
 8004a88:	4640      	mov	r0, r8
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	f7fc f826 	bl	8000adc <__aeabi_dcmplt>
 8004a90:	b110      	cbz	r0, 8004a98 <_printf_float+0x90>
 8004a92:	232d      	movs	r3, #45	; 0x2d
 8004a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a98:	4b93      	ldr	r3, [pc, #588]	; (8004ce8 <_printf_float+0x2e0>)
 8004a9a:	4894      	ldr	r0, [pc, #592]	; (8004cec <_printf_float+0x2e4>)
 8004a9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004aa0:	bf94      	ite	ls
 8004aa2:	4698      	movls	r8, r3
 8004aa4:	4680      	movhi	r8, r0
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	6123      	str	r3, [r4, #16]
 8004aaa:	9b05      	ldr	r3, [sp, #20]
 8004aac:	f023 0204 	bic.w	r2, r3, #4
 8004ab0:	6022      	str	r2, [r4, #0]
 8004ab2:	f04f 0900 	mov.w	r9, #0
 8004ab6:	9700      	str	r7, [sp, #0]
 8004ab8:	4633      	mov	r3, r6
 8004aba:	aa0b      	add	r2, sp, #44	; 0x2c
 8004abc:	4621      	mov	r1, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 f9d8 	bl	8004e74 <_printf_common>
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	f040 8090 	bne.w	8004bea <_printf_float+0x1e2>
 8004aca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ace:	b00d      	add	sp, #52	; 0x34
 8004ad0:	ecbd 8b02 	vpop	{d8}
 8004ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	4640      	mov	r0, r8
 8004ade:	4649      	mov	r1, r9
 8004ae0:	f7fc f824 	bl	8000b2c <__aeabi_dcmpun>
 8004ae4:	b140      	cbz	r0, 8004af8 <_printf_float+0xf0>
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bfbc      	itt	lt
 8004aec:	232d      	movlt	r3, #45	; 0x2d
 8004aee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004af2:	487f      	ldr	r0, [pc, #508]	; (8004cf0 <_printf_float+0x2e8>)
 8004af4:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <_printf_float+0x2ec>)
 8004af6:	e7d1      	b.n	8004a9c <_printf_float+0x94>
 8004af8:	6863      	ldr	r3, [r4, #4]
 8004afa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004afe:	9206      	str	r2, [sp, #24]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	d13f      	bne.n	8004b84 <_printf_float+0x17c>
 8004b04:	2306      	movs	r3, #6
 8004b06:	6063      	str	r3, [r4, #4]
 8004b08:	9b05      	ldr	r3, [sp, #20]
 8004b0a:	6861      	ldr	r1, [r4, #4]
 8004b0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b10:	2300      	movs	r3, #0
 8004b12:	9303      	str	r3, [sp, #12]
 8004b14:	ab0a      	add	r3, sp, #40	; 0x28
 8004b16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b1a:	ab09      	add	r3, sp, #36	; 0x24
 8004b1c:	ec49 8b10 	vmov	d0, r8, r9
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	6022      	str	r2, [r4, #0]
 8004b24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f7ff fecd 	bl	80048c8 <__cvt>
 8004b2e:	9b06      	ldr	r3, [sp, #24]
 8004b30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b32:	2b47      	cmp	r3, #71	; 0x47
 8004b34:	4680      	mov	r8, r0
 8004b36:	d108      	bne.n	8004b4a <_printf_float+0x142>
 8004b38:	1cc8      	adds	r0, r1, #3
 8004b3a:	db02      	blt.n	8004b42 <_printf_float+0x13a>
 8004b3c:	6863      	ldr	r3, [r4, #4]
 8004b3e:	4299      	cmp	r1, r3
 8004b40:	dd41      	ble.n	8004bc6 <_printf_float+0x1be>
 8004b42:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b46:	fa5f fb8b 	uxtb.w	fp, fp
 8004b4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b4e:	d820      	bhi.n	8004b92 <_printf_float+0x18a>
 8004b50:	3901      	subs	r1, #1
 8004b52:	465a      	mov	r2, fp
 8004b54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b58:	9109      	str	r1, [sp, #36]	; 0x24
 8004b5a:	f7ff ff17 	bl	800498c <__exponent>
 8004b5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b60:	1813      	adds	r3, r2, r0
 8004b62:	2a01      	cmp	r2, #1
 8004b64:	4681      	mov	r9, r0
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	dc02      	bgt.n	8004b70 <_printf_float+0x168>
 8004b6a:	6822      	ldr	r2, [r4, #0]
 8004b6c:	07d2      	lsls	r2, r2, #31
 8004b6e:	d501      	bpl.n	8004b74 <_printf_float+0x16c>
 8004b70:	3301      	adds	r3, #1
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d09c      	beq.n	8004ab6 <_printf_float+0xae>
 8004b7c:	232d      	movs	r3, #45	; 0x2d
 8004b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b82:	e798      	b.n	8004ab6 <_printf_float+0xae>
 8004b84:	9a06      	ldr	r2, [sp, #24]
 8004b86:	2a47      	cmp	r2, #71	; 0x47
 8004b88:	d1be      	bne.n	8004b08 <_printf_float+0x100>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1bc      	bne.n	8004b08 <_printf_float+0x100>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e7b9      	b.n	8004b06 <_printf_float+0xfe>
 8004b92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b96:	d118      	bne.n	8004bca <_printf_float+0x1c2>
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	6863      	ldr	r3, [r4, #4]
 8004b9c:	dd0b      	ble.n	8004bb6 <_printf_float+0x1ae>
 8004b9e:	6121      	str	r1, [r4, #16]
 8004ba0:	b913      	cbnz	r3, 8004ba8 <_printf_float+0x1a0>
 8004ba2:	6822      	ldr	r2, [r4, #0]
 8004ba4:	07d0      	lsls	r0, r2, #31
 8004ba6:	d502      	bpl.n	8004bae <_printf_float+0x1a6>
 8004ba8:	3301      	adds	r3, #1
 8004baa:	440b      	add	r3, r1
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bb0:	f04f 0900 	mov.w	r9, #0
 8004bb4:	e7de      	b.n	8004b74 <_printf_float+0x16c>
 8004bb6:	b913      	cbnz	r3, 8004bbe <_printf_float+0x1b6>
 8004bb8:	6822      	ldr	r2, [r4, #0]
 8004bba:	07d2      	lsls	r2, r2, #31
 8004bbc:	d501      	bpl.n	8004bc2 <_printf_float+0x1ba>
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	e7f4      	b.n	8004bac <_printf_float+0x1a4>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e7f2      	b.n	8004bac <_printf_float+0x1a4>
 8004bc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bcc:	4299      	cmp	r1, r3
 8004bce:	db05      	blt.n	8004bdc <_printf_float+0x1d4>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	6121      	str	r1, [r4, #16]
 8004bd4:	07d8      	lsls	r0, r3, #31
 8004bd6:	d5ea      	bpl.n	8004bae <_printf_float+0x1a6>
 8004bd8:	1c4b      	adds	r3, r1, #1
 8004bda:	e7e7      	b.n	8004bac <_printf_float+0x1a4>
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	bfd4      	ite	le
 8004be0:	f1c1 0202 	rsble	r2, r1, #2
 8004be4:	2201      	movgt	r2, #1
 8004be6:	4413      	add	r3, r2
 8004be8:	e7e0      	b.n	8004bac <_printf_float+0x1a4>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	055a      	lsls	r2, r3, #21
 8004bee:	d407      	bmi.n	8004c00 <_printf_float+0x1f8>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	47b8      	blx	r7
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	d12c      	bne.n	8004c58 <_printf_float+0x250>
 8004bfe:	e764      	b.n	8004aca <_printf_float+0xc2>
 8004c00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c04:	f240 80e0 	bls.w	8004dc8 <_printf_float+0x3c0>
 8004c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f7fb ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d034      	beq.n	8004c82 <_printf_float+0x27a>
 8004c18:	4a37      	ldr	r2, [pc, #220]	; (8004cf8 <_printf_float+0x2f0>)
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	f43f af51 	beq.w	8004aca <_printf_float+0xc2>
 8004c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	db02      	blt.n	8004c36 <_printf_float+0x22e>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	07d8      	lsls	r0, r3, #31
 8004c34:	d510      	bpl.n	8004c58 <_printf_float+0x250>
 8004c36:	ee18 3a10 	vmov	r3, s16
 8004c3a:	4652      	mov	r2, sl
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	f43f af41 	beq.w	8004aca <_printf_float+0xc2>
 8004c48:	f04f 0800 	mov.w	r8, #0
 8004c4c:	f104 091a 	add.w	r9, r4, #26
 8004c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c52:	3b01      	subs	r3, #1
 8004c54:	4543      	cmp	r3, r8
 8004c56:	dc09      	bgt.n	8004c6c <_printf_float+0x264>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	079b      	lsls	r3, r3, #30
 8004c5c:	f100 8105 	bmi.w	8004e6a <_printf_float+0x462>
 8004c60:	68e0      	ldr	r0, [r4, #12]
 8004c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c64:	4298      	cmp	r0, r3
 8004c66:	bfb8      	it	lt
 8004c68:	4618      	movlt	r0, r3
 8004c6a:	e730      	b.n	8004ace <_printf_float+0xc6>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	464a      	mov	r2, r9
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b8      	blx	r7
 8004c76:	3001      	adds	r0, #1
 8004c78:	f43f af27 	beq.w	8004aca <_printf_float+0xc2>
 8004c7c:	f108 0801 	add.w	r8, r8, #1
 8004c80:	e7e6      	b.n	8004c50 <_printf_float+0x248>
 8004c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	dc39      	bgt.n	8004cfc <_printf_float+0x2f4>
 8004c88:	4a1b      	ldr	r2, [pc, #108]	; (8004cf8 <_printf_float+0x2f0>)
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	f43f af19 	beq.w	8004aca <_printf_float+0xc2>
 8004c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	d102      	bne.n	8004ca6 <_printf_float+0x29e>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	07d9      	lsls	r1, r3, #31
 8004ca4:	d5d8      	bpl.n	8004c58 <_printf_float+0x250>
 8004ca6:	ee18 3a10 	vmov	r3, s16
 8004caa:	4652      	mov	r2, sl
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f43f af09 	beq.w	8004aca <_printf_float+0xc2>
 8004cb8:	f04f 0900 	mov.w	r9, #0
 8004cbc:	f104 0a1a 	add.w	sl, r4, #26
 8004cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc2:	425b      	negs	r3, r3
 8004cc4:	454b      	cmp	r3, r9
 8004cc6:	dc01      	bgt.n	8004ccc <_printf_float+0x2c4>
 8004cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cca:	e792      	b.n	8004bf2 <_printf_float+0x1ea>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4652      	mov	r2, sl
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b8      	blx	r7
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	f43f aef7 	beq.w	8004aca <_printf_float+0xc2>
 8004cdc:	f109 0901 	add.w	r9, r9, #1
 8004ce0:	e7ee      	b.n	8004cc0 <_printf_float+0x2b8>
 8004ce2:	bf00      	nop
 8004ce4:	7fefffff 	.word	0x7fefffff
 8004ce8:	08009f6c 	.word	0x08009f6c
 8004cec:	08009f70 	.word	0x08009f70
 8004cf0:	08009f78 	.word	0x08009f78
 8004cf4:	08009f74 	.word	0x08009f74
 8004cf8:	08009f7c 	.word	0x08009f7c
 8004cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d00:	429a      	cmp	r2, r3
 8004d02:	bfa8      	it	ge
 8004d04:	461a      	movge	r2, r3
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	4691      	mov	r9, r2
 8004d0a:	dc37      	bgt.n	8004d7c <_printf_float+0x374>
 8004d0c:	f04f 0b00 	mov.w	fp, #0
 8004d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d14:	f104 021a 	add.w	r2, r4, #26
 8004d18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d1a:	9305      	str	r3, [sp, #20]
 8004d1c:	eba3 0309 	sub.w	r3, r3, r9
 8004d20:	455b      	cmp	r3, fp
 8004d22:	dc33      	bgt.n	8004d8c <_printf_float+0x384>
 8004d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	db3b      	blt.n	8004da4 <_printf_float+0x39c>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	07da      	lsls	r2, r3, #31
 8004d30:	d438      	bmi.n	8004da4 <_printf_float+0x39c>
 8004d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d34:	9a05      	ldr	r2, [sp, #20]
 8004d36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d38:	1a9a      	subs	r2, r3, r2
 8004d3a:	eba3 0901 	sub.w	r9, r3, r1
 8004d3e:	4591      	cmp	r9, r2
 8004d40:	bfa8      	it	ge
 8004d42:	4691      	movge	r9, r2
 8004d44:	f1b9 0f00 	cmp.w	r9, #0
 8004d48:	dc35      	bgt.n	8004db6 <_printf_float+0x3ae>
 8004d4a:	f04f 0800 	mov.w	r8, #0
 8004d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d52:	f104 0a1a 	add.w	sl, r4, #26
 8004d56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	eba3 0309 	sub.w	r3, r3, r9
 8004d60:	4543      	cmp	r3, r8
 8004d62:	f77f af79 	ble.w	8004c58 <_printf_float+0x250>
 8004d66:	2301      	movs	r3, #1
 8004d68:	4652      	mov	r2, sl
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f aeaa 	beq.w	8004aca <_printf_float+0xc2>
 8004d76:	f108 0801 	add.w	r8, r8, #1
 8004d7a:	e7ec      	b.n	8004d56 <_printf_float+0x34e>
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4642      	mov	r2, r8
 8004d82:	4628      	mov	r0, r5
 8004d84:	47b8      	blx	r7
 8004d86:	3001      	adds	r0, #1
 8004d88:	d1c0      	bne.n	8004d0c <_printf_float+0x304>
 8004d8a:	e69e      	b.n	8004aca <_printf_float+0xc2>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4628      	mov	r0, r5
 8004d92:	9205      	str	r2, [sp, #20]
 8004d94:	47b8      	blx	r7
 8004d96:	3001      	adds	r0, #1
 8004d98:	f43f ae97 	beq.w	8004aca <_printf_float+0xc2>
 8004d9c:	9a05      	ldr	r2, [sp, #20]
 8004d9e:	f10b 0b01 	add.w	fp, fp, #1
 8004da2:	e7b9      	b.n	8004d18 <_printf_float+0x310>
 8004da4:	ee18 3a10 	vmov	r3, s16
 8004da8:	4652      	mov	r2, sl
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b8      	blx	r7
 8004db0:	3001      	adds	r0, #1
 8004db2:	d1be      	bne.n	8004d32 <_printf_float+0x32a>
 8004db4:	e689      	b.n	8004aca <_printf_float+0xc2>
 8004db6:	9a05      	ldr	r2, [sp, #20]
 8004db8:	464b      	mov	r3, r9
 8004dba:	4442      	add	r2, r8
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d1c1      	bne.n	8004d4a <_printf_float+0x342>
 8004dc6:	e680      	b.n	8004aca <_printf_float+0xc2>
 8004dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dca:	2a01      	cmp	r2, #1
 8004dcc:	dc01      	bgt.n	8004dd2 <_printf_float+0x3ca>
 8004dce:	07db      	lsls	r3, r3, #31
 8004dd0:	d538      	bpl.n	8004e44 <_printf_float+0x43c>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b8      	blx	r7
 8004ddc:	3001      	adds	r0, #1
 8004dde:	f43f ae74 	beq.w	8004aca <_printf_float+0xc2>
 8004de2:	ee18 3a10 	vmov	r3, s16
 8004de6:	4652      	mov	r2, sl
 8004de8:	4631      	mov	r1, r6
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b8      	blx	r7
 8004dee:	3001      	adds	r0, #1
 8004df0:	f43f ae6b 	beq.w	8004aca <_printf_float+0xc2>
 8004df4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f7fb fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e00:	b9d8      	cbnz	r0, 8004e3a <_printf_float+0x432>
 8004e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e04:	f108 0201 	add.w	r2, r8, #1
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	47b8      	blx	r7
 8004e10:	3001      	adds	r0, #1
 8004e12:	d10e      	bne.n	8004e32 <_printf_float+0x42a>
 8004e14:	e659      	b.n	8004aca <_printf_float+0xc2>
 8004e16:	2301      	movs	r3, #1
 8004e18:	4652      	mov	r2, sl
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f ae52 	beq.w	8004aca <_printf_float+0xc2>
 8004e26:	f108 0801 	add.w	r8, r8, #1
 8004e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	4543      	cmp	r3, r8
 8004e30:	dcf1      	bgt.n	8004e16 <_printf_float+0x40e>
 8004e32:	464b      	mov	r3, r9
 8004e34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e38:	e6dc      	b.n	8004bf4 <_printf_float+0x1ec>
 8004e3a:	f04f 0800 	mov.w	r8, #0
 8004e3e:	f104 0a1a 	add.w	sl, r4, #26
 8004e42:	e7f2      	b.n	8004e2a <_printf_float+0x422>
 8004e44:	2301      	movs	r3, #1
 8004e46:	4642      	mov	r2, r8
 8004e48:	e7df      	b.n	8004e0a <_printf_float+0x402>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	464a      	mov	r2, r9
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	f43f ae38 	beq.w	8004aca <_printf_float+0xc2>
 8004e5a:	f108 0801 	add.w	r8, r8, #1
 8004e5e:	68e3      	ldr	r3, [r4, #12]
 8004e60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e62:	1a5b      	subs	r3, r3, r1
 8004e64:	4543      	cmp	r3, r8
 8004e66:	dcf0      	bgt.n	8004e4a <_printf_float+0x442>
 8004e68:	e6fa      	b.n	8004c60 <_printf_float+0x258>
 8004e6a:	f04f 0800 	mov.w	r8, #0
 8004e6e:	f104 0919 	add.w	r9, r4, #25
 8004e72:	e7f4      	b.n	8004e5e <_printf_float+0x456>

08004e74 <_printf_common>:
 8004e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e78:	4616      	mov	r6, r2
 8004e7a:	4699      	mov	r9, r3
 8004e7c:	688a      	ldr	r2, [r1, #8]
 8004e7e:	690b      	ldr	r3, [r1, #16]
 8004e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e84:	4293      	cmp	r3, r2
 8004e86:	bfb8      	it	lt
 8004e88:	4613      	movlt	r3, r2
 8004e8a:	6033      	str	r3, [r6, #0]
 8004e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e90:	4607      	mov	r7, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	b10a      	cbz	r2, 8004e9a <_printf_common+0x26>
 8004e96:	3301      	adds	r3, #1
 8004e98:	6033      	str	r3, [r6, #0]
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	0699      	lsls	r1, r3, #26
 8004e9e:	bf42      	ittt	mi
 8004ea0:	6833      	ldrmi	r3, [r6, #0]
 8004ea2:	3302      	addmi	r3, #2
 8004ea4:	6033      	strmi	r3, [r6, #0]
 8004ea6:	6825      	ldr	r5, [r4, #0]
 8004ea8:	f015 0506 	ands.w	r5, r5, #6
 8004eac:	d106      	bne.n	8004ebc <_printf_common+0x48>
 8004eae:	f104 0a19 	add.w	sl, r4, #25
 8004eb2:	68e3      	ldr	r3, [r4, #12]
 8004eb4:	6832      	ldr	r2, [r6, #0]
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	42ab      	cmp	r3, r5
 8004eba:	dc26      	bgt.n	8004f0a <_printf_common+0x96>
 8004ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ec0:	1e13      	subs	r3, r2, #0
 8004ec2:	6822      	ldr	r2, [r4, #0]
 8004ec4:	bf18      	it	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	0692      	lsls	r2, r2, #26
 8004eca:	d42b      	bmi.n	8004f24 <_printf_common+0xb0>
 8004ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	47c0      	blx	r8
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d01e      	beq.n	8004f18 <_printf_common+0xa4>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	68e5      	ldr	r5, [r4, #12]
 8004ede:	6832      	ldr	r2, [r6, #0]
 8004ee0:	f003 0306 	and.w	r3, r3, #6
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	bf08      	it	eq
 8004ee8:	1aad      	subeq	r5, r5, r2
 8004eea:	68a3      	ldr	r3, [r4, #8]
 8004eec:	6922      	ldr	r2, [r4, #16]
 8004eee:	bf0c      	ite	eq
 8004ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef4:	2500      	movne	r5, #0
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	bfc4      	itt	gt
 8004efa:	1a9b      	subgt	r3, r3, r2
 8004efc:	18ed      	addgt	r5, r5, r3
 8004efe:	2600      	movs	r6, #0
 8004f00:	341a      	adds	r4, #26
 8004f02:	42b5      	cmp	r5, r6
 8004f04:	d11a      	bne.n	8004f3c <_printf_common+0xc8>
 8004f06:	2000      	movs	r0, #0
 8004f08:	e008      	b.n	8004f1c <_printf_common+0xa8>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4652      	mov	r2, sl
 8004f0e:	4649      	mov	r1, r9
 8004f10:	4638      	mov	r0, r7
 8004f12:	47c0      	blx	r8
 8004f14:	3001      	adds	r0, #1
 8004f16:	d103      	bne.n	8004f20 <_printf_common+0xac>
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f20:	3501      	adds	r5, #1
 8004f22:	e7c6      	b.n	8004eb2 <_printf_common+0x3e>
 8004f24:	18e1      	adds	r1, r4, r3
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	2030      	movs	r0, #48	; 0x30
 8004f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f2e:	4422      	add	r2, r4
 8004f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f38:	3302      	adds	r3, #2
 8004f3a:	e7c7      	b.n	8004ecc <_printf_common+0x58>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	4622      	mov	r2, r4
 8004f40:	4649      	mov	r1, r9
 8004f42:	4638      	mov	r0, r7
 8004f44:	47c0      	blx	r8
 8004f46:	3001      	adds	r0, #1
 8004f48:	d0e6      	beq.n	8004f18 <_printf_common+0xa4>
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	e7d9      	b.n	8004f02 <_printf_common+0x8e>
	...

08004f50 <_printf_i>:
 8004f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	7e0f      	ldrb	r7, [r1, #24]
 8004f56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f58:	2f78      	cmp	r7, #120	; 0x78
 8004f5a:	4691      	mov	r9, r2
 8004f5c:	4680      	mov	r8, r0
 8004f5e:	460c      	mov	r4, r1
 8004f60:	469a      	mov	sl, r3
 8004f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f66:	d807      	bhi.n	8004f78 <_printf_i+0x28>
 8004f68:	2f62      	cmp	r7, #98	; 0x62
 8004f6a:	d80a      	bhi.n	8004f82 <_printf_i+0x32>
 8004f6c:	2f00      	cmp	r7, #0
 8004f6e:	f000 80d8 	beq.w	8005122 <_printf_i+0x1d2>
 8004f72:	2f58      	cmp	r7, #88	; 0x58
 8004f74:	f000 80a3 	beq.w	80050be <_printf_i+0x16e>
 8004f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f80:	e03a      	b.n	8004ff8 <_printf_i+0xa8>
 8004f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f86:	2b15      	cmp	r3, #21
 8004f88:	d8f6      	bhi.n	8004f78 <_printf_i+0x28>
 8004f8a:	a101      	add	r1, pc, #4	; (adr r1, 8004f90 <_printf_i+0x40>)
 8004f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	08004ffd 	.word	0x08004ffd
 8004f98:	08004f79 	.word	0x08004f79
 8004f9c:	08004f79 	.word	0x08004f79
 8004fa0:	08004f79 	.word	0x08004f79
 8004fa4:	08004f79 	.word	0x08004f79
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08004f79 	.word	0x08004f79
 8004fb0:	08004f79 	.word	0x08004f79
 8004fb4:	08004f79 	.word	0x08004f79
 8004fb8:	08004f79 	.word	0x08004f79
 8004fbc:	08005109 	.word	0x08005109
 8004fc0:	0800502d 	.word	0x0800502d
 8004fc4:	080050eb 	.word	0x080050eb
 8004fc8:	08004f79 	.word	0x08004f79
 8004fcc:	08004f79 	.word	0x08004f79
 8004fd0:	0800512b 	.word	0x0800512b
 8004fd4:	08004f79 	.word	0x08004f79
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	08004f79 	.word	0x08004f79
 8004fe0:	08004f79 	.word	0x08004f79
 8004fe4:	080050f3 	.word	0x080050f3
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	602a      	str	r2, [r5, #0]
 8004ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0a3      	b.n	8005144 <_printf_i+0x1f4>
 8004ffc:	6820      	ldr	r0, [r4, #0]
 8004ffe:	6829      	ldr	r1, [r5, #0]
 8005000:	0606      	lsls	r6, r0, #24
 8005002:	f101 0304 	add.w	r3, r1, #4
 8005006:	d50a      	bpl.n	800501e <_printf_i+0xce>
 8005008:	680e      	ldr	r6, [r1, #0]
 800500a:	602b      	str	r3, [r5, #0]
 800500c:	2e00      	cmp	r6, #0
 800500e:	da03      	bge.n	8005018 <_printf_i+0xc8>
 8005010:	232d      	movs	r3, #45	; 0x2d
 8005012:	4276      	negs	r6, r6
 8005014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005018:	485e      	ldr	r0, [pc, #376]	; (8005194 <_printf_i+0x244>)
 800501a:	230a      	movs	r3, #10
 800501c:	e019      	b.n	8005052 <_printf_i+0x102>
 800501e:	680e      	ldr	r6, [r1, #0]
 8005020:	602b      	str	r3, [r5, #0]
 8005022:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005026:	bf18      	it	ne
 8005028:	b236      	sxthne	r6, r6
 800502a:	e7ef      	b.n	800500c <_printf_i+0xbc>
 800502c:	682b      	ldr	r3, [r5, #0]
 800502e:	6820      	ldr	r0, [r4, #0]
 8005030:	1d19      	adds	r1, r3, #4
 8005032:	6029      	str	r1, [r5, #0]
 8005034:	0601      	lsls	r1, r0, #24
 8005036:	d501      	bpl.n	800503c <_printf_i+0xec>
 8005038:	681e      	ldr	r6, [r3, #0]
 800503a:	e002      	b.n	8005042 <_printf_i+0xf2>
 800503c:	0646      	lsls	r6, r0, #25
 800503e:	d5fb      	bpl.n	8005038 <_printf_i+0xe8>
 8005040:	881e      	ldrh	r6, [r3, #0]
 8005042:	4854      	ldr	r0, [pc, #336]	; (8005194 <_printf_i+0x244>)
 8005044:	2f6f      	cmp	r7, #111	; 0x6f
 8005046:	bf0c      	ite	eq
 8005048:	2308      	moveq	r3, #8
 800504a:	230a      	movne	r3, #10
 800504c:	2100      	movs	r1, #0
 800504e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005052:	6865      	ldr	r5, [r4, #4]
 8005054:	60a5      	str	r5, [r4, #8]
 8005056:	2d00      	cmp	r5, #0
 8005058:	bfa2      	ittt	ge
 800505a:	6821      	ldrge	r1, [r4, #0]
 800505c:	f021 0104 	bicge.w	r1, r1, #4
 8005060:	6021      	strge	r1, [r4, #0]
 8005062:	b90e      	cbnz	r6, 8005068 <_printf_i+0x118>
 8005064:	2d00      	cmp	r5, #0
 8005066:	d04d      	beq.n	8005104 <_printf_i+0x1b4>
 8005068:	4615      	mov	r5, r2
 800506a:	fbb6 f1f3 	udiv	r1, r6, r3
 800506e:	fb03 6711 	mls	r7, r3, r1, r6
 8005072:	5dc7      	ldrb	r7, [r0, r7]
 8005074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005078:	4637      	mov	r7, r6
 800507a:	42bb      	cmp	r3, r7
 800507c:	460e      	mov	r6, r1
 800507e:	d9f4      	bls.n	800506a <_printf_i+0x11a>
 8005080:	2b08      	cmp	r3, #8
 8005082:	d10b      	bne.n	800509c <_printf_i+0x14c>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	07de      	lsls	r6, r3, #31
 8005088:	d508      	bpl.n	800509c <_printf_i+0x14c>
 800508a:	6923      	ldr	r3, [r4, #16]
 800508c:	6861      	ldr	r1, [r4, #4]
 800508e:	4299      	cmp	r1, r3
 8005090:	bfde      	ittt	le
 8005092:	2330      	movle	r3, #48	; 0x30
 8005094:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005098:	f105 35ff 	addle.w	r5, r5, #4294967295
 800509c:	1b52      	subs	r2, r2, r5
 800509e:	6122      	str	r2, [r4, #16]
 80050a0:	f8cd a000 	str.w	sl, [sp]
 80050a4:	464b      	mov	r3, r9
 80050a6:	aa03      	add	r2, sp, #12
 80050a8:	4621      	mov	r1, r4
 80050aa:	4640      	mov	r0, r8
 80050ac:	f7ff fee2 	bl	8004e74 <_printf_common>
 80050b0:	3001      	adds	r0, #1
 80050b2:	d14c      	bne.n	800514e <_printf_i+0x1fe>
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	b004      	add	sp, #16
 80050ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050be:	4835      	ldr	r0, [pc, #212]	; (8005194 <_printf_i+0x244>)
 80050c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050c4:	6829      	ldr	r1, [r5, #0]
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80050cc:	6029      	str	r1, [r5, #0]
 80050ce:	061d      	lsls	r5, r3, #24
 80050d0:	d514      	bpl.n	80050fc <_printf_i+0x1ac>
 80050d2:	07df      	lsls	r7, r3, #31
 80050d4:	bf44      	itt	mi
 80050d6:	f043 0320 	orrmi.w	r3, r3, #32
 80050da:	6023      	strmi	r3, [r4, #0]
 80050dc:	b91e      	cbnz	r6, 80050e6 <_printf_i+0x196>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	f023 0320 	bic.w	r3, r3, #32
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	2310      	movs	r3, #16
 80050e8:	e7b0      	b.n	800504c <_printf_i+0xfc>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	f043 0320 	orr.w	r3, r3, #32
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	2378      	movs	r3, #120	; 0x78
 80050f4:	4828      	ldr	r0, [pc, #160]	; (8005198 <_printf_i+0x248>)
 80050f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050fa:	e7e3      	b.n	80050c4 <_printf_i+0x174>
 80050fc:	0659      	lsls	r1, r3, #25
 80050fe:	bf48      	it	mi
 8005100:	b2b6      	uxthmi	r6, r6
 8005102:	e7e6      	b.n	80050d2 <_printf_i+0x182>
 8005104:	4615      	mov	r5, r2
 8005106:	e7bb      	b.n	8005080 <_printf_i+0x130>
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	6826      	ldr	r6, [r4, #0]
 800510c:	6961      	ldr	r1, [r4, #20]
 800510e:	1d18      	adds	r0, r3, #4
 8005110:	6028      	str	r0, [r5, #0]
 8005112:	0635      	lsls	r5, r6, #24
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	d501      	bpl.n	800511c <_printf_i+0x1cc>
 8005118:	6019      	str	r1, [r3, #0]
 800511a:	e002      	b.n	8005122 <_printf_i+0x1d2>
 800511c:	0670      	lsls	r0, r6, #25
 800511e:	d5fb      	bpl.n	8005118 <_printf_i+0x1c8>
 8005120:	8019      	strh	r1, [r3, #0]
 8005122:	2300      	movs	r3, #0
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	4615      	mov	r5, r2
 8005128:	e7ba      	b.n	80050a0 <_printf_i+0x150>
 800512a:	682b      	ldr	r3, [r5, #0]
 800512c:	1d1a      	adds	r2, r3, #4
 800512e:	602a      	str	r2, [r5, #0]
 8005130:	681d      	ldr	r5, [r3, #0]
 8005132:	6862      	ldr	r2, [r4, #4]
 8005134:	2100      	movs	r1, #0
 8005136:	4628      	mov	r0, r5
 8005138:	f7fb f852 	bl	80001e0 <memchr>
 800513c:	b108      	cbz	r0, 8005142 <_printf_i+0x1f2>
 800513e:	1b40      	subs	r0, r0, r5
 8005140:	6060      	str	r0, [r4, #4]
 8005142:	6863      	ldr	r3, [r4, #4]
 8005144:	6123      	str	r3, [r4, #16]
 8005146:	2300      	movs	r3, #0
 8005148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800514c:	e7a8      	b.n	80050a0 <_printf_i+0x150>
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	462a      	mov	r2, r5
 8005152:	4649      	mov	r1, r9
 8005154:	4640      	mov	r0, r8
 8005156:	47d0      	blx	sl
 8005158:	3001      	adds	r0, #1
 800515a:	d0ab      	beq.n	80050b4 <_printf_i+0x164>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	079b      	lsls	r3, r3, #30
 8005160:	d413      	bmi.n	800518a <_printf_i+0x23a>
 8005162:	68e0      	ldr	r0, [r4, #12]
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	4298      	cmp	r0, r3
 8005168:	bfb8      	it	lt
 800516a:	4618      	movlt	r0, r3
 800516c:	e7a4      	b.n	80050b8 <_printf_i+0x168>
 800516e:	2301      	movs	r3, #1
 8005170:	4632      	mov	r2, r6
 8005172:	4649      	mov	r1, r9
 8005174:	4640      	mov	r0, r8
 8005176:	47d0      	blx	sl
 8005178:	3001      	adds	r0, #1
 800517a:	d09b      	beq.n	80050b4 <_printf_i+0x164>
 800517c:	3501      	adds	r5, #1
 800517e:	68e3      	ldr	r3, [r4, #12]
 8005180:	9903      	ldr	r1, [sp, #12]
 8005182:	1a5b      	subs	r3, r3, r1
 8005184:	42ab      	cmp	r3, r5
 8005186:	dcf2      	bgt.n	800516e <_printf_i+0x21e>
 8005188:	e7eb      	b.n	8005162 <_printf_i+0x212>
 800518a:	2500      	movs	r5, #0
 800518c:	f104 0619 	add.w	r6, r4, #25
 8005190:	e7f5      	b.n	800517e <_printf_i+0x22e>
 8005192:	bf00      	nop
 8005194:	08009f7e 	.word	0x08009f7e
 8005198:	08009f8f 	.word	0x08009f8f

0800519c <_scanf_float>:
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	b087      	sub	sp, #28
 80051a2:	4617      	mov	r7, r2
 80051a4:	9303      	str	r3, [sp, #12]
 80051a6:	688b      	ldr	r3, [r1, #8]
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80051ae:	bf83      	ittte	hi
 80051b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80051b4:	195b      	addhi	r3, r3, r5
 80051b6:	9302      	strhi	r3, [sp, #8]
 80051b8:	2300      	movls	r3, #0
 80051ba:	bf86      	itte	hi
 80051bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80051c0:	608b      	strhi	r3, [r1, #8]
 80051c2:	9302      	strls	r3, [sp, #8]
 80051c4:	680b      	ldr	r3, [r1, #0]
 80051c6:	468b      	mov	fp, r1
 80051c8:	2500      	movs	r5, #0
 80051ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80051ce:	f84b 3b1c 	str.w	r3, [fp], #28
 80051d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80051d6:	4680      	mov	r8, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	465e      	mov	r6, fp
 80051dc:	46aa      	mov	sl, r5
 80051de:	46a9      	mov	r9, r5
 80051e0:	9501      	str	r5, [sp, #4]
 80051e2:	68a2      	ldr	r2, [r4, #8]
 80051e4:	b152      	cbz	r2, 80051fc <_scanf_float+0x60>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b4e      	cmp	r3, #78	; 0x4e
 80051ec:	d864      	bhi.n	80052b8 <_scanf_float+0x11c>
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d83c      	bhi.n	800526c <_scanf_float+0xd0>
 80051f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80051f6:	b2c8      	uxtb	r0, r1
 80051f8:	280e      	cmp	r0, #14
 80051fa:	d93a      	bls.n	8005272 <_scanf_float+0xd6>
 80051fc:	f1b9 0f00 	cmp.w	r9, #0
 8005200:	d003      	beq.n	800520a <_scanf_float+0x6e>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800520e:	f1ba 0f01 	cmp.w	sl, #1
 8005212:	f200 8113 	bhi.w	800543c <_scanf_float+0x2a0>
 8005216:	455e      	cmp	r6, fp
 8005218:	f200 8105 	bhi.w	8005426 <_scanf_float+0x28a>
 800521c:	2501      	movs	r5, #1
 800521e:	4628      	mov	r0, r5
 8005220:	b007      	add	sp, #28
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005226:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800522a:	2a0d      	cmp	r2, #13
 800522c:	d8e6      	bhi.n	80051fc <_scanf_float+0x60>
 800522e:	a101      	add	r1, pc, #4	; (adr r1, 8005234 <_scanf_float+0x98>)
 8005230:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005234:	08005373 	.word	0x08005373
 8005238:	080051fd 	.word	0x080051fd
 800523c:	080051fd 	.word	0x080051fd
 8005240:	080051fd 	.word	0x080051fd
 8005244:	080053d3 	.word	0x080053d3
 8005248:	080053ab 	.word	0x080053ab
 800524c:	080051fd 	.word	0x080051fd
 8005250:	080051fd 	.word	0x080051fd
 8005254:	08005381 	.word	0x08005381
 8005258:	080051fd 	.word	0x080051fd
 800525c:	080051fd 	.word	0x080051fd
 8005260:	080051fd 	.word	0x080051fd
 8005264:	080051fd 	.word	0x080051fd
 8005268:	08005339 	.word	0x08005339
 800526c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005270:	e7db      	b.n	800522a <_scanf_float+0x8e>
 8005272:	290e      	cmp	r1, #14
 8005274:	d8c2      	bhi.n	80051fc <_scanf_float+0x60>
 8005276:	a001      	add	r0, pc, #4	; (adr r0, 800527c <_scanf_float+0xe0>)
 8005278:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800527c:	0800532b 	.word	0x0800532b
 8005280:	080051fd 	.word	0x080051fd
 8005284:	0800532b 	.word	0x0800532b
 8005288:	080053bf 	.word	0x080053bf
 800528c:	080051fd 	.word	0x080051fd
 8005290:	080052d9 	.word	0x080052d9
 8005294:	08005315 	.word	0x08005315
 8005298:	08005315 	.word	0x08005315
 800529c:	08005315 	.word	0x08005315
 80052a0:	08005315 	.word	0x08005315
 80052a4:	08005315 	.word	0x08005315
 80052a8:	08005315 	.word	0x08005315
 80052ac:	08005315 	.word	0x08005315
 80052b0:	08005315 	.word	0x08005315
 80052b4:	08005315 	.word	0x08005315
 80052b8:	2b6e      	cmp	r3, #110	; 0x6e
 80052ba:	d809      	bhi.n	80052d0 <_scanf_float+0x134>
 80052bc:	2b60      	cmp	r3, #96	; 0x60
 80052be:	d8b2      	bhi.n	8005226 <_scanf_float+0x8a>
 80052c0:	2b54      	cmp	r3, #84	; 0x54
 80052c2:	d077      	beq.n	80053b4 <_scanf_float+0x218>
 80052c4:	2b59      	cmp	r3, #89	; 0x59
 80052c6:	d199      	bne.n	80051fc <_scanf_float+0x60>
 80052c8:	2d07      	cmp	r5, #7
 80052ca:	d197      	bne.n	80051fc <_scanf_float+0x60>
 80052cc:	2508      	movs	r5, #8
 80052ce:	e029      	b.n	8005324 <_scanf_float+0x188>
 80052d0:	2b74      	cmp	r3, #116	; 0x74
 80052d2:	d06f      	beq.n	80053b4 <_scanf_float+0x218>
 80052d4:	2b79      	cmp	r3, #121	; 0x79
 80052d6:	e7f6      	b.n	80052c6 <_scanf_float+0x12a>
 80052d8:	6821      	ldr	r1, [r4, #0]
 80052da:	05c8      	lsls	r0, r1, #23
 80052dc:	d51a      	bpl.n	8005314 <_scanf_float+0x178>
 80052de:	9b02      	ldr	r3, [sp, #8]
 80052e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80052e4:	6021      	str	r1, [r4, #0]
 80052e6:	f109 0901 	add.w	r9, r9, #1
 80052ea:	b11b      	cbz	r3, 80052f4 <_scanf_float+0x158>
 80052ec:	3b01      	subs	r3, #1
 80052ee:	3201      	adds	r2, #1
 80052f0:	9302      	str	r3, [sp, #8]
 80052f2:	60a2      	str	r2, [r4, #8]
 80052f4:	68a3      	ldr	r3, [r4, #8]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	60a3      	str	r3, [r4, #8]
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	3301      	adds	r3, #1
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3b01      	subs	r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	f340 8084 	ble.w	8005414 <_scanf_float+0x278>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	3301      	adds	r3, #1
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	e766      	b.n	80051e2 <_scanf_float+0x46>
 8005314:	eb1a 0f05 	cmn.w	sl, r5
 8005318:	f47f af70 	bne.w	80051fc <_scanf_float+0x60>
 800531c:	6822      	ldr	r2, [r4, #0]
 800531e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	f806 3b01 	strb.w	r3, [r6], #1
 8005328:	e7e4      	b.n	80052f4 <_scanf_float+0x158>
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	0610      	lsls	r0, r2, #24
 800532e:	f57f af65 	bpl.w	80051fc <_scanf_float+0x60>
 8005332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005336:	e7f4      	b.n	8005322 <_scanf_float+0x186>
 8005338:	f1ba 0f00 	cmp.w	sl, #0
 800533c:	d10e      	bne.n	800535c <_scanf_float+0x1c0>
 800533e:	f1b9 0f00 	cmp.w	r9, #0
 8005342:	d10e      	bne.n	8005362 <_scanf_float+0x1c6>
 8005344:	6822      	ldr	r2, [r4, #0]
 8005346:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800534a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800534e:	d108      	bne.n	8005362 <_scanf_float+0x1c6>
 8005350:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	f04f 0a01 	mov.w	sl, #1
 800535a:	e7e3      	b.n	8005324 <_scanf_float+0x188>
 800535c:	f1ba 0f02 	cmp.w	sl, #2
 8005360:	d055      	beq.n	800540e <_scanf_float+0x272>
 8005362:	2d01      	cmp	r5, #1
 8005364:	d002      	beq.n	800536c <_scanf_float+0x1d0>
 8005366:	2d04      	cmp	r5, #4
 8005368:	f47f af48 	bne.w	80051fc <_scanf_float+0x60>
 800536c:	3501      	adds	r5, #1
 800536e:	b2ed      	uxtb	r5, r5
 8005370:	e7d8      	b.n	8005324 <_scanf_float+0x188>
 8005372:	f1ba 0f01 	cmp.w	sl, #1
 8005376:	f47f af41 	bne.w	80051fc <_scanf_float+0x60>
 800537a:	f04f 0a02 	mov.w	sl, #2
 800537e:	e7d1      	b.n	8005324 <_scanf_float+0x188>
 8005380:	b97d      	cbnz	r5, 80053a2 <_scanf_float+0x206>
 8005382:	f1b9 0f00 	cmp.w	r9, #0
 8005386:	f47f af3c 	bne.w	8005202 <_scanf_float+0x66>
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005390:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005394:	f47f af39 	bne.w	800520a <_scanf_float+0x6e>
 8005398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800539c:	6022      	str	r2, [r4, #0]
 800539e:	2501      	movs	r5, #1
 80053a0:	e7c0      	b.n	8005324 <_scanf_float+0x188>
 80053a2:	2d03      	cmp	r5, #3
 80053a4:	d0e2      	beq.n	800536c <_scanf_float+0x1d0>
 80053a6:	2d05      	cmp	r5, #5
 80053a8:	e7de      	b.n	8005368 <_scanf_float+0x1cc>
 80053aa:	2d02      	cmp	r5, #2
 80053ac:	f47f af26 	bne.w	80051fc <_scanf_float+0x60>
 80053b0:	2503      	movs	r5, #3
 80053b2:	e7b7      	b.n	8005324 <_scanf_float+0x188>
 80053b4:	2d06      	cmp	r5, #6
 80053b6:	f47f af21 	bne.w	80051fc <_scanf_float+0x60>
 80053ba:	2507      	movs	r5, #7
 80053bc:	e7b2      	b.n	8005324 <_scanf_float+0x188>
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	0591      	lsls	r1, r2, #22
 80053c2:	f57f af1b 	bpl.w	80051fc <_scanf_float+0x60>
 80053c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80053d0:	e7a8      	b.n	8005324 <_scanf_float+0x188>
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80053d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80053dc:	d006      	beq.n	80053ec <_scanf_float+0x250>
 80053de:	0550      	lsls	r0, r2, #21
 80053e0:	f57f af0c 	bpl.w	80051fc <_scanf_float+0x60>
 80053e4:	f1b9 0f00 	cmp.w	r9, #0
 80053e8:	f43f af0f 	beq.w	800520a <_scanf_float+0x6e>
 80053ec:	0591      	lsls	r1, r2, #22
 80053ee:	bf58      	it	pl
 80053f0:	9901      	ldrpl	r1, [sp, #4]
 80053f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053f6:	bf58      	it	pl
 80053f8:	eba9 0101 	subpl.w	r1, r9, r1
 80053fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005400:	bf58      	it	pl
 8005402:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005406:	6022      	str	r2, [r4, #0]
 8005408:	f04f 0900 	mov.w	r9, #0
 800540c:	e78a      	b.n	8005324 <_scanf_float+0x188>
 800540e:	f04f 0a03 	mov.w	sl, #3
 8005412:	e787      	b.n	8005324 <_scanf_float+0x188>
 8005414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005418:	4639      	mov	r1, r7
 800541a:	4640      	mov	r0, r8
 800541c:	4798      	blx	r3
 800541e:	2800      	cmp	r0, #0
 8005420:	f43f aedf 	beq.w	80051e2 <_scanf_float+0x46>
 8005424:	e6ea      	b.n	80051fc <_scanf_float+0x60>
 8005426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800542a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800542e:	463a      	mov	r2, r7
 8005430:	4640      	mov	r0, r8
 8005432:	4798      	blx	r3
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	3b01      	subs	r3, #1
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	e6ec      	b.n	8005216 <_scanf_float+0x7a>
 800543c:	1e6b      	subs	r3, r5, #1
 800543e:	2b06      	cmp	r3, #6
 8005440:	d825      	bhi.n	800548e <_scanf_float+0x2f2>
 8005442:	2d02      	cmp	r5, #2
 8005444:	d836      	bhi.n	80054b4 <_scanf_float+0x318>
 8005446:	455e      	cmp	r6, fp
 8005448:	f67f aee8 	bls.w	800521c <_scanf_float+0x80>
 800544c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005450:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005454:	463a      	mov	r2, r7
 8005456:	4640      	mov	r0, r8
 8005458:	4798      	blx	r3
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	3b01      	subs	r3, #1
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	e7f1      	b.n	8005446 <_scanf_float+0x2aa>
 8005462:	9802      	ldr	r0, [sp, #8]
 8005464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005468:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800546c:	9002      	str	r0, [sp, #8]
 800546e:	463a      	mov	r2, r7
 8005470:	4640      	mov	r0, r8
 8005472:	4798      	blx	r3
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	3b01      	subs	r3, #1
 8005478:	6123      	str	r3, [r4, #16]
 800547a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800547e:	fa5f fa8a 	uxtb.w	sl, sl
 8005482:	f1ba 0f02 	cmp.w	sl, #2
 8005486:	d1ec      	bne.n	8005462 <_scanf_float+0x2c6>
 8005488:	3d03      	subs	r5, #3
 800548a:	b2ed      	uxtb	r5, r5
 800548c:	1b76      	subs	r6, r6, r5
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	05da      	lsls	r2, r3, #23
 8005492:	d52f      	bpl.n	80054f4 <_scanf_float+0x358>
 8005494:	055b      	lsls	r3, r3, #21
 8005496:	d510      	bpl.n	80054ba <_scanf_float+0x31e>
 8005498:	455e      	cmp	r6, fp
 800549a:	f67f aebf 	bls.w	800521c <_scanf_float+0x80>
 800549e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054a6:	463a      	mov	r2, r7
 80054a8:	4640      	mov	r0, r8
 80054aa:	4798      	blx	r3
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	6123      	str	r3, [r4, #16]
 80054b2:	e7f1      	b.n	8005498 <_scanf_float+0x2fc>
 80054b4:	46aa      	mov	sl, r5
 80054b6:	9602      	str	r6, [sp, #8]
 80054b8:	e7df      	b.n	800547a <_scanf_float+0x2de>
 80054ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	2965      	cmp	r1, #101	; 0x65
 80054c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80054c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	d00c      	beq.n	80054e8 <_scanf_float+0x34c>
 80054ce:	2945      	cmp	r1, #69	; 0x45
 80054d0:	d00a      	beq.n	80054e8 <_scanf_float+0x34c>
 80054d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054d6:	463a      	mov	r2, r7
 80054d8:	4640      	mov	r0, r8
 80054da:	4798      	blx	r3
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	1eb5      	subs	r5, r6, #2
 80054e6:	6123      	str	r3, [r4, #16]
 80054e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054ec:	463a      	mov	r2, r7
 80054ee:	4640      	mov	r0, r8
 80054f0:	4798      	blx	r3
 80054f2:	462e      	mov	r6, r5
 80054f4:	6825      	ldr	r5, [r4, #0]
 80054f6:	f015 0510 	ands.w	r5, r5, #16
 80054fa:	d159      	bne.n	80055b0 <_scanf_float+0x414>
 80054fc:	7035      	strb	r5, [r6, #0]
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005508:	d11b      	bne.n	8005542 <_scanf_float+0x3a6>
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	454b      	cmp	r3, r9
 800550e:	eba3 0209 	sub.w	r2, r3, r9
 8005512:	d123      	bne.n	800555c <_scanf_float+0x3c0>
 8005514:	2200      	movs	r2, #0
 8005516:	4659      	mov	r1, fp
 8005518:	4640      	mov	r0, r8
 800551a:	f000 fecb 	bl	80062b4 <_strtod_r>
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	f012 0f02 	tst.w	r2, #2
 8005526:	ec57 6b10 	vmov	r6, r7, d0
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	d021      	beq.n	8005572 <_scanf_float+0x3d6>
 800552e:	9903      	ldr	r1, [sp, #12]
 8005530:	1d1a      	adds	r2, r3, #4
 8005532:	600a      	str	r2, [r1, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	e9c3 6700 	strd	r6, r7, [r3]
 800553a:	68e3      	ldr	r3, [r4, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60e3      	str	r3, [r4, #12]
 8005540:	e66d      	b.n	800521e <_scanf_float+0x82>
 8005542:	9b04      	ldr	r3, [sp, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0e5      	beq.n	8005514 <_scanf_float+0x378>
 8005548:	9905      	ldr	r1, [sp, #20]
 800554a:	230a      	movs	r3, #10
 800554c:	462a      	mov	r2, r5
 800554e:	3101      	adds	r1, #1
 8005550:	4640      	mov	r0, r8
 8005552:	f000 ff37 	bl	80063c4 <_strtol_r>
 8005556:	9b04      	ldr	r3, [sp, #16]
 8005558:	9e05      	ldr	r6, [sp, #20]
 800555a:	1ac2      	subs	r2, r0, r3
 800555c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005560:	429e      	cmp	r6, r3
 8005562:	bf28      	it	cs
 8005564:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005568:	4912      	ldr	r1, [pc, #72]	; (80055b4 <_scanf_float+0x418>)
 800556a:	4630      	mov	r0, r6
 800556c:	f000 f860 	bl	8005630 <siprintf>
 8005570:	e7d0      	b.n	8005514 <_scanf_float+0x378>
 8005572:	9903      	ldr	r1, [sp, #12]
 8005574:	f012 0f04 	tst.w	r2, #4
 8005578:	f103 0204 	add.w	r2, r3, #4
 800557c:	600a      	str	r2, [r1, #0]
 800557e:	d1d9      	bne.n	8005534 <_scanf_float+0x398>
 8005580:	f8d3 8000 	ldr.w	r8, [r3]
 8005584:	ee10 2a10 	vmov	r2, s0
 8005588:	ee10 0a10 	vmov	r0, s0
 800558c:	463b      	mov	r3, r7
 800558e:	4639      	mov	r1, r7
 8005590:	f7fb facc 	bl	8000b2c <__aeabi_dcmpun>
 8005594:	b128      	cbz	r0, 80055a2 <_scanf_float+0x406>
 8005596:	4808      	ldr	r0, [pc, #32]	; (80055b8 <_scanf_float+0x41c>)
 8005598:	f000 f810 	bl	80055bc <nanf>
 800559c:	ed88 0a00 	vstr	s0, [r8]
 80055a0:	e7cb      	b.n	800553a <_scanf_float+0x39e>
 80055a2:	4630      	mov	r0, r6
 80055a4:	4639      	mov	r1, r7
 80055a6:	f7fb fb1f 	bl	8000be8 <__aeabi_d2f>
 80055aa:	f8c8 0000 	str.w	r0, [r8]
 80055ae:	e7c4      	b.n	800553a <_scanf_float+0x39e>
 80055b0:	2500      	movs	r5, #0
 80055b2:	e634      	b.n	800521e <_scanf_float+0x82>
 80055b4:	08009fa0 	.word	0x08009fa0
 80055b8:	0800a3a8 	.word	0x0800a3a8

080055bc <nanf>:
 80055bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80055c4 <nanf+0x8>
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	7fc00000 	.word	0x7fc00000

080055c8 <sniprintf>:
 80055c8:	b40c      	push	{r2, r3}
 80055ca:	b530      	push	{r4, r5, lr}
 80055cc:	4b17      	ldr	r3, [pc, #92]	; (800562c <sniprintf+0x64>)
 80055ce:	1e0c      	subs	r4, r1, #0
 80055d0:	681d      	ldr	r5, [r3, #0]
 80055d2:	b09d      	sub	sp, #116	; 0x74
 80055d4:	da08      	bge.n	80055e8 <sniprintf+0x20>
 80055d6:	238b      	movs	r3, #139	; 0x8b
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	b01d      	add	sp, #116	; 0x74
 80055e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055e4:	b002      	add	sp, #8
 80055e6:	4770      	bx	lr
 80055e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80055ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80055f0:	bf14      	ite	ne
 80055f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80055f6:	4623      	moveq	r3, r4
 80055f8:	9304      	str	r3, [sp, #16]
 80055fa:	9307      	str	r3, [sp, #28]
 80055fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005600:	9002      	str	r0, [sp, #8]
 8005602:	9006      	str	r0, [sp, #24]
 8005604:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005608:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800560a:	ab21      	add	r3, sp, #132	; 0x84
 800560c:	a902      	add	r1, sp, #8
 800560e:	4628      	mov	r0, r5
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	f002 fef5 	bl	8008400 <_svfiprintf_r>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	bfbc      	itt	lt
 800561a:	238b      	movlt	r3, #139	; 0x8b
 800561c:	602b      	strlt	r3, [r5, #0]
 800561e:	2c00      	cmp	r4, #0
 8005620:	d0dd      	beq.n	80055de <sniprintf+0x16>
 8005622:	9b02      	ldr	r3, [sp, #8]
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
 8005628:	e7d9      	b.n	80055de <sniprintf+0x16>
 800562a:	bf00      	nop
 800562c:	20000010 	.word	0x20000010

08005630 <siprintf>:
 8005630:	b40e      	push	{r1, r2, r3}
 8005632:	b500      	push	{lr}
 8005634:	b09c      	sub	sp, #112	; 0x70
 8005636:	ab1d      	add	r3, sp, #116	; 0x74
 8005638:	9002      	str	r0, [sp, #8]
 800563a:	9006      	str	r0, [sp, #24]
 800563c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005640:	4809      	ldr	r0, [pc, #36]	; (8005668 <siprintf+0x38>)
 8005642:	9107      	str	r1, [sp, #28]
 8005644:	9104      	str	r1, [sp, #16]
 8005646:	4909      	ldr	r1, [pc, #36]	; (800566c <siprintf+0x3c>)
 8005648:	f853 2b04 	ldr.w	r2, [r3], #4
 800564c:	9105      	str	r1, [sp, #20]
 800564e:	6800      	ldr	r0, [r0, #0]
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	a902      	add	r1, sp, #8
 8005654:	f002 fed4 	bl	8008400 <_svfiprintf_r>
 8005658:	9b02      	ldr	r3, [sp, #8]
 800565a:	2200      	movs	r2, #0
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	b01c      	add	sp, #112	; 0x70
 8005660:	f85d eb04 	ldr.w	lr, [sp], #4
 8005664:	b003      	add	sp, #12
 8005666:	4770      	bx	lr
 8005668:	20000010 	.word	0x20000010
 800566c:	ffff0208 	.word	0xffff0208

08005670 <sulp>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	4604      	mov	r4, r0
 8005674:	460d      	mov	r5, r1
 8005676:	ec45 4b10 	vmov	d0, r4, r5
 800567a:	4616      	mov	r6, r2
 800567c:	f002 fc1e 	bl	8007ebc <__ulp>
 8005680:	ec51 0b10 	vmov	r0, r1, d0
 8005684:	b17e      	cbz	r6, 80056a6 <sulp+0x36>
 8005686:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800568a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800568e:	2b00      	cmp	r3, #0
 8005690:	dd09      	ble.n	80056a6 <sulp+0x36>
 8005692:	051b      	lsls	r3, r3, #20
 8005694:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005698:	2400      	movs	r4, #0
 800569a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800569e:	4622      	mov	r2, r4
 80056a0:	462b      	mov	r3, r5
 80056a2:	f7fa ffa9 	bl	80005f8 <__aeabi_dmul>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}

080056a8 <_strtod_l>:
 80056a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	ed2d 8b02 	vpush	{d8}
 80056b0:	b09d      	sub	sp, #116	; 0x74
 80056b2:	461f      	mov	r7, r3
 80056b4:	2300      	movs	r3, #0
 80056b6:	9318      	str	r3, [sp, #96]	; 0x60
 80056b8:	4ba2      	ldr	r3, [pc, #648]	; (8005944 <_strtod_l+0x29c>)
 80056ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	9305      	str	r3, [sp, #20]
 80056c0:	4604      	mov	r4, r0
 80056c2:	4618      	mov	r0, r3
 80056c4:	4688      	mov	r8, r1
 80056c6:	f7fa fd83 	bl	80001d0 <strlen>
 80056ca:	f04f 0a00 	mov.w	sl, #0
 80056ce:	4605      	mov	r5, r0
 80056d0:	f04f 0b00 	mov.w	fp, #0
 80056d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80056d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056da:	781a      	ldrb	r2, [r3, #0]
 80056dc:	2a2b      	cmp	r2, #43	; 0x2b
 80056de:	d04e      	beq.n	800577e <_strtod_l+0xd6>
 80056e0:	d83b      	bhi.n	800575a <_strtod_l+0xb2>
 80056e2:	2a0d      	cmp	r2, #13
 80056e4:	d834      	bhi.n	8005750 <_strtod_l+0xa8>
 80056e6:	2a08      	cmp	r2, #8
 80056e8:	d834      	bhi.n	8005754 <_strtod_l+0xac>
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	d03e      	beq.n	800576c <_strtod_l+0xc4>
 80056ee:	2300      	movs	r3, #0
 80056f0:	930a      	str	r3, [sp, #40]	; 0x28
 80056f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80056f4:	7833      	ldrb	r3, [r6, #0]
 80056f6:	2b30      	cmp	r3, #48	; 0x30
 80056f8:	f040 80b0 	bne.w	800585c <_strtod_l+0x1b4>
 80056fc:	7873      	ldrb	r3, [r6, #1]
 80056fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005702:	2b58      	cmp	r3, #88	; 0x58
 8005704:	d168      	bne.n	80057d8 <_strtod_l+0x130>
 8005706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	ab18      	add	r3, sp, #96	; 0x60
 800570c:	9702      	str	r7, [sp, #8]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	4a8d      	ldr	r2, [pc, #564]	; (8005948 <_strtod_l+0x2a0>)
 8005712:	ab19      	add	r3, sp, #100	; 0x64
 8005714:	a917      	add	r1, sp, #92	; 0x5c
 8005716:	4620      	mov	r0, r4
 8005718:	f001 fd38 	bl	800718c <__gethex>
 800571c:	f010 0707 	ands.w	r7, r0, #7
 8005720:	4605      	mov	r5, r0
 8005722:	d005      	beq.n	8005730 <_strtod_l+0x88>
 8005724:	2f06      	cmp	r7, #6
 8005726:	d12c      	bne.n	8005782 <_strtod_l+0xda>
 8005728:	3601      	adds	r6, #1
 800572a:	2300      	movs	r3, #0
 800572c:	9617      	str	r6, [sp, #92]	; 0x5c
 800572e:	930a      	str	r3, [sp, #40]	; 0x28
 8005730:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005732:	2b00      	cmp	r3, #0
 8005734:	f040 8590 	bne.w	8006258 <_strtod_l+0xbb0>
 8005738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800573a:	b1eb      	cbz	r3, 8005778 <_strtod_l+0xd0>
 800573c:	4652      	mov	r2, sl
 800573e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005742:	ec43 2b10 	vmov	d0, r2, r3
 8005746:	b01d      	add	sp, #116	; 0x74
 8005748:	ecbd 8b02 	vpop	{d8}
 800574c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005750:	2a20      	cmp	r2, #32
 8005752:	d1cc      	bne.n	80056ee <_strtod_l+0x46>
 8005754:	3301      	adds	r3, #1
 8005756:	9317      	str	r3, [sp, #92]	; 0x5c
 8005758:	e7be      	b.n	80056d8 <_strtod_l+0x30>
 800575a:	2a2d      	cmp	r2, #45	; 0x2d
 800575c:	d1c7      	bne.n	80056ee <_strtod_l+0x46>
 800575e:	2201      	movs	r2, #1
 8005760:	920a      	str	r2, [sp, #40]	; 0x28
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	9217      	str	r2, [sp, #92]	; 0x5c
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1c2      	bne.n	80056f2 <_strtod_l+0x4a>
 800576c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800576e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005772:	2b00      	cmp	r3, #0
 8005774:	f040 856e 	bne.w	8006254 <_strtod_l+0xbac>
 8005778:	4652      	mov	r2, sl
 800577a:	465b      	mov	r3, fp
 800577c:	e7e1      	b.n	8005742 <_strtod_l+0x9a>
 800577e:	2200      	movs	r2, #0
 8005780:	e7ee      	b.n	8005760 <_strtod_l+0xb8>
 8005782:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005784:	b13a      	cbz	r2, 8005796 <_strtod_l+0xee>
 8005786:	2135      	movs	r1, #53	; 0x35
 8005788:	a81a      	add	r0, sp, #104	; 0x68
 800578a:	f002 fca2 	bl	80080d2 <__copybits>
 800578e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005790:	4620      	mov	r0, r4
 8005792:	f002 f861 	bl	8007858 <_Bfree>
 8005796:	3f01      	subs	r7, #1
 8005798:	2f04      	cmp	r7, #4
 800579a:	d806      	bhi.n	80057aa <_strtod_l+0x102>
 800579c:	e8df f007 	tbb	[pc, r7]
 80057a0:	1714030a 	.word	0x1714030a
 80057a4:	0a          	.byte	0x0a
 80057a5:	00          	.byte	0x00
 80057a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80057aa:	0728      	lsls	r0, r5, #28
 80057ac:	d5c0      	bpl.n	8005730 <_strtod_l+0x88>
 80057ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80057b2:	e7bd      	b.n	8005730 <_strtod_l+0x88>
 80057b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80057b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80057ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80057be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80057c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80057c6:	e7f0      	b.n	80057aa <_strtod_l+0x102>
 80057c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800594c <_strtod_l+0x2a4>
 80057cc:	e7ed      	b.n	80057aa <_strtod_l+0x102>
 80057ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80057d2:	f04f 3aff 	mov.w	sl, #4294967295
 80057d6:	e7e8      	b.n	80057aa <_strtod_l+0x102>
 80057d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b30      	cmp	r3, #48	; 0x30
 80057e2:	d0f9      	beq.n	80057d8 <_strtod_l+0x130>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0a3      	beq.n	8005730 <_strtod_l+0x88>
 80057e8:	2301      	movs	r3, #1
 80057ea:	f04f 0900 	mov.w	r9, #0
 80057ee:	9304      	str	r3, [sp, #16]
 80057f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057f2:	9308      	str	r3, [sp, #32]
 80057f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80057f8:	464f      	mov	r7, r9
 80057fa:	220a      	movs	r2, #10
 80057fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80057fe:	7806      	ldrb	r6, [r0, #0]
 8005800:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005804:	b2d9      	uxtb	r1, r3
 8005806:	2909      	cmp	r1, #9
 8005808:	d92a      	bls.n	8005860 <_strtod_l+0x1b8>
 800580a:	9905      	ldr	r1, [sp, #20]
 800580c:	462a      	mov	r2, r5
 800580e:	f002 ff0f 	bl	8008630 <strncmp>
 8005812:	b398      	cbz	r0, 800587c <_strtod_l+0x1d4>
 8005814:	2000      	movs	r0, #0
 8005816:	4632      	mov	r2, r6
 8005818:	463d      	mov	r5, r7
 800581a:	9005      	str	r0, [sp, #20]
 800581c:	4603      	mov	r3, r0
 800581e:	2a65      	cmp	r2, #101	; 0x65
 8005820:	d001      	beq.n	8005826 <_strtod_l+0x17e>
 8005822:	2a45      	cmp	r2, #69	; 0x45
 8005824:	d118      	bne.n	8005858 <_strtod_l+0x1b0>
 8005826:	b91d      	cbnz	r5, 8005830 <_strtod_l+0x188>
 8005828:	9a04      	ldr	r2, [sp, #16]
 800582a:	4302      	orrs	r2, r0
 800582c:	d09e      	beq.n	800576c <_strtod_l+0xc4>
 800582e:	2500      	movs	r5, #0
 8005830:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005834:	f108 0201 	add.w	r2, r8, #1
 8005838:	9217      	str	r2, [sp, #92]	; 0x5c
 800583a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800583e:	2a2b      	cmp	r2, #43	; 0x2b
 8005840:	d075      	beq.n	800592e <_strtod_l+0x286>
 8005842:	2a2d      	cmp	r2, #45	; 0x2d
 8005844:	d07b      	beq.n	800593e <_strtod_l+0x296>
 8005846:	f04f 0c00 	mov.w	ip, #0
 800584a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800584e:	2909      	cmp	r1, #9
 8005850:	f240 8082 	bls.w	8005958 <_strtod_l+0x2b0>
 8005854:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005858:	2600      	movs	r6, #0
 800585a:	e09d      	b.n	8005998 <_strtod_l+0x2f0>
 800585c:	2300      	movs	r3, #0
 800585e:	e7c4      	b.n	80057ea <_strtod_l+0x142>
 8005860:	2f08      	cmp	r7, #8
 8005862:	bfd8      	it	le
 8005864:	9907      	ldrle	r1, [sp, #28]
 8005866:	f100 0001 	add.w	r0, r0, #1
 800586a:	bfda      	itte	le
 800586c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005870:	9307      	strle	r3, [sp, #28]
 8005872:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005876:	3701      	adds	r7, #1
 8005878:	9017      	str	r0, [sp, #92]	; 0x5c
 800587a:	e7bf      	b.n	80057fc <_strtod_l+0x154>
 800587c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800587e:	195a      	adds	r2, r3, r5
 8005880:	9217      	str	r2, [sp, #92]	; 0x5c
 8005882:	5d5a      	ldrb	r2, [r3, r5]
 8005884:	2f00      	cmp	r7, #0
 8005886:	d037      	beq.n	80058f8 <_strtod_l+0x250>
 8005888:	9005      	str	r0, [sp, #20]
 800588a:	463d      	mov	r5, r7
 800588c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005890:	2b09      	cmp	r3, #9
 8005892:	d912      	bls.n	80058ba <_strtod_l+0x212>
 8005894:	2301      	movs	r3, #1
 8005896:	e7c2      	b.n	800581e <_strtod_l+0x176>
 8005898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	9217      	str	r2, [sp, #92]	; 0x5c
 800589e:	785a      	ldrb	r2, [r3, #1]
 80058a0:	3001      	adds	r0, #1
 80058a2:	2a30      	cmp	r2, #48	; 0x30
 80058a4:	d0f8      	beq.n	8005898 <_strtod_l+0x1f0>
 80058a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	f200 84d9 	bhi.w	8006262 <_strtod_l+0xbba>
 80058b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058b2:	9005      	str	r0, [sp, #20]
 80058b4:	2000      	movs	r0, #0
 80058b6:	9308      	str	r3, [sp, #32]
 80058b8:	4605      	mov	r5, r0
 80058ba:	3a30      	subs	r2, #48	; 0x30
 80058bc:	f100 0301 	add.w	r3, r0, #1
 80058c0:	d014      	beq.n	80058ec <_strtod_l+0x244>
 80058c2:	9905      	ldr	r1, [sp, #20]
 80058c4:	4419      	add	r1, r3
 80058c6:	9105      	str	r1, [sp, #20]
 80058c8:	462b      	mov	r3, r5
 80058ca:	eb00 0e05 	add.w	lr, r0, r5
 80058ce:	210a      	movs	r1, #10
 80058d0:	4573      	cmp	r3, lr
 80058d2:	d113      	bne.n	80058fc <_strtod_l+0x254>
 80058d4:	182b      	adds	r3, r5, r0
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	f105 0501 	add.w	r5, r5, #1
 80058dc:	4405      	add	r5, r0
 80058de:	dc1c      	bgt.n	800591a <_strtod_l+0x272>
 80058e0:	9907      	ldr	r1, [sp, #28]
 80058e2:	230a      	movs	r3, #10
 80058e4:	fb03 2301 	mla	r3, r3, r1, r2
 80058e8:	9307      	str	r3, [sp, #28]
 80058ea:	2300      	movs	r3, #0
 80058ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80058ee:	1c51      	adds	r1, r2, #1
 80058f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80058f2:	7852      	ldrb	r2, [r2, #1]
 80058f4:	4618      	mov	r0, r3
 80058f6:	e7c9      	b.n	800588c <_strtod_l+0x1e4>
 80058f8:	4638      	mov	r0, r7
 80058fa:	e7d2      	b.n	80058a2 <_strtod_l+0x1fa>
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	dc04      	bgt.n	800590a <_strtod_l+0x262>
 8005900:	9e07      	ldr	r6, [sp, #28]
 8005902:	434e      	muls	r6, r1
 8005904:	9607      	str	r6, [sp, #28]
 8005906:	3301      	adds	r3, #1
 8005908:	e7e2      	b.n	80058d0 <_strtod_l+0x228>
 800590a:	f103 0c01 	add.w	ip, r3, #1
 800590e:	f1bc 0f10 	cmp.w	ip, #16
 8005912:	bfd8      	it	le
 8005914:	fb01 f909 	mulle.w	r9, r1, r9
 8005918:	e7f5      	b.n	8005906 <_strtod_l+0x25e>
 800591a:	2d10      	cmp	r5, #16
 800591c:	bfdc      	itt	le
 800591e:	230a      	movle	r3, #10
 8005920:	fb03 2909 	mlale	r9, r3, r9, r2
 8005924:	e7e1      	b.n	80058ea <_strtod_l+0x242>
 8005926:	2300      	movs	r3, #0
 8005928:	9305      	str	r3, [sp, #20]
 800592a:	2301      	movs	r3, #1
 800592c:	e77c      	b.n	8005828 <_strtod_l+0x180>
 800592e:	f04f 0c00 	mov.w	ip, #0
 8005932:	f108 0202 	add.w	r2, r8, #2
 8005936:	9217      	str	r2, [sp, #92]	; 0x5c
 8005938:	f898 2002 	ldrb.w	r2, [r8, #2]
 800593c:	e785      	b.n	800584a <_strtod_l+0x1a2>
 800593e:	f04f 0c01 	mov.w	ip, #1
 8005942:	e7f6      	b.n	8005932 <_strtod_l+0x28a>
 8005944:	0800a1f0 	.word	0x0800a1f0
 8005948:	08009fa8 	.word	0x08009fa8
 800594c:	7ff00000 	.word	0x7ff00000
 8005950:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005952:	1c51      	adds	r1, r2, #1
 8005954:	9117      	str	r1, [sp, #92]	; 0x5c
 8005956:	7852      	ldrb	r2, [r2, #1]
 8005958:	2a30      	cmp	r2, #48	; 0x30
 800595a:	d0f9      	beq.n	8005950 <_strtod_l+0x2a8>
 800595c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005960:	2908      	cmp	r1, #8
 8005962:	f63f af79 	bhi.w	8005858 <_strtod_l+0x1b0>
 8005966:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800596a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800596c:	9206      	str	r2, [sp, #24]
 800596e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005970:	1c51      	adds	r1, r2, #1
 8005972:	9117      	str	r1, [sp, #92]	; 0x5c
 8005974:	7852      	ldrb	r2, [r2, #1]
 8005976:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800597a:	2e09      	cmp	r6, #9
 800597c:	d937      	bls.n	80059ee <_strtod_l+0x346>
 800597e:	9e06      	ldr	r6, [sp, #24]
 8005980:	1b89      	subs	r1, r1, r6
 8005982:	2908      	cmp	r1, #8
 8005984:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005988:	dc02      	bgt.n	8005990 <_strtod_l+0x2e8>
 800598a:	4576      	cmp	r6, lr
 800598c:	bfa8      	it	ge
 800598e:	4676      	movge	r6, lr
 8005990:	f1bc 0f00 	cmp.w	ip, #0
 8005994:	d000      	beq.n	8005998 <_strtod_l+0x2f0>
 8005996:	4276      	negs	r6, r6
 8005998:	2d00      	cmp	r5, #0
 800599a:	d14d      	bne.n	8005a38 <_strtod_l+0x390>
 800599c:	9904      	ldr	r1, [sp, #16]
 800599e:	4301      	orrs	r1, r0
 80059a0:	f47f aec6 	bne.w	8005730 <_strtod_l+0x88>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f47f aee1 	bne.w	800576c <_strtod_l+0xc4>
 80059aa:	2a69      	cmp	r2, #105	; 0x69
 80059ac:	d027      	beq.n	80059fe <_strtod_l+0x356>
 80059ae:	dc24      	bgt.n	80059fa <_strtod_l+0x352>
 80059b0:	2a49      	cmp	r2, #73	; 0x49
 80059b2:	d024      	beq.n	80059fe <_strtod_l+0x356>
 80059b4:	2a4e      	cmp	r2, #78	; 0x4e
 80059b6:	f47f aed9 	bne.w	800576c <_strtod_l+0xc4>
 80059ba:	499f      	ldr	r1, [pc, #636]	; (8005c38 <_strtod_l+0x590>)
 80059bc:	a817      	add	r0, sp, #92	; 0x5c
 80059be:	f001 fe3d 	bl	800763c <__match>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	f43f aed2 	beq.w	800576c <_strtod_l+0xc4>
 80059c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b28      	cmp	r3, #40	; 0x28
 80059ce:	d12d      	bne.n	8005a2c <_strtod_l+0x384>
 80059d0:	499a      	ldr	r1, [pc, #616]	; (8005c3c <_strtod_l+0x594>)
 80059d2:	aa1a      	add	r2, sp, #104	; 0x68
 80059d4:	a817      	add	r0, sp, #92	; 0x5c
 80059d6:	f001 fe45 	bl	8007664 <__hexnan>
 80059da:	2805      	cmp	r0, #5
 80059dc:	d126      	bne.n	8005a2c <_strtod_l+0x384>
 80059de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80059e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80059e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80059ec:	e6a0      	b.n	8005730 <_strtod_l+0x88>
 80059ee:	210a      	movs	r1, #10
 80059f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80059f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80059f8:	e7b9      	b.n	800596e <_strtod_l+0x2c6>
 80059fa:	2a6e      	cmp	r2, #110	; 0x6e
 80059fc:	e7db      	b.n	80059b6 <_strtod_l+0x30e>
 80059fe:	4990      	ldr	r1, [pc, #576]	; (8005c40 <_strtod_l+0x598>)
 8005a00:	a817      	add	r0, sp, #92	; 0x5c
 8005a02:	f001 fe1b 	bl	800763c <__match>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	f43f aeb0 	beq.w	800576c <_strtod_l+0xc4>
 8005a0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a0e:	498d      	ldr	r1, [pc, #564]	; (8005c44 <_strtod_l+0x59c>)
 8005a10:	3b01      	subs	r3, #1
 8005a12:	a817      	add	r0, sp, #92	; 0x5c
 8005a14:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a16:	f001 fe11 	bl	800763c <__match>
 8005a1a:	b910      	cbnz	r0, 8005a22 <_strtod_l+0x37a>
 8005a1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a1e:	3301      	adds	r3, #1
 8005a20:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a22:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005c54 <_strtod_l+0x5ac>
 8005a26:	f04f 0a00 	mov.w	sl, #0
 8005a2a:	e681      	b.n	8005730 <_strtod_l+0x88>
 8005a2c:	4886      	ldr	r0, [pc, #536]	; (8005c48 <_strtod_l+0x5a0>)
 8005a2e:	f002 fde7 	bl	8008600 <nan>
 8005a32:	ec5b ab10 	vmov	sl, fp, d0
 8005a36:	e67b      	b.n	8005730 <_strtod_l+0x88>
 8005a38:	9b05      	ldr	r3, [sp, #20]
 8005a3a:	9807      	ldr	r0, [sp, #28]
 8005a3c:	1af3      	subs	r3, r6, r3
 8005a3e:	2f00      	cmp	r7, #0
 8005a40:	bf08      	it	eq
 8005a42:	462f      	moveq	r7, r5
 8005a44:	2d10      	cmp	r5, #16
 8005a46:	9306      	str	r3, [sp, #24]
 8005a48:	46a8      	mov	r8, r5
 8005a4a:	bfa8      	it	ge
 8005a4c:	f04f 0810 	movge.w	r8, #16
 8005a50:	f7fa fd58 	bl	8000504 <__aeabi_ui2d>
 8005a54:	2d09      	cmp	r5, #9
 8005a56:	4682      	mov	sl, r0
 8005a58:	468b      	mov	fp, r1
 8005a5a:	dd13      	ble.n	8005a84 <_strtod_l+0x3dc>
 8005a5c:	4b7b      	ldr	r3, [pc, #492]	; (8005c4c <_strtod_l+0x5a4>)
 8005a5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005a62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005a66:	f7fa fdc7 	bl	80005f8 <__aeabi_dmul>
 8005a6a:	4682      	mov	sl, r0
 8005a6c:	4648      	mov	r0, r9
 8005a6e:	468b      	mov	fp, r1
 8005a70:	f7fa fd48 	bl	8000504 <__aeabi_ui2d>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4650      	mov	r0, sl
 8005a7a:	4659      	mov	r1, fp
 8005a7c:	f7fa fc06 	bl	800028c <__adddf3>
 8005a80:	4682      	mov	sl, r0
 8005a82:	468b      	mov	fp, r1
 8005a84:	2d0f      	cmp	r5, #15
 8005a86:	dc38      	bgt.n	8005afa <_strtod_l+0x452>
 8005a88:	9b06      	ldr	r3, [sp, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f43f ae50 	beq.w	8005730 <_strtod_l+0x88>
 8005a90:	dd24      	ble.n	8005adc <_strtod_l+0x434>
 8005a92:	2b16      	cmp	r3, #22
 8005a94:	dc0b      	bgt.n	8005aae <_strtod_l+0x406>
 8005a96:	496d      	ldr	r1, [pc, #436]	; (8005c4c <_strtod_l+0x5a4>)
 8005a98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aa0:	4652      	mov	r2, sl
 8005aa2:	465b      	mov	r3, fp
 8005aa4:	f7fa fda8 	bl	80005f8 <__aeabi_dmul>
 8005aa8:	4682      	mov	sl, r0
 8005aaa:	468b      	mov	fp, r1
 8005aac:	e640      	b.n	8005730 <_strtod_l+0x88>
 8005aae:	9a06      	ldr	r2, [sp, #24]
 8005ab0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	db20      	blt.n	8005afa <_strtod_l+0x452>
 8005ab8:	4c64      	ldr	r4, [pc, #400]	; (8005c4c <_strtod_l+0x5a4>)
 8005aba:	f1c5 050f 	rsb	r5, r5, #15
 8005abe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	465b      	mov	r3, fp
 8005ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aca:	f7fa fd95 	bl	80005f8 <__aeabi_dmul>
 8005ace:	9b06      	ldr	r3, [sp, #24]
 8005ad0:	1b5d      	subs	r5, r3, r5
 8005ad2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005ad6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005ada:	e7e3      	b.n	8005aa4 <_strtod_l+0x3fc>
 8005adc:	9b06      	ldr	r3, [sp, #24]
 8005ade:	3316      	adds	r3, #22
 8005ae0:	db0b      	blt.n	8005afa <_strtod_l+0x452>
 8005ae2:	9b05      	ldr	r3, [sp, #20]
 8005ae4:	1b9e      	subs	r6, r3, r6
 8005ae6:	4b59      	ldr	r3, [pc, #356]	; (8005c4c <_strtod_l+0x5a4>)
 8005ae8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005aec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005af0:	4650      	mov	r0, sl
 8005af2:	4659      	mov	r1, fp
 8005af4:	f7fa feaa 	bl	800084c <__aeabi_ddiv>
 8005af8:	e7d6      	b.n	8005aa8 <_strtod_l+0x400>
 8005afa:	9b06      	ldr	r3, [sp, #24]
 8005afc:	eba5 0808 	sub.w	r8, r5, r8
 8005b00:	4498      	add	r8, r3
 8005b02:	f1b8 0f00 	cmp.w	r8, #0
 8005b06:	dd74      	ble.n	8005bf2 <_strtod_l+0x54a>
 8005b08:	f018 030f 	ands.w	r3, r8, #15
 8005b0c:	d00a      	beq.n	8005b24 <_strtod_l+0x47c>
 8005b0e:	494f      	ldr	r1, [pc, #316]	; (8005c4c <_strtod_l+0x5a4>)
 8005b10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b14:	4652      	mov	r2, sl
 8005b16:	465b      	mov	r3, fp
 8005b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b1c:	f7fa fd6c 	bl	80005f8 <__aeabi_dmul>
 8005b20:	4682      	mov	sl, r0
 8005b22:	468b      	mov	fp, r1
 8005b24:	f038 080f 	bics.w	r8, r8, #15
 8005b28:	d04f      	beq.n	8005bca <_strtod_l+0x522>
 8005b2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005b2e:	dd22      	ble.n	8005b76 <_strtod_l+0x4ce>
 8005b30:	2500      	movs	r5, #0
 8005b32:	462e      	mov	r6, r5
 8005b34:	9507      	str	r5, [sp, #28]
 8005b36:	9505      	str	r5, [sp, #20]
 8005b38:	2322      	movs	r3, #34	; 0x22
 8005b3a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005c54 <_strtod_l+0x5ac>
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	f04f 0a00 	mov.w	sl, #0
 8005b44:	9b07      	ldr	r3, [sp, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f43f adf2 	beq.w	8005730 <_strtod_l+0x88>
 8005b4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f001 fe82 	bl	8007858 <_Bfree>
 8005b54:	9905      	ldr	r1, [sp, #20]
 8005b56:	4620      	mov	r0, r4
 8005b58:	f001 fe7e 	bl	8007858 <_Bfree>
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f001 fe7a 	bl	8007858 <_Bfree>
 8005b64:	9907      	ldr	r1, [sp, #28]
 8005b66:	4620      	mov	r0, r4
 8005b68:	f001 fe76 	bl	8007858 <_Bfree>
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f001 fe72 	bl	8007858 <_Bfree>
 8005b74:	e5dc      	b.n	8005730 <_strtod_l+0x88>
 8005b76:	4b36      	ldr	r3, [pc, #216]	; (8005c50 <_strtod_l+0x5a8>)
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005b80:	4650      	mov	r0, sl
 8005b82:	4659      	mov	r1, fp
 8005b84:	4699      	mov	r9, r3
 8005b86:	f1b8 0f01 	cmp.w	r8, #1
 8005b8a:	dc21      	bgt.n	8005bd0 <_strtod_l+0x528>
 8005b8c:	b10b      	cbz	r3, 8005b92 <_strtod_l+0x4ea>
 8005b8e:	4682      	mov	sl, r0
 8005b90:	468b      	mov	fp, r1
 8005b92:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <_strtod_l+0x5a8>)
 8005b94:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005b98:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	465b      	mov	r3, fp
 8005ba0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005ba4:	f7fa fd28 	bl	80005f8 <__aeabi_dmul>
 8005ba8:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <_strtod_l+0x5ac>)
 8005baa:	460a      	mov	r2, r1
 8005bac:	400b      	ands	r3, r1
 8005bae:	492a      	ldr	r1, [pc, #168]	; (8005c58 <_strtod_l+0x5b0>)
 8005bb0:	428b      	cmp	r3, r1
 8005bb2:	4682      	mov	sl, r0
 8005bb4:	d8bc      	bhi.n	8005b30 <_strtod_l+0x488>
 8005bb6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005bba:	428b      	cmp	r3, r1
 8005bbc:	bf86      	itte	hi
 8005bbe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005c5c <_strtod_l+0x5b4>
 8005bc2:	f04f 3aff 	movhi.w	sl, #4294967295
 8005bc6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005bca:	2300      	movs	r3, #0
 8005bcc:	9304      	str	r3, [sp, #16]
 8005bce:	e084      	b.n	8005cda <_strtod_l+0x632>
 8005bd0:	f018 0f01 	tst.w	r8, #1
 8005bd4:	d005      	beq.n	8005be2 <_strtod_l+0x53a>
 8005bd6:	9b04      	ldr	r3, [sp, #16]
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa fd0c 	bl	80005f8 <__aeabi_dmul>
 8005be0:	2301      	movs	r3, #1
 8005be2:	9a04      	ldr	r2, [sp, #16]
 8005be4:	3208      	adds	r2, #8
 8005be6:	f109 0901 	add.w	r9, r9, #1
 8005bea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005bee:	9204      	str	r2, [sp, #16]
 8005bf0:	e7c9      	b.n	8005b86 <_strtod_l+0x4de>
 8005bf2:	d0ea      	beq.n	8005bca <_strtod_l+0x522>
 8005bf4:	f1c8 0800 	rsb	r8, r8, #0
 8005bf8:	f018 020f 	ands.w	r2, r8, #15
 8005bfc:	d00a      	beq.n	8005c14 <_strtod_l+0x56c>
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <_strtod_l+0x5a4>)
 8005c00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c04:	4650      	mov	r0, sl
 8005c06:	4659      	mov	r1, fp
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f7fa fe1e 	bl	800084c <__aeabi_ddiv>
 8005c10:	4682      	mov	sl, r0
 8005c12:	468b      	mov	fp, r1
 8005c14:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005c18:	d0d7      	beq.n	8005bca <_strtod_l+0x522>
 8005c1a:	f1b8 0f1f 	cmp.w	r8, #31
 8005c1e:	dd1f      	ble.n	8005c60 <_strtod_l+0x5b8>
 8005c20:	2500      	movs	r5, #0
 8005c22:	462e      	mov	r6, r5
 8005c24:	9507      	str	r5, [sp, #28]
 8005c26:	9505      	str	r5, [sp, #20]
 8005c28:	2322      	movs	r3, #34	; 0x22
 8005c2a:	f04f 0a00 	mov.w	sl, #0
 8005c2e:	f04f 0b00 	mov.w	fp, #0
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	e786      	b.n	8005b44 <_strtod_l+0x49c>
 8005c36:	bf00      	nop
 8005c38:	08009f79 	.word	0x08009f79
 8005c3c:	08009fbc 	.word	0x08009fbc
 8005c40:	08009f71 	.word	0x08009f71
 8005c44:	0800a0fc 	.word	0x0800a0fc
 8005c48:	0800a3a8 	.word	0x0800a3a8
 8005c4c:	0800a288 	.word	0x0800a288
 8005c50:	0800a260 	.word	0x0800a260
 8005c54:	7ff00000 	.word	0x7ff00000
 8005c58:	7ca00000 	.word	0x7ca00000
 8005c5c:	7fefffff 	.word	0x7fefffff
 8005c60:	f018 0310 	ands.w	r3, r8, #16
 8005c64:	bf18      	it	ne
 8005c66:	236a      	movne	r3, #106	; 0x6a
 8005c68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006018 <_strtod_l+0x970>
 8005c6c:	9304      	str	r3, [sp, #16]
 8005c6e:	4650      	mov	r0, sl
 8005c70:	4659      	mov	r1, fp
 8005c72:	2300      	movs	r3, #0
 8005c74:	f018 0f01 	tst.w	r8, #1
 8005c78:	d004      	beq.n	8005c84 <_strtod_l+0x5dc>
 8005c7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005c7e:	f7fa fcbb 	bl	80005f8 <__aeabi_dmul>
 8005c82:	2301      	movs	r3, #1
 8005c84:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005c88:	f109 0908 	add.w	r9, r9, #8
 8005c8c:	d1f2      	bne.n	8005c74 <_strtod_l+0x5cc>
 8005c8e:	b10b      	cbz	r3, 8005c94 <_strtod_l+0x5ec>
 8005c90:	4682      	mov	sl, r0
 8005c92:	468b      	mov	fp, r1
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	b1c3      	cbz	r3, 8005cca <_strtod_l+0x622>
 8005c98:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005c9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	dd11      	ble.n	8005cca <_strtod_l+0x622>
 8005ca6:	2b1f      	cmp	r3, #31
 8005ca8:	f340 8124 	ble.w	8005ef4 <_strtod_l+0x84c>
 8005cac:	2b34      	cmp	r3, #52	; 0x34
 8005cae:	bfde      	ittt	le
 8005cb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005cb4:	f04f 33ff 	movle.w	r3, #4294967295
 8005cb8:	fa03 f202 	lslle.w	r2, r3, r2
 8005cbc:	f04f 0a00 	mov.w	sl, #0
 8005cc0:	bfcc      	ite	gt
 8005cc2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005cc6:	ea02 0b01 	andle.w	fp, r2, r1
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4650      	mov	r0, sl
 8005cd0:	4659      	mov	r1, fp
 8005cd2:	f7fa fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d1a2      	bne.n	8005c20 <_strtod_l+0x578>
 8005cda:	9b07      	ldr	r3, [sp, #28]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	9908      	ldr	r1, [sp, #32]
 8005ce0:	462b      	mov	r3, r5
 8005ce2:	463a      	mov	r2, r7
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f001 fe1f 	bl	8007928 <__s2b>
 8005cea:	9007      	str	r0, [sp, #28]
 8005cec:	2800      	cmp	r0, #0
 8005cee:	f43f af1f 	beq.w	8005b30 <_strtod_l+0x488>
 8005cf2:	9b05      	ldr	r3, [sp, #20]
 8005cf4:	1b9e      	subs	r6, r3, r6
 8005cf6:	9b06      	ldr	r3, [sp, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	bfb4      	ite	lt
 8005cfc:	4633      	movlt	r3, r6
 8005cfe:	2300      	movge	r3, #0
 8005d00:	930c      	str	r3, [sp, #48]	; 0x30
 8005d02:	9b06      	ldr	r3, [sp, #24]
 8005d04:	2500      	movs	r5, #0
 8005d06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d0a:	9312      	str	r3, [sp, #72]	; 0x48
 8005d0c:	462e      	mov	r6, r5
 8005d0e:	9b07      	ldr	r3, [sp, #28]
 8005d10:	4620      	mov	r0, r4
 8005d12:	6859      	ldr	r1, [r3, #4]
 8005d14:	f001 fd60 	bl	80077d8 <_Balloc>
 8005d18:	9005      	str	r0, [sp, #20]
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f43f af0c 	beq.w	8005b38 <_strtod_l+0x490>
 8005d20:	9b07      	ldr	r3, [sp, #28]
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	3202      	adds	r2, #2
 8005d26:	f103 010c 	add.w	r1, r3, #12
 8005d2a:	0092      	lsls	r2, r2, #2
 8005d2c:	300c      	adds	r0, #12
 8005d2e:	f7fe fdb5 	bl	800489c <memcpy>
 8005d32:	ec4b ab10 	vmov	d0, sl, fp
 8005d36:	aa1a      	add	r2, sp, #104	; 0x68
 8005d38:	a919      	add	r1, sp, #100	; 0x64
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f002 f93a 	bl	8007fb4 <__d2b>
 8005d40:	ec4b ab18 	vmov	d8, sl, fp
 8005d44:	9018      	str	r0, [sp, #96]	; 0x60
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f43f aef6 	beq.w	8005b38 <_strtod_l+0x490>
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f001 fe84 	bl	8007a5c <__i2b>
 8005d54:	4606      	mov	r6, r0
 8005d56:	2800      	cmp	r0, #0
 8005d58:	f43f aeee 	beq.w	8005b38 <_strtod_l+0x490>
 8005d5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d5e:	9904      	ldr	r1, [sp, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bfab      	itete	ge
 8005d64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005d66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005d68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005d6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005d6e:	bfac      	ite	ge
 8005d70:	eb03 0902 	addge.w	r9, r3, r2
 8005d74:	1ad7      	sublt	r7, r2, r3
 8005d76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005d78:	eba3 0801 	sub.w	r8, r3, r1
 8005d7c:	4490      	add	r8, r2
 8005d7e:	4ba1      	ldr	r3, [pc, #644]	; (8006004 <_strtod_l+0x95c>)
 8005d80:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d84:	4598      	cmp	r8, r3
 8005d86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d8a:	f280 80c7 	bge.w	8005f1c <_strtod_l+0x874>
 8005d8e:	eba3 0308 	sub.w	r3, r3, r8
 8005d92:	2b1f      	cmp	r3, #31
 8005d94:	eba2 0203 	sub.w	r2, r2, r3
 8005d98:	f04f 0101 	mov.w	r1, #1
 8005d9c:	f300 80b1 	bgt.w	8005f02 <_strtod_l+0x85a>
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	930d      	str	r3, [sp, #52]	; 0x34
 8005da6:	2300      	movs	r3, #0
 8005da8:	9308      	str	r3, [sp, #32]
 8005daa:	eb09 0802 	add.w	r8, r9, r2
 8005dae:	9b04      	ldr	r3, [sp, #16]
 8005db0:	45c1      	cmp	r9, r8
 8005db2:	4417      	add	r7, r2
 8005db4:	441f      	add	r7, r3
 8005db6:	464b      	mov	r3, r9
 8005db8:	bfa8      	it	ge
 8005dba:	4643      	movge	r3, r8
 8005dbc:	42bb      	cmp	r3, r7
 8005dbe:	bfa8      	it	ge
 8005dc0:	463b      	movge	r3, r7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bfc2      	ittt	gt
 8005dc6:	eba8 0803 	subgt.w	r8, r8, r3
 8005dca:	1aff      	subgt	r7, r7, r3
 8005dcc:	eba9 0903 	subgt.w	r9, r9, r3
 8005dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	dd17      	ble.n	8005e06 <_strtod_l+0x75e>
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f001 fefe 	bl	8007bdc <__pow5mult>
 8005de0:	4606      	mov	r6, r0
 8005de2:	2800      	cmp	r0, #0
 8005de4:	f43f aea8 	beq.w	8005b38 <_strtod_l+0x490>
 8005de8:	4601      	mov	r1, r0
 8005dea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005dec:	4620      	mov	r0, r4
 8005dee:	f001 fe4b 	bl	8007a88 <__multiply>
 8005df2:	900b      	str	r0, [sp, #44]	; 0x2c
 8005df4:	2800      	cmp	r0, #0
 8005df6:	f43f ae9f 	beq.w	8005b38 <_strtod_l+0x490>
 8005dfa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f001 fd2b 	bl	8007858 <_Bfree>
 8005e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e04:	9318      	str	r3, [sp, #96]	; 0x60
 8005e06:	f1b8 0f00 	cmp.w	r8, #0
 8005e0a:	f300 808c 	bgt.w	8005f26 <_strtod_l+0x87e>
 8005e0e:	9b06      	ldr	r3, [sp, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	dd08      	ble.n	8005e26 <_strtod_l+0x77e>
 8005e14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e16:	9905      	ldr	r1, [sp, #20]
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f001 fedf 	bl	8007bdc <__pow5mult>
 8005e1e:	9005      	str	r0, [sp, #20]
 8005e20:	2800      	cmp	r0, #0
 8005e22:	f43f ae89 	beq.w	8005b38 <_strtod_l+0x490>
 8005e26:	2f00      	cmp	r7, #0
 8005e28:	dd08      	ble.n	8005e3c <_strtod_l+0x794>
 8005e2a:	9905      	ldr	r1, [sp, #20]
 8005e2c:	463a      	mov	r2, r7
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f001 ff2e 	bl	8007c90 <__lshift>
 8005e34:	9005      	str	r0, [sp, #20]
 8005e36:	2800      	cmp	r0, #0
 8005e38:	f43f ae7e 	beq.w	8005b38 <_strtod_l+0x490>
 8005e3c:	f1b9 0f00 	cmp.w	r9, #0
 8005e40:	dd08      	ble.n	8005e54 <_strtod_l+0x7ac>
 8005e42:	4631      	mov	r1, r6
 8005e44:	464a      	mov	r2, r9
 8005e46:	4620      	mov	r0, r4
 8005e48:	f001 ff22 	bl	8007c90 <__lshift>
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f43f ae72 	beq.w	8005b38 <_strtod_l+0x490>
 8005e54:	9a05      	ldr	r2, [sp, #20]
 8005e56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f001 ffa5 	bl	8007da8 <__mdiff>
 8005e5e:	4605      	mov	r5, r0
 8005e60:	2800      	cmp	r0, #0
 8005e62:	f43f ae69 	beq.w	8005b38 <_strtod_l+0x490>
 8005e66:	68c3      	ldr	r3, [r0, #12]
 8005e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60c3      	str	r3, [r0, #12]
 8005e6e:	4631      	mov	r1, r6
 8005e70:	f001 ff7e 	bl	8007d70 <__mcmp>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	da60      	bge.n	8005f3a <_strtod_l+0x892>
 8005e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e7a:	ea53 030a 	orrs.w	r3, r3, sl
 8005e7e:	f040 8082 	bne.w	8005f86 <_strtod_l+0x8de>
 8005e82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d17d      	bne.n	8005f86 <_strtod_l+0x8de>
 8005e8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e8e:	0d1b      	lsrs	r3, r3, #20
 8005e90:	051b      	lsls	r3, r3, #20
 8005e92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005e96:	d976      	bls.n	8005f86 <_strtod_l+0x8de>
 8005e98:	696b      	ldr	r3, [r5, #20]
 8005e9a:	b913      	cbnz	r3, 8005ea2 <_strtod_l+0x7fa>
 8005e9c:	692b      	ldr	r3, [r5, #16]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	dd71      	ble.n	8005f86 <_strtod_l+0x8de>
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f001 fef2 	bl	8007c90 <__lshift>
 8005eac:	4631      	mov	r1, r6
 8005eae:	4605      	mov	r5, r0
 8005eb0:	f001 ff5e 	bl	8007d70 <__mcmp>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	dd66      	ble.n	8005f86 <_strtod_l+0x8de>
 8005eb8:	9904      	ldr	r1, [sp, #16]
 8005eba:	4a53      	ldr	r2, [pc, #332]	; (8006008 <_strtod_l+0x960>)
 8005ebc:	465b      	mov	r3, fp
 8005ebe:	2900      	cmp	r1, #0
 8005ec0:	f000 8081 	beq.w	8005fc6 <_strtod_l+0x91e>
 8005ec4:	ea02 010b 	and.w	r1, r2, fp
 8005ec8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005ecc:	dc7b      	bgt.n	8005fc6 <_strtod_l+0x91e>
 8005ece:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005ed2:	f77f aea9 	ble.w	8005c28 <_strtod_l+0x580>
 8005ed6:	4b4d      	ldr	r3, [pc, #308]	; (800600c <_strtod_l+0x964>)
 8005ed8:	4650      	mov	r0, sl
 8005eda:	4659      	mov	r1, fp
 8005edc:	2200      	movs	r2, #0
 8005ede:	f7fa fb8b 	bl	80005f8 <__aeabi_dmul>
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4303      	orrs	r3, r0
 8005ee6:	bf08      	it	eq
 8005ee8:	2322      	moveq	r3, #34	; 0x22
 8005eea:	4682      	mov	sl, r0
 8005eec:	468b      	mov	fp, r1
 8005eee:	bf08      	it	eq
 8005ef0:	6023      	streq	r3, [r4, #0]
 8005ef2:	e62b      	b.n	8005b4c <_strtod_l+0x4a4>
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	ea03 0a0a 	and.w	sl, r3, sl
 8005f00:	e6e3      	b.n	8005cca <_strtod_l+0x622>
 8005f02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005f06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005f0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005f0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005f12:	fa01 f308 	lsl.w	r3, r1, r8
 8005f16:	9308      	str	r3, [sp, #32]
 8005f18:	910d      	str	r1, [sp, #52]	; 0x34
 8005f1a:	e746      	b.n	8005daa <_strtod_l+0x702>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9308      	str	r3, [sp, #32]
 8005f20:	2301      	movs	r3, #1
 8005f22:	930d      	str	r3, [sp, #52]	; 0x34
 8005f24:	e741      	b.n	8005daa <_strtod_l+0x702>
 8005f26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f28:	4642      	mov	r2, r8
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f001 feb0 	bl	8007c90 <__lshift>
 8005f30:	9018      	str	r0, [sp, #96]	; 0x60
 8005f32:	2800      	cmp	r0, #0
 8005f34:	f47f af6b 	bne.w	8005e0e <_strtod_l+0x766>
 8005f38:	e5fe      	b.n	8005b38 <_strtod_l+0x490>
 8005f3a:	465f      	mov	r7, fp
 8005f3c:	d16e      	bne.n	800601c <_strtod_l+0x974>
 8005f3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f44:	b342      	cbz	r2, 8005f98 <_strtod_l+0x8f0>
 8005f46:	4a32      	ldr	r2, [pc, #200]	; (8006010 <_strtod_l+0x968>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d128      	bne.n	8005f9e <_strtod_l+0x8f6>
 8005f4c:	9b04      	ldr	r3, [sp, #16]
 8005f4e:	4651      	mov	r1, sl
 8005f50:	b1eb      	cbz	r3, 8005f8e <_strtod_l+0x8e6>
 8005f52:	4b2d      	ldr	r3, [pc, #180]	; (8006008 <_strtod_l+0x960>)
 8005f54:	403b      	ands	r3, r7
 8005f56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5e:	d819      	bhi.n	8005f94 <_strtod_l+0x8ec>
 8005f60:	0d1b      	lsrs	r3, r3, #20
 8005f62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	4299      	cmp	r1, r3
 8005f6c:	d117      	bne.n	8005f9e <_strtod_l+0x8f6>
 8005f6e:	4b29      	ldr	r3, [pc, #164]	; (8006014 <_strtod_l+0x96c>)
 8005f70:	429f      	cmp	r7, r3
 8005f72:	d102      	bne.n	8005f7a <_strtod_l+0x8d2>
 8005f74:	3101      	adds	r1, #1
 8005f76:	f43f addf 	beq.w	8005b38 <_strtod_l+0x490>
 8005f7a:	4b23      	ldr	r3, [pc, #140]	; (8006008 <_strtod_l+0x960>)
 8005f7c:	403b      	ands	r3, r7
 8005f7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005f82:	f04f 0a00 	mov.w	sl, #0
 8005f86:	9b04      	ldr	r3, [sp, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1a4      	bne.n	8005ed6 <_strtod_l+0x82e>
 8005f8c:	e5de      	b.n	8005b4c <_strtod_l+0x4a4>
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f92:	e7ea      	b.n	8005f6a <_strtod_l+0x8c2>
 8005f94:	4613      	mov	r3, r2
 8005f96:	e7e8      	b.n	8005f6a <_strtod_l+0x8c2>
 8005f98:	ea53 030a 	orrs.w	r3, r3, sl
 8005f9c:	d08c      	beq.n	8005eb8 <_strtod_l+0x810>
 8005f9e:	9b08      	ldr	r3, [sp, #32]
 8005fa0:	b1db      	cbz	r3, 8005fda <_strtod_l+0x932>
 8005fa2:	423b      	tst	r3, r7
 8005fa4:	d0ef      	beq.n	8005f86 <_strtod_l+0x8de>
 8005fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa8:	9a04      	ldr	r2, [sp, #16]
 8005faa:	4650      	mov	r0, sl
 8005fac:	4659      	mov	r1, fp
 8005fae:	b1c3      	cbz	r3, 8005fe2 <_strtod_l+0x93a>
 8005fb0:	f7ff fb5e 	bl	8005670 <sulp>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	ec51 0b18 	vmov	r0, r1, d8
 8005fbc:	f7fa f966 	bl	800028c <__adddf3>
 8005fc0:	4682      	mov	sl, r0
 8005fc2:	468b      	mov	fp, r1
 8005fc4:	e7df      	b.n	8005f86 <_strtod_l+0x8de>
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005fcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005fd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005fd4:	f04f 3aff 	mov.w	sl, #4294967295
 8005fd8:	e7d5      	b.n	8005f86 <_strtod_l+0x8de>
 8005fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fdc:	ea13 0f0a 	tst.w	r3, sl
 8005fe0:	e7e0      	b.n	8005fa4 <_strtod_l+0x8fc>
 8005fe2:	f7ff fb45 	bl	8005670 <sulp>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	ec51 0b18 	vmov	r0, r1, d8
 8005fee:	f7fa f94b 	bl	8000288 <__aeabi_dsub>
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4682      	mov	sl, r0
 8005ff8:	468b      	mov	fp, r1
 8005ffa:	f7fa fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d0c1      	beq.n	8005f86 <_strtod_l+0x8de>
 8006002:	e611      	b.n	8005c28 <_strtod_l+0x580>
 8006004:	fffffc02 	.word	0xfffffc02
 8006008:	7ff00000 	.word	0x7ff00000
 800600c:	39500000 	.word	0x39500000
 8006010:	000fffff 	.word	0x000fffff
 8006014:	7fefffff 	.word	0x7fefffff
 8006018:	08009fd0 	.word	0x08009fd0
 800601c:	4631      	mov	r1, r6
 800601e:	4628      	mov	r0, r5
 8006020:	f002 f824 	bl	800806c <__ratio>
 8006024:	ec59 8b10 	vmov	r8, r9, d0
 8006028:	ee10 0a10 	vmov	r0, s0
 800602c:	2200      	movs	r2, #0
 800602e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006032:	4649      	mov	r1, r9
 8006034:	f7fa fd5c 	bl	8000af0 <__aeabi_dcmple>
 8006038:	2800      	cmp	r0, #0
 800603a:	d07a      	beq.n	8006132 <_strtod_l+0xa8a>
 800603c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d04a      	beq.n	80060d8 <_strtod_l+0xa30>
 8006042:	4b95      	ldr	r3, [pc, #596]	; (8006298 <_strtod_l+0xbf0>)
 8006044:	2200      	movs	r2, #0
 8006046:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800604a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006298 <_strtod_l+0xbf0>
 800604e:	f04f 0800 	mov.w	r8, #0
 8006052:	4b92      	ldr	r3, [pc, #584]	; (800629c <_strtod_l+0xbf4>)
 8006054:	403b      	ands	r3, r7
 8006056:	930d      	str	r3, [sp, #52]	; 0x34
 8006058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800605a:	4b91      	ldr	r3, [pc, #580]	; (80062a0 <_strtod_l+0xbf8>)
 800605c:	429a      	cmp	r2, r3
 800605e:	f040 80b0 	bne.w	80061c2 <_strtod_l+0xb1a>
 8006062:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006066:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800606a:	ec4b ab10 	vmov	d0, sl, fp
 800606e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006072:	f001 ff23 	bl	8007ebc <__ulp>
 8006076:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800607a:	ec53 2b10 	vmov	r2, r3, d0
 800607e:	f7fa fabb 	bl	80005f8 <__aeabi_dmul>
 8006082:	4652      	mov	r2, sl
 8006084:	465b      	mov	r3, fp
 8006086:	f7fa f901 	bl	800028c <__adddf3>
 800608a:	460b      	mov	r3, r1
 800608c:	4983      	ldr	r1, [pc, #524]	; (800629c <_strtod_l+0xbf4>)
 800608e:	4a85      	ldr	r2, [pc, #532]	; (80062a4 <_strtod_l+0xbfc>)
 8006090:	4019      	ands	r1, r3
 8006092:	4291      	cmp	r1, r2
 8006094:	4682      	mov	sl, r0
 8006096:	d960      	bls.n	800615a <_strtod_l+0xab2>
 8006098:	ee18 3a90 	vmov	r3, s17
 800609c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d104      	bne.n	80060ae <_strtod_l+0xa06>
 80060a4:	ee18 3a10 	vmov	r3, s16
 80060a8:	3301      	adds	r3, #1
 80060aa:	f43f ad45 	beq.w	8005b38 <_strtod_l+0x490>
 80060ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 80062b0 <_strtod_l+0xc08>
 80060b2:	f04f 3aff 	mov.w	sl, #4294967295
 80060b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80060b8:	4620      	mov	r0, r4
 80060ba:	f001 fbcd 	bl	8007858 <_Bfree>
 80060be:	9905      	ldr	r1, [sp, #20]
 80060c0:	4620      	mov	r0, r4
 80060c2:	f001 fbc9 	bl	8007858 <_Bfree>
 80060c6:	4631      	mov	r1, r6
 80060c8:	4620      	mov	r0, r4
 80060ca:	f001 fbc5 	bl	8007858 <_Bfree>
 80060ce:	4629      	mov	r1, r5
 80060d0:	4620      	mov	r0, r4
 80060d2:	f001 fbc1 	bl	8007858 <_Bfree>
 80060d6:	e61a      	b.n	8005d0e <_strtod_l+0x666>
 80060d8:	f1ba 0f00 	cmp.w	sl, #0
 80060dc:	d11b      	bne.n	8006116 <_strtod_l+0xa6e>
 80060de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060e2:	b9f3      	cbnz	r3, 8006122 <_strtod_l+0xa7a>
 80060e4:	4b6c      	ldr	r3, [pc, #432]	; (8006298 <_strtod_l+0xbf0>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	4640      	mov	r0, r8
 80060ea:	4649      	mov	r1, r9
 80060ec:	f7fa fcf6 	bl	8000adc <__aeabi_dcmplt>
 80060f0:	b9d0      	cbnz	r0, 8006128 <_strtod_l+0xa80>
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	4b6c      	ldr	r3, [pc, #432]	; (80062a8 <_strtod_l+0xc00>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	f7fa fa7d 	bl	80005f8 <__aeabi_dmul>
 80060fe:	4680      	mov	r8, r0
 8006100:	4689      	mov	r9, r1
 8006102:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006106:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800610a:	9315      	str	r3, [sp, #84]	; 0x54
 800610c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006110:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006114:	e79d      	b.n	8006052 <_strtod_l+0x9aa>
 8006116:	f1ba 0f01 	cmp.w	sl, #1
 800611a:	d102      	bne.n	8006122 <_strtod_l+0xa7a>
 800611c:	2f00      	cmp	r7, #0
 800611e:	f43f ad83 	beq.w	8005c28 <_strtod_l+0x580>
 8006122:	4b62      	ldr	r3, [pc, #392]	; (80062ac <_strtod_l+0xc04>)
 8006124:	2200      	movs	r2, #0
 8006126:	e78e      	b.n	8006046 <_strtod_l+0x99e>
 8006128:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80062a8 <_strtod_l+0xc00>
 800612c:	f04f 0800 	mov.w	r8, #0
 8006130:	e7e7      	b.n	8006102 <_strtod_l+0xa5a>
 8006132:	4b5d      	ldr	r3, [pc, #372]	; (80062a8 <_strtod_l+0xc00>)
 8006134:	4640      	mov	r0, r8
 8006136:	4649      	mov	r1, r9
 8006138:	2200      	movs	r2, #0
 800613a:	f7fa fa5d 	bl	80005f8 <__aeabi_dmul>
 800613e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006140:	4680      	mov	r8, r0
 8006142:	4689      	mov	r9, r1
 8006144:	b933      	cbnz	r3, 8006154 <_strtod_l+0xaac>
 8006146:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800614a:	900e      	str	r0, [sp, #56]	; 0x38
 800614c:	930f      	str	r3, [sp, #60]	; 0x3c
 800614e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006152:	e7dd      	b.n	8006110 <_strtod_l+0xa68>
 8006154:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006158:	e7f9      	b.n	800614e <_strtod_l+0xaa6>
 800615a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1a8      	bne.n	80060b6 <_strtod_l+0xa0e>
 8006164:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800616a:	0d1b      	lsrs	r3, r3, #20
 800616c:	051b      	lsls	r3, r3, #20
 800616e:	429a      	cmp	r2, r3
 8006170:	d1a1      	bne.n	80060b6 <_strtod_l+0xa0e>
 8006172:	4640      	mov	r0, r8
 8006174:	4649      	mov	r1, r9
 8006176:	f7fa fd9f 	bl	8000cb8 <__aeabi_d2lz>
 800617a:	f7fa fa0f 	bl	800059c <__aeabi_l2d>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4640      	mov	r0, r8
 8006184:	4649      	mov	r1, r9
 8006186:	f7fa f87f 	bl	8000288 <__aeabi_dsub>
 800618a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800618c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006190:	ea43 030a 	orr.w	r3, r3, sl
 8006194:	4313      	orrs	r3, r2
 8006196:	4680      	mov	r8, r0
 8006198:	4689      	mov	r9, r1
 800619a:	d055      	beq.n	8006248 <_strtod_l+0xba0>
 800619c:	a336      	add	r3, pc, #216	; (adr r3, 8006278 <_strtod_l+0xbd0>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f7fa fc9b 	bl	8000adc <__aeabi_dcmplt>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f47f acd0 	bne.w	8005b4c <_strtod_l+0x4a4>
 80061ac:	a334      	add	r3, pc, #208	; (adr r3, 8006280 <_strtod_l+0xbd8>)
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	4640      	mov	r0, r8
 80061b4:	4649      	mov	r1, r9
 80061b6:	f7fa fcaf 	bl	8000b18 <__aeabi_dcmpgt>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f43f af7b 	beq.w	80060b6 <_strtod_l+0xa0e>
 80061c0:	e4c4      	b.n	8005b4c <_strtod_l+0x4a4>
 80061c2:	9b04      	ldr	r3, [sp, #16]
 80061c4:	b333      	cbz	r3, 8006214 <_strtod_l+0xb6c>
 80061c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80061cc:	d822      	bhi.n	8006214 <_strtod_l+0xb6c>
 80061ce:	a32e      	add	r3, pc, #184	; (adr r3, 8006288 <_strtod_l+0xbe0>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	4640      	mov	r0, r8
 80061d6:	4649      	mov	r1, r9
 80061d8:	f7fa fc8a 	bl	8000af0 <__aeabi_dcmple>
 80061dc:	b1a0      	cbz	r0, 8006208 <_strtod_l+0xb60>
 80061de:	4649      	mov	r1, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	f7fa fce1 	bl	8000ba8 <__aeabi_d2uiz>
 80061e6:	2801      	cmp	r0, #1
 80061e8:	bf38      	it	cc
 80061ea:	2001      	movcc	r0, #1
 80061ec:	f7fa f98a 	bl	8000504 <__aeabi_ui2d>
 80061f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061f2:	4680      	mov	r8, r0
 80061f4:	4689      	mov	r9, r1
 80061f6:	bb23      	cbnz	r3, 8006242 <_strtod_l+0xb9a>
 80061f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061fc:	9010      	str	r0, [sp, #64]	; 0x40
 80061fe:	9311      	str	r3, [sp, #68]	; 0x44
 8006200:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006204:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800620c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	9309      	str	r3, [sp, #36]	; 0x24
 8006214:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006218:	eeb0 0a48 	vmov.f32	s0, s16
 800621c:	eef0 0a68 	vmov.f32	s1, s17
 8006220:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006224:	f001 fe4a 	bl	8007ebc <__ulp>
 8006228:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800622c:	ec53 2b10 	vmov	r2, r3, d0
 8006230:	f7fa f9e2 	bl	80005f8 <__aeabi_dmul>
 8006234:	ec53 2b18 	vmov	r2, r3, d8
 8006238:	f7fa f828 	bl	800028c <__adddf3>
 800623c:	4682      	mov	sl, r0
 800623e:	468b      	mov	fp, r1
 8006240:	e78d      	b.n	800615e <_strtod_l+0xab6>
 8006242:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006246:	e7db      	b.n	8006200 <_strtod_l+0xb58>
 8006248:	a311      	add	r3, pc, #68	; (adr r3, 8006290 <_strtod_l+0xbe8>)
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f7fa fc45 	bl	8000adc <__aeabi_dcmplt>
 8006252:	e7b2      	b.n	80061ba <_strtod_l+0xb12>
 8006254:	2300      	movs	r3, #0
 8006256:	930a      	str	r3, [sp, #40]	; 0x28
 8006258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800625a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	f7ff ba6b 	b.w	8005738 <_strtod_l+0x90>
 8006262:	2a65      	cmp	r2, #101	; 0x65
 8006264:	f43f ab5f 	beq.w	8005926 <_strtod_l+0x27e>
 8006268:	2a45      	cmp	r2, #69	; 0x45
 800626a:	f43f ab5c 	beq.w	8005926 <_strtod_l+0x27e>
 800626e:	2301      	movs	r3, #1
 8006270:	f7ff bb94 	b.w	800599c <_strtod_l+0x2f4>
 8006274:	f3af 8000 	nop.w
 8006278:	94a03595 	.word	0x94a03595
 800627c:	3fdfffff 	.word	0x3fdfffff
 8006280:	35afe535 	.word	0x35afe535
 8006284:	3fe00000 	.word	0x3fe00000
 8006288:	ffc00000 	.word	0xffc00000
 800628c:	41dfffff 	.word	0x41dfffff
 8006290:	94a03595 	.word	0x94a03595
 8006294:	3fcfffff 	.word	0x3fcfffff
 8006298:	3ff00000 	.word	0x3ff00000
 800629c:	7ff00000 	.word	0x7ff00000
 80062a0:	7fe00000 	.word	0x7fe00000
 80062a4:	7c9fffff 	.word	0x7c9fffff
 80062a8:	3fe00000 	.word	0x3fe00000
 80062ac:	bff00000 	.word	0xbff00000
 80062b0:	7fefffff 	.word	0x7fefffff

080062b4 <_strtod_r>:
 80062b4:	4b01      	ldr	r3, [pc, #4]	; (80062bc <_strtod_r+0x8>)
 80062b6:	f7ff b9f7 	b.w	80056a8 <_strtod_l>
 80062ba:	bf00      	nop
 80062bc:	20000078 	.word	0x20000078

080062c0 <_strtol_l.constprop.0>:
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c6:	d001      	beq.n	80062cc <_strtol_l.constprop.0+0xc>
 80062c8:	2b24      	cmp	r3, #36	; 0x24
 80062ca:	d906      	bls.n	80062da <_strtol_l.constprop.0+0x1a>
 80062cc:	f7fe fabc 	bl	8004848 <__errno>
 80062d0:	2316      	movs	r3, #22
 80062d2:	6003      	str	r3, [r0, #0]
 80062d4:	2000      	movs	r0, #0
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80063c0 <_strtol_l.constprop.0+0x100>
 80062de:	460d      	mov	r5, r1
 80062e0:	462e      	mov	r6, r5
 80062e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80062ea:	f017 0708 	ands.w	r7, r7, #8
 80062ee:	d1f7      	bne.n	80062e0 <_strtol_l.constprop.0+0x20>
 80062f0:	2c2d      	cmp	r4, #45	; 0x2d
 80062f2:	d132      	bne.n	800635a <_strtol_l.constprop.0+0x9a>
 80062f4:	782c      	ldrb	r4, [r5, #0]
 80062f6:	2701      	movs	r7, #1
 80062f8:	1cb5      	adds	r5, r6, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d05b      	beq.n	80063b6 <_strtol_l.constprop.0+0xf6>
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d109      	bne.n	8006316 <_strtol_l.constprop.0+0x56>
 8006302:	2c30      	cmp	r4, #48	; 0x30
 8006304:	d107      	bne.n	8006316 <_strtol_l.constprop.0+0x56>
 8006306:	782c      	ldrb	r4, [r5, #0]
 8006308:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800630c:	2c58      	cmp	r4, #88	; 0x58
 800630e:	d14d      	bne.n	80063ac <_strtol_l.constprop.0+0xec>
 8006310:	786c      	ldrb	r4, [r5, #1]
 8006312:	2310      	movs	r3, #16
 8006314:	3502      	adds	r5, #2
 8006316:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800631a:	f108 38ff 	add.w	r8, r8, #4294967295
 800631e:	f04f 0c00 	mov.w	ip, #0
 8006322:	fbb8 f9f3 	udiv	r9, r8, r3
 8006326:	4666      	mov	r6, ip
 8006328:	fb03 8a19 	mls	sl, r3, r9, r8
 800632c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006330:	f1be 0f09 	cmp.w	lr, #9
 8006334:	d816      	bhi.n	8006364 <_strtol_l.constprop.0+0xa4>
 8006336:	4674      	mov	r4, lr
 8006338:	42a3      	cmp	r3, r4
 800633a:	dd24      	ble.n	8006386 <_strtol_l.constprop.0+0xc6>
 800633c:	f1bc 0f00 	cmp.w	ip, #0
 8006340:	db1e      	blt.n	8006380 <_strtol_l.constprop.0+0xc0>
 8006342:	45b1      	cmp	r9, r6
 8006344:	d31c      	bcc.n	8006380 <_strtol_l.constprop.0+0xc0>
 8006346:	d101      	bne.n	800634c <_strtol_l.constprop.0+0x8c>
 8006348:	45a2      	cmp	sl, r4
 800634a:	db19      	blt.n	8006380 <_strtol_l.constprop.0+0xc0>
 800634c:	fb06 4603 	mla	r6, r6, r3, r4
 8006350:	f04f 0c01 	mov.w	ip, #1
 8006354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006358:	e7e8      	b.n	800632c <_strtol_l.constprop.0+0x6c>
 800635a:	2c2b      	cmp	r4, #43	; 0x2b
 800635c:	bf04      	itt	eq
 800635e:	782c      	ldrbeq	r4, [r5, #0]
 8006360:	1cb5      	addeq	r5, r6, #2
 8006362:	e7ca      	b.n	80062fa <_strtol_l.constprop.0+0x3a>
 8006364:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006368:	f1be 0f19 	cmp.w	lr, #25
 800636c:	d801      	bhi.n	8006372 <_strtol_l.constprop.0+0xb2>
 800636e:	3c37      	subs	r4, #55	; 0x37
 8006370:	e7e2      	b.n	8006338 <_strtol_l.constprop.0+0x78>
 8006372:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006376:	f1be 0f19 	cmp.w	lr, #25
 800637a:	d804      	bhi.n	8006386 <_strtol_l.constprop.0+0xc6>
 800637c:	3c57      	subs	r4, #87	; 0x57
 800637e:	e7db      	b.n	8006338 <_strtol_l.constprop.0+0x78>
 8006380:	f04f 3cff 	mov.w	ip, #4294967295
 8006384:	e7e6      	b.n	8006354 <_strtol_l.constprop.0+0x94>
 8006386:	f1bc 0f00 	cmp.w	ip, #0
 800638a:	da05      	bge.n	8006398 <_strtol_l.constprop.0+0xd8>
 800638c:	2322      	movs	r3, #34	; 0x22
 800638e:	6003      	str	r3, [r0, #0]
 8006390:	4646      	mov	r6, r8
 8006392:	b942      	cbnz	r2, 80063a6 <_strtol_l.constprop.0+0xe6>
 8006394:	4630      	mov	r0, r6
 8006396:	e79e      	b.n	80062d6 <_strtol_l.constprop.0+0x16>
 8006398:	b107      	cbz	r7, 800639c <_strtol_l.constprop.0+0xdc>
 800639a:	4276      	negs	r6, r6
 800639c:	2a00      	cmp	r2, #0
 800639e:	d0f9      	beq.n	8006394 <_strtol_l.constprop.0+0xd4>
 80063a0:	f1bc 0f00 	cmp.w	ip, #0
 80063a4:	d000      	beq.n	80063a8 <_strtol_l.constprop.0+0xe8>
 80063a6:	1e69      	subs	r1, r5, #1
 80063a8:	6011      	str	r1, [r2, #0]
 80063aa:	e7f3      	b.n	8006394 <_strtol_l.constprop.0+0xd4>
 80063ac:	2430      	movs	r4, #48	; 0x30
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1b1      	bne.n	8006316 <_strtol_l.constprop.0+0x56>
 80063b2:	2308      	movs	r3, #8
 80063b4:	e7af      	b.n	8006316 <_strtol_l.constprop.0+0x56>
 80063b6:	2c30      	cmp	r4, #48	; 0x30
 80063b8:	d0a5      	beq.n	8006306 <_strtol_l.constprop.0+0x46>
 80063ba:	230a      	movs	r3, #10
 80063bc:	e7ab      	b.n	8006316 <_strtol_l.constprop.0+0x56>
 80063be:	bf00      	nop
 80063c0:	08009ff9 	.word	0x08009ff9

080063c4 <_strtol_r>:
 80063c4:	f7ff bf7c 	b.w	80062c0 <_strtol_l.constprop.0>

080063c8 <quorem>:
 80063c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	6903      	ldr	r3, [r0, #16]
 80063ce:	690c      	ldr	r4, [r1, #16]
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	4607      	mov	r7, r0
 80063d4:	f2c0 8081 	blt.w	80064da <quorem+0x112>
 80063d8:	3c01      	subs	r4, #1
 80063da:	f101 0814 	add.w	r8, r1, #20
 80063de:	f100 0514 	add.w	r5, r0, #20
 80063e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063e6:	9301      	str	r3, [sp, #4]
 80063e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063f0:	3301      	adds	r3, #1
 80063f2:	429a      	cmp	r2, r3
 80063f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006400:	d331      	bcc.n	8006466 <quorem+0x9e>
 8006402:	f04f 0e00 	mov.w	lr, #0
 8006406:	4640      	mov	r0, r8
 8006408:	46ac      	mov	ip, r5
 800640a:	46f2      	mov	sl, lr
 800640c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006410:	b293      	uxth	r3, r2
 8006412:	fb06 e303 	mla	r3, r6, r3, lr
 8006416:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800641a:	b29b      	uxth	r3, r3
 800641c:	ebaa 0303 	sub.w	r3, sl, r3
 8006420:	f8dc a000 	ldr.w	sl, [ip]
 8006424:	0c12      	lsrs	r2, r2, #16
 8006426:	fa13 f38a 	uxtah	r3, r3, sl
 800642a:	fb06 e202 	mla	r2, r6, r2, lr
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	9b00      	ldr	r3, [sp, #0]
 8006432:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006436:	b292      	uxth	r2, r2
 8006438:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800643c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006440:	f8bd 3000 	ldrh.w	r3, [sp]
 8006444:	4581      	cmp	r9, r0
 8006446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800644a:	f84c 3b04 	str.w	r3, [ip], #4
 800644e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006452:	d2db      	bcs.n	800640c <quorem+0x44>
 8006454:	f855 300b 	ldr.w	r3, [r5, fp]
 8006458:	b92b      	cbnz	r3, 8006466 <quorem+0x9e>
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	3b04      	subs	r3, #4
 800645e:	429d      	cmp	r5, r3
 8006460:	461a      	mov	r2, r3
 8006462:	d32e      	bcc.n	80064c2 <quorem+0xfa>
 8006464:	613c      	str	r4, [r7, #16]
 8006466:	4638      	mov	r0, r7
 8006468:	f001 fc82 	bl	8007d70 <__mcmp>
 800646c:	2800      	cmp	r0, #0
 800646e:	db24      	blt.n	80064ba <quorem+0xf2>
 8006470:	3601      	adds	r6, #1
 8006472:	4628      	mov	r0, r5
 8006474:	f04f 0c00 	mov.w	ip, #0
 8006478:	f858 2b04 	ldr.w	r2, [r8], #4
 800647c:	f8d0 e000 	ldr.w	lr, [r0]
 8006480:	b293      	uxth	r3, r2
 8006482:	ebac 0303 	sub.w	r3, ip, r3
 8006486:	0c12      	lsrs	r2, r2, #16
 8006488:	fa13 f38e 	uxtah	r3, r3, lr
 800648c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006494:	b29b      	uxth	r3, r3
 8006496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800649a:	45c1      	cmp	r9, r8
 800649c:	f840 3b04 	str.w	r3, [r0], #4
 80064a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80064a4:	d2e8      	bcs.n	8006478 <quorem+0xb0>
 80064a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064ae:	b922      	cbnz	r2, 80064ba <quorem+0xf2>
 80064b0:	3b04      	subs	r3, #4
 80064b2:	429d      	cmp	r5, r3
 80064b4:	461a      	mov	r2, r3
 80064b6:	d30a      	bcc.n	80064ce <quorem+0x106>
 80064b8:	613c      	str	r4, [r7, #16]
 80064ba:	4630      	mov	r0, r6
 80064bc:	b003      	add	sp, #12
 80064be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	3b04      	subs	r3, #4
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	d1cc      	bne.n	8006464 <quorem+0x9c>
 80064ca:	3c01      	subs	r4, #1
 80064cc:	e7c7      	b.n	800645e <quorem+0x96>
 80064ce:	6812      	ldr	r2, [r2, #0]
 80064d0:	3b04      	subs	r3, #4
 80064d2:	2a00      	cmp	r2, #0
 80064d4:	d1f0      	bne.n	80064b8 <quorem+0xf0>
 80064d6:	3c01      	subs	r4, #1
 80064d8:	e7eb      	b.n	80064b2 <quorem+0xea>
 80064da:	2000      	movs	r0, #0
 80064dc:	e7ee      	b.n	80064bc <quorem+0xf4>
	...

080064e0 <_dtoa_r>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	ed2d 8b04 	vpush	{d8-d9}
 80064e8:	ec57 6b10 	vmov	r6, r7, d0
 80064ec:	b093      	sub	sp, #76	; 0x4c
 80064ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064f4:	9106      	str	r1, [sp, #24]
 80064f6:	ee10 aa10 	vmov	sl, s0
 80064fa:	4604      	mov	r4, r0
 80064fc:	9209      	str	r2, [sp, #36]	; 0x24
 80064fe:	930c      	str	r3, [sp, #48]	; 0x30
 8006500:	46bb      	mov	fp, r7
 8006502:	b975      	cbnz	r5, 8006522 <_dtoa_r+0x42>
 8006504:	2010      	movs	r0, #16
 8006506:	f001 f94d 	bl	80077a4 <malloc>
 800650a:	4602      	mov	r2, r0
 800650c:	6260      	str	r0, [r4, #36]	; 0x24
 800650e:	b920      	cbnz	r0, 800651a <_dtoa_r+0x3a>
 8006510:	4ba7      	ldr	r3, [pc, #668]	; (80067b0 <_dtoa_r+0x2d0>)
 8006512:	21ea      	movs	r1, #234	; 0xea
 8006514:	48a7      	ldr	r0, [pc, #668]	; (80067b4 <_dtoa_r+0x2d4>)
 8006516:	f002 f8ad 	bl	8008674 <__assert_func>
 800651a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800651e:	6005      	str	r5, [r0, #0]
 8006520:	60c5      	str	r5, [r0, #12]
 8006522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006524:	6819      	ldr	r1, [r3, #0]
 8006526:	b151      	cbz	r1, 800653e <_dtoa_r+0x5e>
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	604a      	str	r2, [r1, #4]
 800652c:	2301      	movs	r3, #1
 800652e:	4093      	lsls	r3, r2
 8006530:	608b      	str	r3, [r1, #8]
 8006532:	4620      	mov	r0, r4
 8006534:	f001 f990 	bl	8007858 <_Bfree>
 8006538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	1e3b      	subs	r3, r7, #0
 8006540:	bfaa      	itet	ge
 8006542:	2300      	movge	r3, #0
 8006544:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006548:	f8c8 3000 	strge.w	r3, [r8]
 800654c:	4b9a      	ldr	r3, [pc, #616]	; (80067b8 <_dtoa_r+0x2d8>)
 800654e:	bfbc      	itt	lt
 8006550:	2201      	movlt	r2, #1
 8006552:	f8c8 2000 	strlt.w	r2, [r8]
 8006556:	ea33 030b 	bics.w	r3, r3, fp
 800655a:	d11b      	bne.n	8006594 <_dtoa_r+0xb4>
 800655c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800655e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006568:	4333      	orrs	r3, r6
 800656a:	f000 8592 	beq.w	8007092 <_dtoa_r+0xbb2>
 800656e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006570:	b963      	cbnz	r3, 800658c <_dtoa_r+0xac>
 8006572:	4b92      	ldr	r3, [pc, #584]	; (80067bc <_dtoa_r+0x2dc>)
 8006574:	e022      	b.n	80065bc <_dtoa_r+0xdc>
 8006576:	4b92      	ldr	r3, [pc, #584]	; (80067c0 <_dtoa_r+0x2e0>)
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	3308      	adds	r3, #8
 800657c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	9801      	ldr	r0, [sp, #4]
 8006582:	b013      	add	sp, #76	; 0x4c
 8006584:	ecbd 8b04 	vpop	{d8-d9}
 8006588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658c:	4b8b      	ldr	r3, [pc, #556]	; (80067bc <_dtoa_r+0x2dc>)
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	3303      	adds	r3, #3
 8006592:	e7f3      	b.n	800657c <_dtoa_r+0x9c>
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	4650      	mov	r0, sl
 800659a:	4659      	mov	r1, fp
 800659c:	f7fa fa94 	bl	8000ac8 <__aeabi_dcmpeq>
 80065a0:	ec4b ab19 	vmov	d9, sl, fp
 80065a4:	4680      	mov	r8, r0
 80065a6:	b158      	cbz	r0, 80065c0 <_dtoa_r+0xe0>
 80065a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065aa:	2301      	movs	r3, #1
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 856b 	beq.w	800708c <_dtoa_r+0xbac>
 80065b6:	4883      	ldr	r0, [pc, #524]	; (80067c4 <_dtoa_r+0x2e4>)
 80065b8:	6018      	str	r0, [r3, #0]
 80065ba:	1e43      	subs	r3, r0, #1
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	e7df      	b.n	8006580 <_dtoa_r+0xa0>
 80065c0:	ec4b ab10 	vmov	d0, sl, fp
 80065c4:	aa10      	add	r2, sp, #64	; 0x40
 80065c6:	a911      	add	r1, sp, #68	; 0x44
 80065c8:	4620      	mov	r0, r4
 80065ca:	f001 fcf3 	bl	8007fb4 <__d2b>
 80065ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80065d2:	ee08 0a10 	vmov	s16, r0
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	f000 8084 	beq.w	80066e4 <_dtoa_r+0x204>
 80065dc:	ee19 3a90 	vmov	r3, s19
 80065e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065e8:	4656      	mov	r6, sl
 80065ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065f6:	4b74      	ldr	r3, [pc, #464]	; (80067c8 <_dtoa_r+0x2e8>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	4630      	mov	r0, r6
 80065fc:	4639      	mov	r1, r7
 80065fe:	f7f9 fe43 	bl	8000288 <__aeabi_dsub>
 8006602:	a365      	add	r3, pc, #404	; (adr r3, 8006798 <_dtoa_r+0x2b8>)
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f7f9 fff6 	bl	80005f8 <__aeabi_dmul>
 800660c:	a364      	add	r3, pc, #400	; (adr r3, 80067a0 <_dtoa_r+0x2c0>)
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7f9 fe3b 	bl	800028c <__adddf3>
 8006616:	4606      	mov	r6, r0
 8006618:	4628      	mov	r0, r5
 800661a:	460f      	mov	r7, r1
 800661c:	f7f9 ff82 	bl	8000524 <__aeabi_i2d>
 8006620:	a361      	add	r3, pc, #388	; (adr r3, 80067a8 <_dtoa_r+0x2c8>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 ffe7 	bl	80005f8 <__aeabi_dmul>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4630      	mov	r0, r6
 8006630:	4639      	mov	r1, r7
 8006632:	f7f9 fe2b 	bl	800028c <__adddf3>
 8006636:	4606      	mov	r6, r0
 8006638:	460f      	mov	r7, r1
 800663a:	f7fa fa8d 	bl	8000b58 <__aeabi_d2iz>
 800663e:	2200      	movs	r2, #0
 8006640:	9000      	str	r0, [sp, #0]
 8006642:	2300      	movs	r3, #0
 8006644:	4630      	mov	r0, r6
 8006646:	4639      	mov	r1, r7
 8006648:	f7fa fa48 	bl	8000adc <__aeabi_dcmplt>
 800664c:	b150      	cbz	r0, 8006664 <_dtoa_r+0x184>
 800664e:	9800      	ldr	r0, [sp, #0]
 8006650:	f7f9 ff68 	bl	8000524 <__aeabi_i2d>
 8006654:	4632      	mov	r2, r6
 8006656:	463b      	mov	r3, r7
 8006658:	f7fa fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 800665c:	b910      	cbnz	r0, 8006664 <_dtoa_r+0x184>
 800665e:	9b00      	ldr	r3, [sp, #0]
 8006660:	3b01      	subs	r3, #1
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	9b00      	ldr	r3, [sp, #0]
 8006666:	2b16      	cmp	r3, #22
 8006668:	d85a      	bhi.n	8006720 <_dtoa_r+0x240>
 800666a:	9a00      	ldr	r2, [sp, #0]
 800666c:	4b57      	ldr	r3, [pc, #348]	; (80067cc <_dtoa_r+0x2ec>)
 800666e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	ec51 0b19 	vmov	r0, r1, d9
 800667a:	f7fa fa2f 	bl	8000adc <__aeabi_dcmplt>
 800667e:	2800      	cmp	r0, #0
 8006680:	d050      	beq.n	8006724 <_dtoa_r+0x244>
 8006682:	9b00      	ldr	r3, [sp, #0]
 8006684:	3b01      	subs	r3, #1
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	2300      	movs	r3, #0
 800668a:	930b      	str	r3, [sp, #44]	; 0x2c
 800668c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800668e:	1b5d      	subs	r5, r3, r5
 8006690:	1e6b      	subs	r3, r5, #1
 8006692:	9305      	str	r3, [sp, #20]
 8006694:	bf45      	ittet	mi
 8006696:	f1c5 0301 	rsbmi	r3, r5, #1
 800669a:	9304      	strmi	r3, [sp, #16]
 800669c:	2300      	movpl	r3, #0
 800669e:	2300      	movmi	r3, #0
 80066a0:	bf4c      	ite	mi
 80066a2:	9305      	strmi	r3, [sp, #20]
 80066a4:	9304      	strpl	r3, [sp, #16]
 80066a6:	9b00      	ldr	r3, [sp, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	db3d      	blt.n	8006728 <_dtoa_r+0x248>
 80066ac:	9b05      	ldr	r3, [sp, #20]
 80066ae:	9a00      	ldr	r2, [sp, #0]
 80066b0:	920a      	str	r2, [sp, #40]	; 0x28
 80066b2:	4413      	add	r3, r2
 80066b4:	9305      	str	r3, [sp, #20]
 80066b6:	2300      	movs	r3, #0
 80066b8:	9307      	str	r3, [sp, #28]
 80066ba:	9b06      	ldr	r3, [sp, #24]
 80066bc:	2b09      	cmp	r3, #9
 80066be:	f200 8089 	bhi.w	80067d4 <_dtoa_r+0x2f4>
 80066c2:	2b05      	cmp	r3, #5
 80066c4:	bfc4      	itt	gt
 80066c6:	3b04      	subgt	r3, #4
 80066c8:	9306      	strgt	r3, [sp, #24]
 80066ca:	9b06      	ldr	r3, [sp, #24]
 80066cc:	f1a3 0302 	sub.w	r3, r3, #2
 80066d0:	bfcc      	ite	gt
 80066d2:	2500      	movgt	r5, #0
 80066d4:	2501      	movle	r5, #1
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	f200 8087 	bhi.w	80067ea <_dtoa_r+0x30a>
 80066dc:	e8df f003 	tbb	[pc, r3]
 80066e0:	59383a2d 	.word	0x59383a2d
 80066e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066e8:	441d      	add	r5, r3
 80066ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	bfc1      	itttt	gt
 80066f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80066fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006702:	bfda      	itte	le
 8006704:	f1c3 0320 	rsble	r3, r3, #32
 8006708:	fa06 f003 	lslle.w	r0, r6, r3
 800670c:	4318      	orrgt	r0, r3
 800670e:	f7f9 fef9 	bl	8000504 <__aeabi_ui2d>
 8006712:	2301      	movs	r3, #1
 8006714:	4606      	mov	r6, r0
 8006716:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800671a:	3d01      	subs	r5, #1
 800671c:	930e      	str	r3, [sp, #56]	; 0x38
 800671e:	e76a      	b.n	80065f6 <_dtoa_r+0x116>
 8006720:	2301      	movs	r3, #1
 8006722:	e7b2      	b.n	800668a <_dtoa_r+0x1aa>
 8006724:	900b      	str	r0, [sp, #44]	; 0x2c
 8006726:	e7b1      	b.n	800668c <_dtoa_r+0x1ac>
 8006728:	9b04      	ldr	r3, [sp, #16]
 800672a:	9a00      	ldr	r2, [sp, #0]
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	9304      	str	r3, [sp, #16]
 8006730:	4253      	negs	r3, r2
 8006732:	9307      	str	r3, [sp, #28]
 8006734:	2300      	movs	r3, #0
 8006736:	930a      	str	r3, [sp, #40]	; 0x28
 8006738:	e7bf      	b.n	80066ba <_dtoa_r+0x1da>
 800673a:	2300      	movs	r3, #0
 800673c:	9308      	str	r3, [sp, #32]
 800673e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	dc55      	bgt.n	80067f0 <_dtoa_r+0x310>
 8006744:	2301      	movs	r3, #1
 8006746:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800674a:	461a      	mov	r2, r3
 800674c:	9209      	str	r2, [sp, #36]	; 0x24
 800674e:	e00c      	b.n	800676a <_dtoa_r+0x28a>
 8006750:	2301      	movs	r3, #1
 8006752:	e7f3      	b.n	800673c <_dtoa_r+0x25c>
 8006754:	2300      	movs	r3, #0
 8006756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006758:	9308      	str	r3, [sp, #32]
 800675a:	9b00      	ldr	r3, [sp, #0]
 800675c:	4413      	add	r3, r2
 800675e:	9302      	str	r3, [sp, #8]
 8006760:	3301      	adds	r3, #1
 8006762:	2b01      	cmp	r3, #1
 8006764:	9303      	str	r3, [sp, #12]
 8006766:	bfb8      	it	lt
 8006768:	2301      	movlt	r3, #1
 800676a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800676c:	2200      	movs	r2, #0
 800676e:	6042      	str	r2, [r0, #4]
 8006770:	2204      	movs	r2, #4
 8006772:	f102 0614 	add.w	r6, r2, #20
 8006776:	429e      	cmp	r6, r3
 8006778:	6841      	ldr	r1, [r0, #4]
 800677a:	d93d      	bls.n	80067f8 <_dtoa_r+0x318>
 800677c:	4620      	mov	r0, r4
 800677e:	f001 f82b 	bl	80077d8 <_Balloc>
 8006782:	9001      	str	r0, [sp, #4]
 8006784:	2800      	cmp	r0, #0
 8006786:	d13b      	bne.n	8006800 <_dtoa_r+0x320>
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <_dtoa_r+0x2f0>)
 800678a:	4602      	mov	r2, r0
 800678c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006790:	e6c0      	b.n	8006514 <_dtoa_r+0x34>
 8006792:	2301      	movs	r3, #1
 8006794:	e7df      	b.n	8006756 <_dtoa_r+0x276>
 8006796:	bf00      	nop
 8006798:	636f4361 	.word	0x636f4361
 800679c:	3fd287a7 	.word	0x3fd287a7
 80067a0:	8b60c8b3 	.word	0x8b60c8b3
 80067a4:	3fc68a28 	.word	0x3fc68a28
 80067a8:	509f79fb 	.word	0x509f79fb
 80067ac:	3fd34413 	.word	0x3fd34413
 80067b0:	0800a106 	.word	0x0800a106
 80067b4:	0800a11d 	.word	0x0800a11d
 80067b8:	7ff00000 	.word	0x7ff00000
 80067bc:	0800a102 	.word	0x0800a102
 80067c0:	0800a0f9 	.word	0x0800a0f9
 80067c4:	08009f7d 	.word	0x08009f7d
 80067c8:	3ff80000 	.word	0x3ff80000
 80067cc:	0800a288 	.word	0x0800a288
 80067d0:	0800a178 	.word	0x0800a178
 80067d4:	2501      	movs	r5, #1
 80067d6:	2300      	movs	r3, #0
 80067d8:	9306      	str	r3, [sp, #24]
 80067da:	9508      	str	r5, [sp, #32]
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	2312      	movs	r3, #18
 80067e8:	e7b0      	b.n	800674c <_dtoa_r+0x26c>
 80067ea:	2301      	movs	r3, #1
 80067ec:	9308      	str	r3, [sp, #32]
 80067ee:	e7f5      	b.n	80067dc <_dtoa_r+0x2fc>
 80067f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067f6:	e7b8      	b.n	800676a <_dtoa_r+0x28a>
 80067f8:	3101      	adds	r1, #1
 80067fa:	6041      	str	r1, [r0, #4]
 80067fc:	0052      	lsls	r2, r2, #1
 80067fe:	e7b8      	b.n	8006772 <_dtoa_r+0x292>
 8006800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006802:	9a01      	ldr	r2, [sp, #4]
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	9b03      	ldr	r3, [sp, #12]
 8006808:	2b0e      	cmp	r3, #14
 800680a:	f200 809d 	bhi.w	8006948 <_dtoa_r+0x468>
 800680e:	2d00      	cmp	r5, #0
 8006810:	f000 809a 	beq.w	8006948 <_dtoa_r+0x468>
 8006814:	9b00      	ldr	r3, [sp, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	dd32      	ble.n	8006880 <_dtoa_r+0x3a0>
 800681a:	4ab7      	ldr	r2, [pc, #732]	; (8006af8 <_dtoa_r+0x618>)
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006824:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006828:	9b00      	ldr	r3, [sp, #0]
 800682a:	05d8      	lsls	r0, r3, #23
 800682c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006830:	d516      	bpl.n	8006860 <_dtoa_r+0x380>
 8006832:	4bb2      	ldr	r3, [pc, #712]	; (8006afc <_dtoa_r+0x61c>)
 8006834:	ec51 0b19 	vmov	r0, r1, d9
 8006838:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800683c:	f7fa f806 	bl	800084c <__aeabi_ddiv>
 8006840:	f007 070f 	and.w	r7, r7, #15
 8006844:	4682      	mov	sl, r0
 8006846:	468b      	mov	fp, r1
 8006848:	2503      	movs	r5, #3
 800684a:	4eac      	ldr	r6, [pc, #688]	; (8006afc <_dtoa_r+0x61c>)
 800684c:	b957      	cbnz	r7, 8006864 <_dtoa_r+0x384>
 800684e:	4642      	mov	r2, r8
 8006850:	464b      	mov	r3, r9
 8006852:	4650      	mov	r0, sl
 8006854:	4659      	mov	r1, fp
 8006856:	f7f9 fff9 	bl	800084c <__aeabi_ddiv>
 800685a:	4682      	mov	sl, r0
 800685c:	468b      	mov	fp, r1
 800685e:	e028      	b.n	80068b2 <_dtoa_r+0x3d2>
 8006860:	2502      	movs	r5, #2
 8006862:	e7f2      	b.n	800684a <_dtoa_r+0x36a>
 8006864:	07f9      	lsls	r1, r7, #31
 8006866:	d508      	bpl.n	800687a <_dtoa_r+0x39a>
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006870:	f7f9 fec2 	bl	80005f8 <__aeabi_dmul>
 8006874:	3501      	adds	r5, #1
 8006876:	4680      	mov	r8, r0
 8006878:	4689      	mov	r9, r1
 800687a:	107f      	asrs	r7, r7, #1
 800687c:	3608      	adds	r6, #8
 800687e:	e7e5      	b.n	800684c <_dtoa_r+0x36c>
 8006880:	f000 809b 	beq.w	80069ba <_dtoa_r+0x4da>
 8006884:	9b00      	ldr	r3, [sp, #0]
 8006886:	4f9d      	ldr	r7, [pc, #628]	; (8006afc <_dtoa_r+0x61c>)
 8006888:	425e      	negs	r6, r3
 800688a:	4b9b      	ldr	r3, [pc, #620]	; (8006af8 <_dtoa_r+0x618>)
 800688c:	f006 020f 	and.w	r2, r6, #15
 8006890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	ec51 0b19 	vmov	r0, r1, d9
 800689c:	f7f9 feac 	bl	80005f8 <__aeabi_dmul>
 80068a0:	1136      	asrs	r6, r6, #4
 80068a2:	4682      	mov	sl, r0
 80068a4:	468b      	mov	fp, r1
 80068a6:	2300      	movs	r3, #0
 80068a8:	2502      	movs	r5, #2
 80068aa:	2e00      	cmp	r6, #0
 80068ac:	d17a      	bne.n	80069a4 <_dtoa_r+0x4c4>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1d3      	bne.n	800685a <_dtoa_r+0x37a>
 80068b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8082 	beq.w	80069be <_dtoa_r+0x4de>
 80068ba:	4b91      	ldr	r3, [pc, #580]	; (8006b00 <_dtoa_r+0x620>)
 80068bc:	2200      	movs	r2, #0
 80068be:	4650      	mov	r0, sl
 80068c0:	4659      	mov	r1, fp
 80068c2:	f7fa f90b 	bl	8000adc <__aeabi_dcmplt>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d079      	beq.n	80069be <_dtoa_r+0x4de>
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d076      	beq.n	80069be <_dtoa_r+0x4de>
 80068d0:	9b02      	ldr	r3, [sp, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	dd36      	ble.n	8006944 <_dtoa_r+0x464>
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	4650      	mov	r0, sl
 80068da:	4659      	mov	r1, fp
 80068dc:	1e5f      	subs	r7, r3, #1
 80068de:	2200      	movs	r2, #0
 80068e0:	4b88      	ldr	r3, [pc, #544]	; (8006b04 <_dtoa_r+0x624>)
 80068e2:	f7f9 fe89 	bl	80005f8 <__aeabi_dmul>
 80068e6:	9e02      	ldr	r6, [sp, #8]
 80068e8:	4682      	mov	sl, r0
 80068ea:	468b      	mov	fp, r1
 80068ec:	3501      	adds	r5, #1
 80068ee:	4628      	mov	r0, r5
 80068f0:	f7f9 fe18 	bl	8000524 <__aeabi_i2d>
 80068f4:	4652      	mov	r2, sl
 80068f6:	465b      	mov	r3, fp
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	4b82      	ldr	r3, [pc, #520]	; (8006b08 <_dtoa_r+0x628>)
 80068fe:	2200      	movs	r2, #0
 8006900:	f7f9 fcc4 	bl	800028c <__adddf3>
 8006904:	46d0      	mov	r8, sl
 8006906:	46d9      	mov	r9, fp
 8006908:	4682      	mov	sl, r0
 800690a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800690e:	2e00      	cmp	r6, #0
 8006910:	d158      	bne.n	80069c4 <_dtoa_r+0x4e4>
 8006912:	4b7e      	ldr	r3, [pc, #504]	; (8006b0c <_dtoa_r+0x62c>)
 8006914:	2200      	movs	r2, #0
 8006916:	4640      	mov	r0, r8
 8006918:	4649      	mov	r1, r9
 800691a:	f7f9 fcb5 	bl	8000288 <__aeabi_dsub>
 800691e:	4652      	mov	r2, sl
 8006920:	465b      	mov	r3, fp
 8006922:	4680      	mov	r8, r0
 8006924:	4689      	mov	r9, r1
 8006926:	f7fa f8f7 	bl	8000b18 <__aeabi_dcmpgt>
 800692a:	2800      	cmp	r0, #0
 800692c:	f040 8295 	bne.w	8006e5a <_dtoa_r+0x97a>
 8006930:	4652      	mov	r2, sl
 8006932:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006936:	4640      	mov	r0, r8
 8006938:	4649      	mov	r1, r9
 800693a:	f7fa f8cf 	bl	8000adc <__aeabi_dcmplt>
 800693e:	2800      	cmp	r0, #0
 8006940:	f040 8289 	bne.w	8006e56 <_dtoa_r+0x976>
 8006944:	ec5b ab19 	vmov	sl, fp, d9
 8006948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800694a:	2b00      	cmp	r3, #0
 800694c:	f2c0 8148 	blt.w	8006be0 <_dtoa_r+0x700>
 8006950:	9a00      	ldr	r2, [sp, #0]
 8006952:	2a0e      	cmp	r2, #14
 8006954:	f300 8144 	bgt.w	8006be0 <_dtoa_r+0x700>
 8006958:	4b67      	ldr	r3, [pc, #412]	; (8006af8 <_dtoa_r+0x618>)
 800695a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800695e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	f280 80d5 	bge.w	8006b14 <_dtoa_r+0x634>
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f300 80d1 	bgt.w	8006b14 <_dtoa_r+0x634>
 8006972:	f040 826f 	bne.w	8006e54 <_dtoa_r+0x974>
 8006976:	4b65      	ldr	r3, [pc, #404]	; (8006b0c <_dtoa_r+0x62c>)
 8006978:	2200      	movs	r2, #0
 800697a:	4640      	mov	r0, r8
 800697c:	4649      	mov	r1, r9
 800697e:	f7f9 fe3b 	bl	80005f8 <__aeabi_dmul>
 8006982:	4652      	mov	r2, sl
 8006984:	465b      	mov	r3, fp
 8006986:	f7fa f8bd 	bl	8000b04 <__aeabi_dcmpge>
 800698a:	9e03      	ldr	r6, [sp, #12]
 800698c:	4637      	mov	r7, r6
 800698e:	2800      	cmp	r0, #0
 8006990:	f040 8245 	bne.w	8006e1e <_dtoa_r+0x93e>
 8006994:	9d01      	ldr	r5, [sp, #4]
 8006996:	2331      	movs	r3, #49	; 0x31
 8006998:	f805 3b01 	strb.w	r3, [r5], #1
 800699c:	9b00      	ldr	r3, [sp, #0]
 800699e:	3301      	adds	r3, #1
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	e240      	b.n	8006e26 <_dtoa_r+0x946>
 80069a4:	07f2      	lsls	r2, r6, #31
 80069a6:	d505      	bpl.n	80069b4 <_dtoa_r+0x4d4>
 80069a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ac:	f7f9 fe24 	bl	80005f8 <__aeabi_dmul>
 80069b0:	3501      	adds	r5, #1
 80069b2:	2301      	movs	r3, #1
 80069b4:	1076      	asrs	r6, r6, #1
 80069b6:	3708      	adds	r7, #8
 80069b8:	e777      	b.n	80068aa <_dtoa_r+0x3ca>
 80069ba:	2502      	movs	r5, #2
 80069bc:	e779      	b.n	80068b2 <_dtoa_r+0x3d2>
 80069be:	9f00      	ldr	r7, [sp, #0]
 80069c0:	9e03      	ldr	r6, [sp, #12]
 80069c2:	e794      	b.n	80068ee <_dtoa_r+0x40e>
 80069c4:	9901      	ldr	r1, [sp, #4]
 80069c6:	4b4c      	ldr	r3, [pc, #304]	; (8006af8 <_dtoa_r+0x618>)
 80069c8:	4431      	add	r1, r6
 80069ca:	910d      	str	r1, [sp, #52]	; 0x34
 80069cc:	9908      	ldr	r1, [sp, #32]
 80069ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069d6:	2900      	cmp	r1, #0
 80069d8:	d043      	beq.n	8006a62 <_dtoa_r+0x582>
 80069da:	494d      	ldr	r1, [pc, #308]	; (8006b10 <_dtoa_r+0x630>)
 80069dc:	2000      	movs	r0, #0
 80069de:	f7f9 ff35 	bl	800084c <__aeabi_ddiv>
 80069e2:	4652      	mov	r2, sl
 80069e4:	465b      	mov	r3, fp
 80069e6:	f7f9 fc4f 	bl	8000288 <__aeabi_dsub>
 80069ea:	9d01      	ldr	r5, [sp, #4]
 80069ec:	4682      	mov	sl, r0
 80069ee:	468b      	mov	fp, r1
 80069f0:	4649      	mov	r1, r9
 80069f2:	4640      	mov	r0, r8
 80069f4:	f7fa f8b0 	bl	8000b58 <__aeabi_d2iz>
 80069f8:	4606      	mov	r6, r0
 80069fa:	f7f9 fd93 	bl	8000524 <__aeabi_i2d>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4640      	mov	r0, r8
 8006a04:	4649      	mov	r1, r9
 8006a06:	f7f9 fc3f 	bl	8000288 <__aeabi_dsub>
 8006a0a:	3630      	adds	r6, #48	; 0x30
 8006a0c:	f805 6b01 	strb.w	r6, [r5], #1
 8006a10:	4652      	mov	r2, sl
 8006a12:	465b      	mov	r3, fp
 8006a14:	4680      	mov	r8, r0
 8006a16:	4689      	mov	r9, r1
 8006a18:	f7fa f860 	bl	8000adc <__aeabi_dcmplt>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d163      	bne.n	8006ae8 <_dtoa_r+0x608>
 8006a20:	4642      	mov	r2, r8
 8006a22:	464b      	mov	r3, r9
 8006a24:	4936      	ldr	r1, [pc, #216]	; (8006b00 <_dtoa_r+0x620>)
 8006a26:	2000      	movs	r0, #0
 8006a28:	f7f9 fc2e 	bl	8000288 <__aeabi_dsub>
 8006a2c:	4652      	mov	r2, sl
 8006a2e:	465b      	mov	r3, fp
 8006a30:	f7fa f854 	bl	8000adc <__aeabi_dcmplt>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	f040 80b5 	bne.w	8006ba4 <_dtoa_r+0x6c4>
 8006a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a3c:	429d      	cmp	r5, r3
 8006a3e:	d081      	beq.n	8006944 <_dtoa_r+0x464>
 8006a40:	4b30      	ldr	r3, [pc, #192]	; (8006b04 <_dtoa_r+0x624>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	4650      	mov	r0, sl
 8006a46:	4659      	mov	r1, fp
 8006a48:	f7f9 fdd6 	bl	80005f8 <__aeabi_dmul>
 8006a4c:	4b2d      	ldr	r3, [pc, #180]	; (8006b04 <_dtoa_r+0x624>)
 8006a4e:	4682      	mov	sl, r0
 8006a50:	468b      	mov	fp, r1
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	2200      	movs	r2, #0
 8006a58:	f7f9 fdce 	bl	80005f8 <__aeabi_dmul>
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	4689      	mov	r9, r1
 8006a60:	e7c6      	b.n	80069f0 <_dtoa_r+0x510>
 8006a62:	4650      	mov	r0, sl
 8006a64:	4659      	mov	r1, fp
 8006a66:	f7f9 fdc7 	bl	80005f8 <__aeabi_dmul>
 8006a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a6c:	9d01      	ldr	r5, [sp, #4]
 8006a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a70:	4682      	mov	sl, r0
 8006a72:	468b      	mov	fp, r1
 8006a74:	4649      	mov	r1, r9
 8006a76:	4640      	mov	r0, r8
 8006a78:	f7fa f86e 	bl	8000b58 <__aeabi_d2iz>
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	f7f9 fd51 	bl	8000524 <__aeabi_i2d>
 8006a82:	3630      	adds	r6, #48	; 0x30
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4640      	mov	r0, r8
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	f7f9 fbfc 	bl	8000288 <__aeabi_dsub>
 8006a90:	f805 6b01 	strb.w	r6, [r5], #1
 8006a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a96:	429d      	cmp	r5, r3
 8006a98:	4680      	mov	r8, r0
 8006a9a:	4689      	mov	r9, r1
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	d124      	bne.n	8006aec <_dtoa_r+0x60c>
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	; (8006b10 <_dtoa_r+0x630>)
 8006aa4:	4650      	mov	r0, sl
 8006aa6:	4659      	mov	r1, fp
 8006aa8:	f7f9 fbf0 	bl	800028c <__adddf3>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	f7fa f830 	bl	8000b18 <__aeabi_dcmpgt>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d173      	bne.n	8006ba4 <_dtoa_r+0x6c4>
 8006abc:	4652      	mov	r2, sl
 8006abe:	465b      	mov	r3, fp
 8006ac0:	4913      	ldr	r1, [pc, #76]	; (8006b10 <_dtoa_r+0x630>)
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f7f9 fbe0 	bl	8000288 <__aeabi_dsub>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4640      	mov	r0, r8
 8006ace:	4649      	mov	r1, r9
 8006ad0:	f7fa f804 	bl	8000adc <__aeabi_dcmplt>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	f43f af35 	beq.w	8006944 <_dtoa_r+0x464>
 8006ada:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006adc:	1e6b      	subs	r3, r5, #1
 8006ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ae0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ae4:	2b30      	cmp	r3, #48	; 0x30
 8006ae6:	d0f8      	beq.n	8006ada <_dtoa_r+0x5fa>
 8006ae8:	9700      	str	r7, [sp, #0]
 8006aea:	e049      	b.n	8006b80 <_dtoa_r+0x6a0>
 8006aec:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <_dtoa_r+0x624>)
 8006aee:	f7f9 fd83 	bl	80005f8 <__aeabi_dmul>
 8006af2:	4680      	mov	r8, r0
 8006af4:	4689      	mov	r9, r1
 8006af6:	e7bd      	b.n	8006a74 <_dtoa_r+0x594>
 8006af8:	0800a288 	.word	0x0800a288
 8006afc:	0800a260 	.word	0x0800a260
 8006b00:	3ff00000 	.word	0x3ff00000
 8006b04:	40240000 	.word	0x40240000
 8006b08:	401c0000 	.word	0x401c0000
 8006b0c:	40140000 	.word	0x40140000
 8006b10:	3fe00000 	.word	0x3fe00000
 8006b14:	9d01      	ldr	r5, [sp, #4]
 8006b16:	4656      	mov	r6, sl
 8006b18:	465f      	mov	r7, fp
 8006b1a:	4642      	mov	r2, r8
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	4630      	mov	r0, r6
 8006b20:	4639      	mov	r1, r7
 8006b22:	f7f9 fe93 	bl	800084c <__aeabi_ddiv>
 8006b26:	f7fa f817 	bl	8000b58 <__aeabi_d2iz>
 8006b2a:	4682      	mov	sl, r0
 8006b2c:	f7f9 fcfa 	bl	8000524 <__aeabi_i2d>
 8006b30:	4642      	mov	r2, r8
 8006b32:	464b      	mov	r3, r9
 8006b34:	f7f9 fd60 	bl	80005f8 <__aeabi_dmul>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4639      	mov	r1, r7
 8006b40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b44:	f7f9 fba0 	bl	8000288 <__aeabi_dsub>
 8006b48:	f805 6b01 	strb.w	r6, [r5], #1
 8006b4c:	9e01      	ldr	r6, [sp, #4]
 8006b4e:	9f03      	ldr	r7, [sp, #12]
 8006b50:	1bae      	subs	r6, r5, r6
 8006b52:	42b7      	cmp	r7, r6
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	d135      	bne.n	8006bc6 <_dtoa_r+0x6e6>
 8006b5a:	f7f9 fb97 	bl	800028c <__adddf3>
 8006b5e:	4642      	mov	r2, r8
 8006b60:	464b      	mov	r3, r9
 8006b62:	4606      	mov	r6, r0
 8006b64:	460f      	mov	r7, r1
 8006b66:	f7f9 ffd7 	bl	8000b18 <__aeabi_dcmpgt>
 8006b6a:	b9d0      	cbnz	r0, 8006ba2 <_dtoa_r+0x6c2>
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	464b      	mov	r3, r9
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b78:	b110      	cbz	r0, 8006b80 <_dtoa_r+0x6a0>
 8006b7a:	f01a 0f01 	tst.w	sl, #1
 8006b7e:	d110      	bne.n	8006ba2 <_dtoa_r+0x6c2>
 8006b80:	4620      	mov	r0, r4
 8006b82:	ee18 1a10 	vmov	r1, s16
 8006b86:	f000 fe67 	bl	8007858 <_Bfree>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	9800      	ldr	r0, [sp, #0]
 8006b8e:	702b      	strb	r3, [r5, #0]
 8006b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b92:	3001      	adds	r0, #1
 8006b94:	6018      	str	r0, [r3, #0]
 8006b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f43f acf1 	beq.w	8006580 <_dtoa_r+0xa0>
 8006b9e:	601d      	str	r5, [r3, #0]
 8006ba0:	e4ee      	b.n	8006580 <_dtoa_r+0xa0>
 8006ba2:	9f00      	ldr	r7, [sp, #0]
 8006ba4:	462b      	mov	r3, r5
 8006ba6:	461d      	mov	r5, r3
 8006ba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bac:	2a39      	cmp	r2, #57	; 0x39
 8006bae:	d106      	bne.n	8006bbe <_dtoa_r+0x6de>
 8006bb0:	9a01      	ldr	r2, [sp, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d1f7      	bne.n	8006ba6 <_dtoa_r+0x6c6>
 8006bb6:	9901      	ldr	r1, [sp, #4]
 8006bb8:	2230      	movs	r2, #48	; 0x30
 8006bba:	3701      	adds	r7, #1
 8006bbc:	700a      	strb	r2, [r1, #0]
 8006bbe:	781a      	ldrb	r2, [r3, #0]
 8006bc0:	3201      	adds	r2, #1
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	e790      	b.n	8006ae8 <_dtoa_r+0x608>
 8006bc6:	4ba6      	ldr	r3, [pc, #664]	; (8006e60 <_dtoa_r+0x980>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f7f9 fd15 	bl	80005f8 <__aeabi_dmul>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	f7f9 ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d09d      	beq.n	8006b1a <_dtoa_r+0x63a>
 8006bde:	e7cf      	b.n	8006b80 <_dtoa_r+0x6a0>
 8006be0:	9a08      	ldr	r2, [sp, #32]
 8006be2:	2a00      	cmp	r2, #0
 8006be4:	f000 80d7 	beq.w	8006d96 <_dtoa_r+0x8b6>
 8006be8:	9a06      	ldr	r2, [sp, #24]
 8006bea:	2a01      	cmp	r2, #1
 8006bec:	f300 80ba 	bgt.w	8006d64 <_dtoa_r+0x884>
 8006bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bf2:	2a00      	cmp	r2, #0
 8006bf4:	f000 80b2 	beq.w	8006d5c <_dtoa_r+0x87c>
 8006bf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bfc:	9e07      	ldr	r6, [sp, #28]
 8006bfe:	9d04      	ldr	r5, [sp, #16]
 8006c00:	9a04      	ldr	r2, [sp, #16]
 8006c02:	441a      	add	r2, r3
 8006c04:	9204      	str	r2, [sp, #16]
 8006c06:	9a05      	ldr	r2, [sp, #20]
 8006c08:	2101      	movs	r1, #1
 8006c0a:	441a      	add	r2, r3
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	9205      	str	r2, [sp, #20]
 8006c10:	f000 ff24 	bl	8007a5c <__i2b>
 8006c14:	4607      	mov	r7, r0
 8006c16:	2d00      	cmp	r5, #0
 8006c18:	dd0c      	ble.n	8006c34 <_dtoa_r+0x754>
 8006c1a:	9b05      	ldr	r3, [sp, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	dd09      	ble.n	8006c34 <_dtoa_r+0x754>
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	9a04      	ldr	r2, [sp, #16]
 8006c24:	bfa8      	it	ge
 8006c26:	462b      	movge	r3, r5
 8006c28:	1ad2      	subs	r2, r2, r3
 8006c2a:	9204      	str	r2, [sp, #16]
 8006c2c:	9a05      	ldr	r2, [sp, #20]
 8006c2e:	1aed      	subs	r5, r5, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	9b07      	ldr	r3, [sp, #28]
 8006c36:	b31b      	cbz	r3, 8006c80 <_dtoa_r+0x7a0>
 8006c38:	9b08      	ldr	r3, [sp, #32]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80af 	beq.w	8006d9e <_dtoa_r+0x8be>
 8006c40:	2e00      	cmp	r6, #0
 8006c42:	dd13      	ble.n	8006c6c <_dtoa_r+0x78c>
 8006c44:	4639      	mov	r1, r7
 8006c46:	4632      	mov	r2, r6
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 ffc7 	bl	8007bdc <__pow5mult>
 8006c4e:	ee18 2a10 	vmov	r2, s16
 8006c52:	4601      	mov	r1, r0
 8006c54:	4607      	mov	r7, r0
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 ff16 	bl	8007a88 <__multiply>
 8006c5c:	ee18 1a10 	vmov	r1, s16
 8006c60:	4680      	mov	r8, r0
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 fdf8 	bl	8007858 <_Bfree>
 8006c68:	ee08 8a10 	vmov	s16, r8
 8006c6c:	9b07      	ldr	r3, [sp, #28]
 8006c6e:	1b9a      	subs	r2, r3, r6
 8006c70:	d006      	beq.n	8006c80 <_dtoa_r+0x7a0>
 8006c72:	ee18 1a10 	vmov	r1, s16
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 ffb0 	bl	8007bdc <__pow5mult>
 8006c7c:	ee08 0a10 	vmov	s16, r0
 8006c80:	2101      	movs	r1, #1
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 feea 	bl	8007a5c <__i2b>
 8006c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	f340 8088 	ble.w	8006da2 <_dtoa_r+0x8c2>
 8006c92:	461a      	mov	r2, r3
 8006c94:	4601      	mov	r1, r0
 8006c96:	4620      	mov	r0, r4
 8006c98:	f000 ffa0 	bl	8007bdc <__pow5mult>
 8006c9c:	9b06      	ldr	r3, [sp, #24]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	f340 8081 	ble.w	8006da8 <_dtoa_r+0x8c8>
 8006ca6:	f04f 0800 	mov.w	r8, #0
 8006caa:	6933      	ldr	r3, [r6, #16]
 8006cac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cb0:	6918      	ldr	r0, [r3, #16]
 8006cb2:	f000 fe83 	bl	80079bc <__hi0bits>
 8006cb6:	f1c0 0020 	rsb	r0, r0, #32
 8006cba:	9b05      	ldr	r3, [sp, #20]
 8006cbc:	4418      	add	r0, r3
 8006cbe:	f010 001f 	ands.w	r0, r0, #31
 8006cc2:	f000 8092 	beq.w	8006dea <_dtoa_r+0x90a>
 8006cc6:	f1c0 0320 	rsb	r3, r0, #32
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	f340 808a 	ble.w	8006de4 <_dtoa_r+0x904>
 8006cd0:	f1c0 001c 	rsb	r0, r0, #28
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	4403      	add	r3, r0
 8006cd8:	9304      	str	r3, [sp, #16]
 8006cda:	9b05      	ldr	r3, [sp, #20]
 8006cdc:	4403      	add	r3, r0
 8006cde:	4405      	add	r5, r0
 8006ce0:	9305      	str	r3, [sp, #20]
 8006ce2:	9b04      	ldr	r3, [sp, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	dd07      	ble.n	8006cf8 <_dtoa_r+0x818>
 8006ce8:	ee18 1a10 	vmov	r1, s16
 8006cec:	461a      	mov	r2, r3
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 ffce 	bl	8007c90 <__lshift>
 8006cf4:	ee08 0a10 	vmov	s16, r0
 8006cf8:	9b05      	ldr	r3, [sp, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	dd05      	ble.n	8006d0a <_dtoa_r+0x82a>
 8006cfe:	4631      	mov	r1, r6
 8006d00:	461a      	mov	r2, r3
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 ffc4 	bl	8007c90 <__lshift>
 8006d08:	4606      	mov	r6, r0
 8006d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d06e      	beq.n	8006dee <_dtoa_r+0x90e>
 8006d10:	ee18 0a10 	vmov	r0, s16
 8006d14:	4631      	mov	r1, r6
 8006d16:	f001 f82b 	bl	8007d70 <__mcmp>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	da67      	bge.n	8006dee <_dtoa_r+0x90e>
 8006d1e:	9b00      	ldr	r3, [sp, #0]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	ee18 1a10 	vmov	r1, s16
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	220a      	movs	r2, #10
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f000 fdb5 	bl	800789c <__multadd>
 8006d32:	9b08      	ldr	r3, [sp, #32]
 8006d34:	ee08 0a10 	vmov	s16, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 81b1 	beq.w	80070a0 <_dtoa_r+0xbc0>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4639      	mov	r1, r7
 8006d42:	220a      	movs	r2, #10
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 fda9 	bl	800789c <__multadd>
 8006d4a:	9b02      	ldr	r3, [sp, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	4607      	mov	r7, r0
 8006d50:	f300 808e 	bgt.w	8006e70 <_dtoa_r+0x990>
 8006d54:	9b06      	ldr	r3, [sp, #24]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	dc51      	bgt.n	8006dfe <_dtoa_r+0x91e>
 8006d5a:	e089      	b.n	8006e70 <_dtoa_r+0x990>
 8006d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d62:	e74b      	b.n	8006bfc <_dtoa_r+0x71c>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	1e5e      	subs	r6, r3, #1
 8006d68:	9b07      	ldr	r3, [sp, #28]
 8006d6a:	42b3      	cmp	r3, r6
 8006d6c:	bfbf      	itttt	lt
 8006d6e:	9b07      	ldrlt	r3, [sp, #28]
 8006d70:	9607      	strlt	r6, [sp, #28]
 8006d72:	1af2      	sublt	r2, r6, r3
 8006d74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d76:	bfb6      	itet	lt
 8006d78:	189b      	addlt	r3, r3, r2
 8006d7a:	1b9e      	subge	r6, r3, r6
 8006d7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d7e:	9b03      	ldr	r3, [sp, #12]
 8006d80:	bfb8      	it	lt
 8006d82:	2600      	movlt	r6, #0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bfb7      	itett	lt
 8006d88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d90:	1a9d      	sublt	r5, r3, r2
 8006d92:	2300      	movlt	r3, #0
 8006d94:	e734      	b.n	8006c00 <_dtoa_r+0x720>
 8006d96:	9e07      	ldr	r6, [sp, #28]
 8006d98:	9d04      	ldr	r5, [sp, #16]
 8006d9a:	9f08      	ldr	r7, [sp, #32]
 8006d9c:	e73b      	b.n	8006c16 <_dtoa_r+0x736>
 8006d9e:	9a07      	ldr	r2, [sp, #28]
 8006da0:	e767      	b.n	8006c72 <_dtoa_r+0x792>
 8006da2:	9b06      	ldr	r3, [sp, #24]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	dc18      	bgt.n	8006dda <_dtoa_r+0x8fa>
 8006da8:	f1ba 0f00 	cmp.w	sl, #0
 8006dac:	d115      	bne.n	8006dda <_dtoa_r+0x8fa>
 8006dae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006db2:	b993      	cbnz	r3, 8006dda <_dtoa_r+0x8fa>
 8006db4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006db8:	0d1b      	lsrs	r3, r3, #20
 8006dba:	051b      	lsls	r3, r3, #20
 8006dbc:	b183      	cbz	r3, 8006de0 <_dtoa_r+0x900>
 8006dbe:	9b04      	ldr	r3, [sp, #16]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	9304      	str	r3, [sp, #16]
 8006dc4:	9b05      	ldr	r3, [sp, #20]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	9305      	str	r3, [sp, #20]
 8006dca:	f04f 0801 	mov.w	r8, #1
 8006dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f47f af6a 	bne.w	8006caa <_dtoa_r+0x7ca>
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	e76f      	b.n	8006cba <_dtoa_r+0x7da>
 8006dda:	f04f 0800 	mov.w	r8, #0
 8006dde:	e7f6      	b.n	8006dce <_dtoa_r+0x8ee>
 8006de0:	4698      	mov	r8, r3
 8006de2:	e7f4      	b.n	8006dce <_dtoa_r+0x8ee>
 8006de4:	f43f af7d 	beq.w	8006ce2 <_dtoa_r+0x802>
 8006de8:	4618      	mov	r0, r3
 8006dea:	301c      	adds	r0, #28
 8006dec:	e772      	b.n	8006cd4 <_dtoa_r+0x7f4>
 8006dee:	9b03      	ldr	r3, [sp, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dc37      	bgt.n	8006e64 <_dtoa_r+0x984>
 8006df4:	9b06      	ldr	r3, [sp, #24]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	dd34      	ble.n	8006e64 <_dtoa_r+0x984>
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	9302      	str	r3, [sp, #8]
 8006dfe:	9b02      	ldr	r3, [sp, #8]
 8006e00:	b96b      	cbnz	r3, 8006e1e <_dtoa_r+0x93e>
 8006e02:	4631      	mov	r1, r6
 8006e04:	2205      	movs	r2, #5
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 fd48 	bl	800789c <__multadd>
 8006e0c:	4601      	mov	r1, r0
 8006e0e:	4606      	mov	r6, r0
 8006e10:	ee18 0a10 	vmov	r0, s16
 8006e14:	f000 ffac 	bl	8007d70 <__mcmp>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	f73f adbb 	bgt.w	8006994 <_dtoa_r+0x4b4>
 8006e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e20:	9d01      	ldr	r5, [sp, #4]
 8006e22:	43db      	mvns	r3, r3
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	f04f 0800 	mov.w	r8, #0
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 fd13 	bl	8007858 <_Bfree>
 8006e32:	2f00      	cmp	r7, #0
 8006e34:	f43f aea4 	beq.w	8006b80 <_dtoa_r+0x6a0>
 8006e38:	f1b8 0f00 	cmp.w	r8, #0
 8006e3c:	d005      	beq.n	8006e4a <_dtoa_r+0x96a>
 8006e3e:	45b8      	cmp	r8, r7
 8006e40:	d003      	beq.n	8006e4a <_dtoa_r+0x96a>
 8006e42:	4641      	mov	r1, r8
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fd07 	bl	8007858 <_Bfree>
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 fd03 	bl	8007858 <_Bfree>
 8006e52:	e695      	b.n	8006b80 <_dtoa_r+0x6a0>
 8006e54:	2600      	movs	r6, #0
 8006e56:	4637      	mov	r7, r6
 8006e58:	e7e1      	b.n	8006e1e <_dtoa_r+0x93e>
 8006e5a:	9700      	str	r7, [sp, #0]
 8006e5c:	4637      	mov	r7, r6
 8006e5e:	e599      	b.n	8006994 <_dtoa_r+0x4b4>
 8006e60:	40240000 	.word	0x40240000
 8006e64:	9b08      	ldr	r3, [sp, #32]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 80ca 	beq.w	8007000 <_dtoa_r+0xb20>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	9302      	str	r3, [sp, #8]
 8006e70:	2d00      	cmp	r5, #0
 8006e72:	dd05      	ble.n	8006e80 <_dtoa_r+0x9a0>
 8006e74:	4639      	mov	r1, r7
 8006e76:	462a      	mov	r2, r5
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 ff09 	bl	8007c90 <__lshift>
 8006e7e:	4607      	mov	r7, r0
 8006e80:	f1b8 0f00 	cmp.w	r8, #0
 8006e84:	d05b      	beq.n	8006f3e <_dtoa_r+0xa5e>
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 fca5 	bl	80077d8 <_Balloc>
 8006e8e:	4605      	mov	r5, r0
 8006e90:	b928      	cbnz	r0, 8006e9e <_dtoa_r+0x9be>
 8006e92:	4b87      	ldr	r3, [pc, #540]	; (80070b0 <_dtoa_r+0xbd0>)
 8006e94:	4602      	mov	r2, r0
 8006e96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e9a:	f7ff bb3b 	b.w	8006514 <_dtoa_r+0x34>
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	3202      	adds	r2, #2
 8006ea2:	0092      	lsls	r2, r2, #2
 8006ea4:	f107 010c 	add.w	r1, r7, #12
 8006ea8:	300c      	adds	r0, #12
 8006eaa:	f7fd fcf7 	bl	800489c <memcpy>
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 feec 	bl	8007c90 <__lshift>
 8006eb8:	9b01      	ldr	r3, [sp, #4]
 8006eba:	f103 0901 	add.w	r9, r3, #1
 8006ebe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	9305      	str	r3, [sp, #20]
 8006ec6:	f00a 0301 	and.w	r3, sl, #1
 8006eca:	46b8      	mov	r8, r7
 8006ecc:	9304      	str	r3, [sp, #16]
 8006ece:	4607      	mov	r7, r0
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	ee18 0a10 	vmov	r0, s16
 8006ed6:	f7ff fa77 	bl	80063c8 <quorem>
 8006eda:	4641      	mov	r1, r8
 8006edc:	9002      	str	r0, [sp, #8]
 8006ede:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ee2:	ee18 0a10 	vmov	r0, s16
 8006ee6:	f000 ff43 	bl	8007d70 <__mcmp>
 8006eea:	463a      	mov	r2, r7
 8006eec:	9003      	str	r0, [sp, #12]
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 ff59 	bl	8007da8 <__mdiff>
 8006ef6:	68c2      	ldr	r2, [r0, #12]
 8006ef8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006efc:	4605      	mov	r5, r0
 8006efe:	bb02      	cbnz	r2, 8006f42 <_dtoa_r+0xa62>
 8006f00:	4601      	mov	r1, r0
 8006f02:	ee18 0a10 	vmov	r0, s16
 8006f06:	f000 ff33 	bl	8007d70 <__mcmp>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4620      	mov	r0, r4
 8006f10:	9207      	str	r2, [sp, #28]
 8006f12:	f000 fca1 	bl	8007858 <_Bfree>
 8006f16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006f1a:	ea43 0102 	orr.w	r1, r3, r2
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	430b      	orrs	r3, r1
 8006f22:	464d      	mov	r5, r9
 8006f24:	d10f      	bne.n	8006f46 <_dtoa_r+0xa66>
 8006f26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f2a:	d02a      	beq.n	8006f82 <_dtoa_r+0xaa2>
 8006f2c:	9b03      	ldr	r3, [sp, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	dd02      	ble.n	8006f38 <_dtoa_r+0xa58>
 8006f32:	9b02      	ldr	r3, [sp, #8]
 8006f34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f38:	f88b a000 	strb.w	sl, [fp]
 8006f3c:	e775      	b.n	8006e2a <_dtoa_r+0x94a>
 8006f3e:	4638      	mov	r0, r7
 8006f40:	e7ba      	b.n	8006eb8 <_dtoa_r+0x9d8>
 8006f42:	2201      	movs	r2, #1
 8006f44:	e7e2      	b.n	8006f0c <_dtoa_r+0xa2c>
 8006f46:	9b03      	ldr	r3, [sp, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	db04      	blt.n	8006f56 <_dtoa_r+0xa76>
 8006f4c:	9906      	ldr	r1, [sp, #24]
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	9904      	ldr	r1, [sp, #16]
 8006f52:	430b      	orrs	r3, r1
 8006f54:	d122      	bne.n	8006f9c <_dtoa_r+0xabc>
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	ddee      	ble.n	8006f38 <_dtoa_r+0xa58>
 8006f5a:	ee18 1a10 	vmov	r1, s16
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fe95 	bl	8007c90 <__lshift>
 8006f66:	4631      	mov	r1, r6
 8006f68:	ee08 0a10 	vmov	s16, r0
 8006f6c:	f000 ff00 	bl	8007d70 <__mcmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	dc03      	bgt.n	8006f7c <_dtoa_r+0xa9c>
 8006f74:	d1e0      	bne.n	8006f38 <_dtoa_r+0xa58>
 8006f76:	f01a 0f01 	tst.w	sl, #1
 8006f7a:	d0dd      	beq.n	8006f38 <_dtoa_r+0xa58>
 8006f7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f80:	d1d7      	bne.n	8006f32 <_dtoa_r+0xa52>
 8006f82:	2339      	movs	r3, #57	; 0x39
 8006f84:	f88b 3000 	strb.w	r3, [fp]
 8006f88:	462b      	mov	r3, r5
 8006f8a:	461d      	mov	r5, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f92:	2a39      	cmp	r2, #57	; 0x39
 8006f94:	d071      	beq.n	800707a <_dtoa_r+0xb9a>
 8006f96:	3201      	adds	r2, #1
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e746      	b.n	8006e2a <_dtoa_r+0x94a>
 8006f9c:	2a00      	cmp	r2, #0
 8006f9e:	dd07      	ble.n	8006fb0 <_dtoa_r+0xad0>
 8006fa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fa4:	d0ed      	beq.n	8006f82 <_dtoa_r+0xaa2>
 8006fa6:	f10a 0301 	add.w	r3, sl, #1
 8006faa:	f88b 3000 	strb.w	r3, [fp]
 8006fae:	e73c      	b.n	8006e2a <_dtoa_r+0x94a>
 8006fb0:	9b05      	ldr	r3, [sp, #20]
 8006fb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006fb6:	4599      	cmp	r9, r3
 8006fb8:	d047      	beq.n	800704a <_dtoa_r+0xb6a>
 8006fba:	ee18 1a10 	vmov	r1, s16
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fc6a 	bl	800789c <__multadd>
 8006fc8:	45b8      	cmp	r8, r7
 8006fca:	ee08 0a10 	vmov	s16, r0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	f04f 020a 	mov.w	r2, #10
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	4620      	mov	r0, r4
 8006fda:	d106      	bne.n	8006fea <_dtoa_r+0xb0a>
 8006fdc:	f000 fc5e 	bl	800789c <__multadd>
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	4607      	mov	r7, r0
 8006fe4:	f109 0901 	add.w	r9, r9, #1
 8006fe8:	e772      	b.n	8006ed0 <_dtoa_r+0x9f0>
 8006fea:	f000 fc57 	bl	800789c <__multadd>
 8006fee:	4639      	mov	r1, r7
 8006ff0:	4680      	mov	r8, r0
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	220a      	movs	r2, #10
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 fc50 	bl	800789c <__multadd>
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	e7f1      	b.n	8006fe4 <_dtoa_r+0xb04>
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	9302      	str	r3, [sp, #8]
 8007004:	9d01      	ldr	r5, [sp, #4]
 8007006:	ee18 0a10 	vmov	r0, s16
 800700a:	4631      	mov	r1, r6
 800700c:	f7ff f9dc 	bl	80063c8 <quorem>
 8007010:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007014:	9b01      	ldr	r3, [sp, #4]
 8007016:	f805 ab01 	strb.w	sl, [r5], #1
 800701a:	1aea      	subs	r2, r5, r3
 800701c:	9b02      	ldr	r3, [sp, #8]
 800701e:	4293      	cmp	r3, r2
 8007020:	dd09      	ble.n	8007036 <_dtoa_r+0xb56>
 8007022:	ee18 1a10 	vmov	r1, s16
 8007026:	2300      	movs	r3, #0
 8007028:	220a      	movs	r2, #10
 800702a:	4620      	mov	r0, r4
 800702c:	f000 fc36 	bl	800789c <__multadd>
 8007030:	ee08 0a10 	vmov	s16, r0
 8007034:	e7e7      	b.n	8007006 <_dtoa_r+0xb26>
 8007036:	9b02      	ldr	r3, [sp, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	bfc8      	it	gt
 800703c:	461d      	movgt	r5, r3
 800703e:	9b01      	ldr	r3, [sp, #4]
 8007040:	bfd8      	it	le
 8007042:	2501      	movle	r5, #1
 8007044:	441d      	add	r5, r3
 8007046:	f04f 0800 	mov.w	r8, #0
 800704a:	ee18 1a10 	vmov	r1, s16
 800704e:	2201      	movs	r2, #1
 8007050:	4620      	mov	r0, r4
 8007052:	f000 fe1d 	bl	8007c90 <__lshift>
 8007056:	4631      	mov	r1, r6
 8007058:	ee08 0a10 	vmov	s16, r0
 800705c:	f000 fe88 	bl	8007d70 <__mcmp>
 8007060:	2800      	cmp	r0, #0
 8007062:	dc91      	bgt.n	8006f88 <_dtoa_r+0xaa8>
 8007064:	d102      	bne.n	800706c <_dtoa_r+0xb8c>
 8007066:	f01a 0f01 	tst.w	sl, #1
 800706a:	d18d      	bne.n	8006f88 <_dtoa_r+0xaa8>
 800706c:	462b      	mov	r3, r5
 800706e:	461d      	mov	r5, r3
 8007070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007074:	2a30      	cmp	r2, #48	; 0x30
 8007076:	d0fa      	beq.n	800706e <_dtoa_r+0xb8e>
 8007078:	e6d7      	b.n	8006e2a <_dtoa_r+0x94a>
 800707a:	9a01      	ldr	r2, [sp, #4]
 800707c:	429a      	cmp	r2, r3
 800707e:	d184      	bne.n	8006f8a <_dtoa_r+0xaaa>
 8007080:	9b00      	ldr	r3, [sp, #0]
 8007082:	3301      	adds	r3, #1
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	2331      	movs	r3, #49	; 0x31
 8007088:	7013      	strb	r3, [r2, #0]
 800708a:	e6ce      	b.n	8006e2a <_dtoa_r+0x94a>
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <_dtoa_r+0xbd4>)
 800708e:	f7ff ba95 	b.w	80065bc <_dtoa_r+0xdc>
 8007092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007094:	2b00      	cmp	r3, #0
 8007096:	f47f aa6e 	bne.w	8006576 <_dtoa_r+0x96>
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <_dtoa_r+0xbd8>)
 800709c:	f7ff ba8e 	b.w	80065bc <_dtoa_r+0xdc>
 80070a0:	9b02      	ldr	r3, [sp, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dcae      	bgt.n	8007004 <_dtoa_r+0xb24>
 80070a6:	9b06      	ldr	r3, [sp, #24]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	f73f aea8 	bgt.w	8006dfe <_dtoa_r+0x91e>
 80070ae:	e7a9      	b.n	8007004 <_dtoa_r+0xb24>
 80070b0:	0800a178 	.word	0x0800a178
 80070b4:	08009f7c 	.word	0x08009f7c
 80070b8:	0800a0f9 	.word	0x0800a0f9

080070bc <rshift>:
 80070bc:	6903      	ldr	r3, [r0, #16]
 80070be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80070c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80070ca:	f100 0414 	add.w	r4, r0, #20
 80070ce:	dd45      	ble.n	800715c <rshift+0xa0>
 80070d0:	f011 011f 	ands.w	r1, r1, #31
 80070d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80070d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80070dc:	d10c      	bne.n	80070f8 <rshift+0x3c>
 80070de:	f100 0710 	add.w	r7, r0, #16
 80070e2:	4629      	mov	r1, r5
 80070e4:	42b1      	cmp	r1, r6
 80070e6:	d334      	bcc.n	8007152 <rshift+0x96>
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	1eea      	subs	r2, r5, #3
 80070ee:	4296      	cmp	r6, r2
 80070f0:	bf38      	it	cc
 80070f2:	2300      	movcc	r3, #0
 80070f4:	4423      	add	r3, r4
 80070f6:	e015      	b.n	8007124 <rshift+0x68>
 80070f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80070fc:	f1c1 0820 	rsb	r8, r1, #32
 8007100:	40cf      	lsrs	r7, r1
 8007102:	f105 0e04 	add.w	lr, r5, #4
 8007106:	46a1      	mov	r9, r4
 8007108:	4576      	cmp	r6, lr
 800710a:	46f4      	mov	ip, lr
 800710c:	d815      	bhi.n	800713a <rshift+0x7e>
 800710e:	1a9a      	subs	r2, r3, r2
 8007110:	0092      	lsls	r2, r2, #2
 8007112:	3a04      	subs	r2, #4
 8007114:	3501      	adds	r5, #1
 8007116:	42ae      	cmp	r6, r5
 8007118:	bf38      	it	cc
 800711a:	2200      	movcc	r2, #0
 800711c:	18a3      	adds	r3, r4, r2
 800711e:	50a7      	str	r7, [r4, r2]
 8007120:	b107      	cbz	r7, 8007124 <rshift+0x68>
 8007122:	3304      	adds	r3, #4
 8007124:	1b1a      	subs	r2, r3, r4
 8007126:	42a3      	cmp	r3, r4
 8007128:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800712c:	bf08      	it	eq
 800712e:	2300      	moveq	r3, #0
 8007130:	6102      	str	r2, [r0, #16]
 8007132:	bf08      	it	eq
 8007134:	6143      	streq	r3, [r0, #20]
 8007136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800713a:	f8dc c000 	ldr.w	ip, [ip]
 800713e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007142:	ea4c 0707 	orr.w	r7, ip, r7
 8007146:	f849 7b04 	str.w	r7, [r9], #4
 800714a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800714e:	40cf      	lsrs	r7, r1
 8007150:	e7da      	b.n	8007108 <rshift+0x4c>
 8007152:	f851 cb04 	ldr.w	ip, [r1], #4
 8007156:	f847 cf04 	str.w	ip, [r7, #4]!
 800715a:	e7c3      	b.n	80070e4 <rshift+0x28>
 800715c:	4623      	mov	r3, r4
 800715e:	e7e1      	b.n	8007124 <rshift+0x68>

08007160 <__hexdig_fun>:
 8007160:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007164:	2b09      	cmp	r3, #9
 8007166:	d802      	bhi.n	800716e <__hexdig_fun+0xe>
 8007168:	3820      	subs	r0, #32
 800716a:	b2c0      	uxtb	r0, r0
 800716c:	4770      	bx	lr
 800716e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007172:	2b05      	cmp	r3, #5
 8007174:	d801      	bhi.n	800717a <__hexdig_fun+0x1a>
 8007176:	3847      	subs	r0, #71	; 0x47
 8007178:	e7f7      	b.n	800716a <__hexdig_fun+0xa>
 800717a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800717e:	2b05      	cmp	r3, #5
 8007180:	d801      	bhi.n	8007186 <__hexdig_fun+0x26>
 8007182:	3827      	subs	r0, #39	; 0x27
 8007184:	e7f1      	b.n	800716a <__hexdig_fun+0xa>
 8007186:	2000      	movs	r0, #0
 8007188:	4770      	bx	lr
	...

0800718c <__gethex>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	ed2d 8b02 	vpush	{d8}
 8007194:	b089      	sub	sp, #36	; 0x24
 8007196:	ee08 0a10 	vmov	s16, r0
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	4bb4      	ldr	r3, [pc, #720]	; (8007470 <__gethex+0x2e4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	4618      	mov	r0, r3
 80071a4:	468b      	mov	fp, r1
 80071a6:	4690      	mov	r8, r2
 80071a8:	f7f9 f812 	bl	80001d0 <strlen>
 80071ac:	9b01      	ldr	r3, [sp, #4]
 80071ae:	f8db 2000 	ldr.w	r2, [fp]
 80071b2:	4403      	add	r3, r0
 80071b4:	4682      	mov	sl, r0
 80071b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80071ba:	9305      	str	r3, [sp, #20]
 80071bc:	1c93      	adds	r3, r2, #2
 80071be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80071c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80071c6:	32fe      	adds	r2, #254	; 0xfe
 80071c8:	18d1      	adds	r1, r2, r3
 80071ca:	461f      	mov	r7, r3
 80071cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071d0:	9100      	str	r1, [sp, #0]
 80071d2:	2830      	cmp	r0, #48	; 0x30
 80071d4:	d0f8      	beq.n	80071c8 <__gethex+0x3c>
 80071d6:	f7ff ffc3 	bl	8007160 <__hexdig_fun>
 80071da:	4604      	mov	r4, r0
 80071dc:	2800      	cmp	r0, #0
 80071de:	d13a      	bne.n	8007256 <__gethex+0xca>
 80071e0:	9901      	ldr	r1, [sp, #4]
 80071e2:	4652      	mov	r2, sl
 80071e4:	4638      	mov	r0, r7
 80071e6:	f001 fa23 	bl	8008630 <strncmp>
 80071ea:	4605      	mov	r5, r0
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d168      	bne.n	80072c2 <__gethex+0x136>
 80071f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80071f4:	eb07 060a 	add.w	r6, r7, sl
 80071f8:	f7ff ffb2 	bl	8007160 <__hexdig_fun>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d062      	beq.n	80072c6 <__gethex+0x13a>
 8007200:	4633      	mov	r3, r6
 8007202:	7818      	ldrb	r0, [r3, #0]
 8007204:	2830      	cmp	r0, #48	; 0x30
 8007206:	461f      	mov	r7, r3
 8007208:	f103 0301 	add.w	r3, r3, #1
 800720c:	d0f9      	beq.n	8007202 <__gethex+0x76>
 800720e:	f7ff ffa7 	bl	8007160 <__hexdig_fun>
 8007212:	2301      	movs	r3, #1
 8007214:	fab0 f480 	clz	r4, r0
 8007218:	0964      	lsrs	r4, r4, #5
 800721a:	4635      	mov	r5, r6
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	463a      	mov	r2, r7
 8007220:	4616      	mov	r6, r2
 8007222:	3201      	adds	r2, #1
 8007224:	7830      	ldrb	r0, [r6, #0]
 8007226:	f7ff ff9b 	bl	8007160 <__hexdig_fun>
 800722a:	2800      	cmp	r0, #0
 800722c:	d1f8      	bne.n	8007220 <__gethex+0x94>
 800722e:	9901      	ldr	r1, [sp, #4]
 8007230:	4652      	mov	r2, sl
 8007232:	4630      	mov	r0, r6
 8007234:	f001 f9fc 	bl	8008630 <strncmp>
 8007238:	b980      	cbnz	r0, 800725c <__gethex+0xd0>
 800723a:	b94d      	cbnz	r5, 8007250 <__gethex+0xc4>
 800723c:	eb06 050a 	add.w	r5, r6, sl
 8007240:	462a      	mov	r2, r5
 8007242:	4616      	mov	r6, r2
 8007244:	3201      	adds	r2, #1
 8007246:	7830      	ldrb	r0, [r6, #0]
 8007248:	f7ff ff8a 	bl	8007160 <__hexdig_fun>
 800724c:	2800      	cmp	r0, #0
 800724e:	d1f8      	bne.n	8007242 <__gethex+0xb6>
 8007250:	1bad      	subs	r5, r5, r6
 8007252:	00ad      	lsls	r5, r5, #2
 8007254:	e004      	b.n	8007260 <__gethex+0xd4>
 8007256:	2400      	movs	r4, #0
 8007258:	4625      	mov	r5, r4
 800725a:	e7e0      	b.n	800721e <__gethex+0x92>
 800725c:	2d00      	cmp	r5, #0
 800725e:	d1f7      	bne.n	8007250 <__gethex+0xc4>
 8007260:	7833      	ldrb	r3, [r6, #0]
 8007262:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007266:	2b50      	cmp	r3, #80	; 0x50
 8007268:	d13b      	bne.n	80072e2 <__gethex+0x156>
 800726a:	7873      	ldrb	r3, [r6, #1]
 800726c:	2b2b      	cmp	r3, #43	; 0x2b
 800726e:	d02c      	beq.n	80072ca <__gethex+0x13e>
 8007270:	2b2d      	cmp	r3, #45	; 0x2d
 8007272:	d02e      	beq.n	80072d2 <__gethex+0x146>
 8007274:	1c71      	adds	r1, r6, #1
 8007276:	f04f 0900 	mov.w	r9, #0
 800727a:	7808      	ldrb	r0, [r1, #0]
 800727c:	f7ff ff70 	bl	8007160 <__hexdig_fun>
 8007280:	1e43      	subs	r3, r0, #1
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b18      	cmp	r3, #24
 8007286:	d82c      	bhi.n	80072e2 <__gethex+0x156>
 8007288:	f1a0 0210 	sub.w	r2, r0, #16
 800728c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007290:	f7ff ff66 	bl	8007160 <__hexdig_fun>
 8007294:	1e43      	subs	r3, r0, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b18      	cmp	r3, #24
 800729a:	d91d      	bls.n	80072d8 <__gethex+0x14c>
 800729c:	f1b9 0f00 	cmp.w	r9, #0
 80072a0:	d000      	beq.n	80072a4 <__gethex+0x118>
 80072a2:	4252      	negs	r2, r2
 80072a4:	4415      	add	r5, r2
 80072a6:	f8cb 1000 	str.w	r1, [fp]
 80072aa:	b1e4      	cbz	r4, 80072e6 <__gethex+0x15a>
 80072ac:	9b00      	ldr	r3, [sp, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bf14      	ite	ne
 80072b2:	2700      	movne	r7, #0
 80072b4:	2706      	moveq	r7, #6
 80072b6:	4638      	mov	r0, r7
 80072b8:	b009      	add	sp, #36	; 0x24
 80072ba:	ecbd 8b02 	vpop	{d8}
 80072be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c2:	463e      	mov	r6, r7
 80072c4:	4625      	mov	r5, r4
 80072c6:	2401      	movs	r4, #1
 80072c8:	e7ca      	b.n	8007260 <__gethex+0xd4>
 80072ca:	f04f 0900 	mov.w	r9, #0
 80072ce:	1cb1      	adds	r1, r6, #2
 80072d0:	e7d3      	b.n	800727a <__gethex+0xee>
 80072d2:	f04f 0901 	mov.w	r9, #1
 80072d6:	e7fa      	b.n	80072ce <__gethex+0x142>
 80072d8:	230a      	movs	r3, #10
 80072da:	fb03 0202 	mla	r2, r3, r2, r0
 80072de:	3a10      	subs	r2, #16
 80072e0:	e7d4      	b.n	800728c <__gethex+0x100>
 80072e2:	4631      	mov	r1, r6
 80072e4:	e7df      	b.n	80072a6 <__gethex+0x11a>
 80072e6:	1bf3      	subs	r3, r6, r7
 80072e8:	3b01      	subs	r3, #1
 80072ea:	4621      	mov	r1, r4
 80072ec:	2b07      	cmp	r3, #7
 80072ee:	dc0b      	bgt.n	8007308 <__gethex+0x17c>
 80072f0:	ee18 0a10 	vmov	r0, s16
 80072f4:	f000 fa70 	bl	80077d8 <_Balloc>
 80072f8:	4604      	mov	r4, r0
 80072fa:	b940      	cbnz	r0, 800730e <__gethex+0x182>
 80072fc:	4b5d      	ldr	r3, [pc, #372]	; (8007474 <__gethex+0x2e8>)
 80072fe:	4602      	mov	r2, r0
 8007300:	21de      	movs	r1, #222	; 0xde
 8007302:	485d      	ldr	r0, [pc, #372]	; (8007478 <__gethex+0x2ec>)
 8007304:	f001 f9b6 	bl	8008674 <__assert_func>
 8007308:	3101      	adds	r1, #1
 800730a:	105b      	asrs	r3, r3, #1
 800730c:	e7ee      	b.n	80072ec <__gethex+0x160>
 800730e:	f100 0914 	add.w	r9, r0, #20
 8007312:	f04f 0b00 	mov.w	fp, #0
 8007316:	f1ca 0301 	rsb	r3, sl, #1
 800731a:	f8cd 9008 	str.w	r9, [sp, #8]
 800731e:	f8cd b000 	str.w	fp, [sp]
 8007322:	9306      	str	r3, [sp, #24]
 8007324:	42b7      	cmp	r7, r6
 8007326:	d340      	bcc.n	80073aa <__gethex+0x21e>
 8007328:	9802      	ldr	r0, [sp, #8]
 800732a:	9b00      	ldr	r3, [sp, #0]
 800732c:	f840 3b04 	str.w	r3, [r0], #4
 8007330:	eba0 0009 	sub.w	r0, r0, r9
 8007334:	1080      	asrs	r0, r0, #2
 8007336:	0146      	lsls	r6, r0, #5
 8007338:	6120      	str	r0, [r4, #16]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fb3e 	bl	80079bc <__hi0bits>
 8007340:	1a30      	subs	r0, r6, r0
 8007342:	f8d8 6000 	ldr.w	r6, [r8]
 8007346:	42b0      	cmp	r0, r6
 8007348:	dd63      	ble.n	8007412 <__gethex+0x286>
 800734a:	1b87      	subs	r7, r0, r6
 800734c:	4639      	mov	r1, r7
 800734e:	4620      	mov	r0, r4
 8007350:	f000 fee2 	bl	8008118 <__any_on>
 8007354:	4682      	mov	sl, r0
 8007356:	b1a8      	cbz	r0, 8007384 <__gethex+0x1f8>
 8007358:	1e7b      	subs	r3, r7, #1
 800735a:	1159      	asrs	r1, r3, #5
 800735c:	f003 021f 	and.w	r2, r3, #31
 8007360:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007364:	f04f 0a01 	mov.w	sl, #1
 8007368:	fa0a f202 	lsl.w	r2, sl, r2
 800736c:	420a      	tst	r2, r1
 800736e:	d009      	beq.n	8007384 <__gethex+0x1f8>
 8007370:	4553      	cmp	r3, sl
 8007372:	dd05      	ble.n	8007380 <__gethex+0x1f4>
 8007374:	1eb9      	subs	r1, r7, #2
 8007376:	4620      	mov	r0, r4
 8007378:	f000 fece 	bl	8008118 <__any_on>
 800737c:	2800      	cmp	r0, #0
 800737e:	d145      	bne.n	800740c <__gethex+0x280>
 8007380:	f04f 0a02 	mov.w	sl, #2
 8007384:	4639      	mov	r1, r7
 8007386:	4620      	mov	r0, r4
 8007388:	f7ff fe98 	bl	80070bc <rshift>
 800738c:	443d      	add	r5, r7
 800738e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007392:	42ab      	cmp	r3, r5
 8007394:	da4c      	bge.n	8007430 <__gethex+0x2a4>
 8007396:	ee18 0a10 	vmov	r0, s16
 800739a:	4621      	mov	r1, r4
 800739c:	f000 fa5c 	bl	8007858 <_Bfree>
 80073a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073a2:	2300      	movs	r3, #0
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	27a3      	movs	r7, #163	; 0xa3
 80073a8:	e785      	b.n	80072b6 <__gethex+0x12a>
 80073aa:	1e73      	subs	r3, r6, #1
 80073ac:	9a05      	ldr	r2, [sp, #20]
 80073ae:	9303      	str	r3, [sp, #12]
 80073b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d019      	beq.n	80073ec <__gethex+0x260>
 80073b8:	f1bb 0f20 	cmp.w	fp, #32
 80073bc:	d107      	bne.n	80073ce <__gethex+0x242>
 80073be:	9b02      	ldr	r3, [sp, #8]
 80073c0:	9a00      	ldr	r2, [sp, #0]
 80073c2:	f843 2b04 	str.w	r2, [r3], #4
 80073c6:	9302      	str	r3, [sp, #8]
 80073c8:	2300      	movs	r3, #0
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	469b      	mov	fp, r3
 80073ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80073d2:	f7ff fec5 	bl	8007160 <__hexdig_fun>
 80073d6:	9b00      	ldr	r3, [sp, #0]
 80073d8:	f000 000f 	and.w	r0, r0, #15
 80073dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80073e0:	4303      	orrs	r3, r0
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	f10b 0b04 	add.w	fp, fp, #4
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	e00d      	b.n	8007408 <__gethex+0x27c>
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	9a06      	ldr	r2, [sp, #24]
 80073f0:	4413      	add	r3, r2
 80073f2:	42bb      	cmp	r3, r7
 80073f4:	d3e0      	bcc.n	80073b8 <__gethex+0x22c>
 80073f6:	4618      	mov	r0, r3
 80073f8:	9901      	ldr	r1, [sp, #4]
 80073fa:	9307      	str	r3, [sp, #28]
 80073fc:	4652      	mov	r2, sl
 80073fe:	f001 f917 	bl	8008630 <strncmp>
 8007402:	9b07      	ldr	r3, [sp, #28]
 8007404:	2800      	cmp	r0, #0
 8007406:	d1d7      	bne.n	80073b8 <__gethex+0x22c>
 8007408:	461e      	mov	r6, r3
 800740a:	e78b      	b.n	8007324 <__gethex+0x198>
 800740c:	f04f 0a03 	mov.w	sl, #3
 8007410:	e7b8      	b.n	8007384 <__gethex+0x1f8>
 8007412:	da0a      	bge.n	800742a <__gethex+0x29e>
 8007414:	1a37      	subs	r7, r6, r0
 8007416:	4621      	mov	r1, r4
 8007418:	ee18 0a10 	vmov	r0, s16
 800741c:	463a      	mov	r2, r7
 800741e:	f000 fc37 	bl	8007c90 <__lshift>
 8007422:	1bed      	subs	r5, r5, r7
 8007424:	4604      	mov	r4, r0
 8007426:	f100 0914 	add.w	r9, r0, #20
 800742a:	f04f 0a00 	mov.w	sl, #0
 800742e:	e7ae      	b.n	800738e <__gethex+0x202>
 8007430:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007434:	42a8      	cmp	r0, r5
 8007436:	dd72      	ble.n	800751e <__gethex+0x392>
 8007438:	1b45      	subs	r5, r0, r5
 800743a:	42ae      	cmp	r6, r5
 800743c:	dc36      	bgt.n	80074ac <__gethex+0x320>
 800743e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d02a      	beq.n	800749c <__gethex+0x310>
 8007446:	2b03      	cmp	r3, #3
 8007448:	d02c      	beq.n	80074a4 <__gethex+0x318>
 800744a:	2b01      	cmp	r3, #1
 800744c:	d11c      	bne.n	8007488 <__gethex+0x2fc>
 800744e:	42ae      	cmp	r6, r5
 8007450:	d11a      	bne.n	8007488 <__gethex+0x2fc>
 8007452:	2e01      	cmp	r6, #1
 8007454:	d112      	bne.n	800747c <__gethex+0x2f0>
 8007456:	9a04      	ldr	r2, [sp, #16]
 8007458:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	2301      	movs	r3, #1
 8007460:	6123      	str	r3, [r4, #16]
 8007462:	f8c9 3000 	str.w	r3, [r9]
 8007466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007468:	2762      	movs	r7, #98	; 0x62
 800746a:	601c      	str	r4, [r3, #0]
 800746c:	e723      	b.n	80072b6 <__gethex+0x12a>
 800746e:	bf00      	nop
 8007470:	0800a1f0 	.word	0x0800a1f0
 8007474:	0800a178 	.word	0x0800a178
 8007478:	0800a189 	.word	0x0800a189
 800747c:	1e71      	subs	r1, r6, #1
 800747e:	4620      	mov	r0, r4
 8007480:	f000 fe4a 	bl	8008118 <__any_on>
 8007484:	2800      	cmp	r0, #0
 8007486:	d1e6      	bne.n	8007456 <__gethex+0x2ca>
 8007488:	ee18 0a10 	vmov	r0, s16
 800748c:	4621      	mov	r1, r4
 800748e:	f000 f9e3 	bl	8007858 <_Bfree>
 8007492:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007494:	2300      	movs	r3, #0
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	2750      	movs	r7, #80	; 0x50
 800749a:	e70c      	b.n	80072b6 <__gethex+0x12a>
 800749c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f2      	bne.n	8007488 <__gethex+0x2fc>
 80074a2:	e7d8      	b.n	8007456 <__gethex+0x2ca>
 80074a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1d5      	bne.n	8007456 <__gethex+0x2ca>
 80074aa:	e7ed      	b.n	8007488 <__gethex+0x2fc>
 80074ac:	1e6f      	subs	r7, r5, #1
 80074ae:	f1ba 0f00 	cmp.w	sl, #0
 80074b2:	d131      	bne.n	8007518 <__gethex+0x38c>
 80074b4:	b127      	cbz	r7, 80074c0 <__gethex+0x334>
 80074b6:	4639      	mov	r1, r7
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 fe2d 	bl	8008118 <__any_on>
 80074be:	4682      	mov	sl, r0
 80074c0:	117b      	asrs	r3, r7, #5
 80074c2:	2101      	movs	r1, #1
 80074c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80074c8:	f007 071f 	and.w	r7, r7, #31
 80074cc:	fa01 f707 	lsl.w	r7, r1, r7
 80074d0:	421f      	tst	r7, r3
 80074d2:	4629      	mov	r1, r5
 80074d4:	4620      	mov	r0, r4
 80074d6:	bf18      	it	ne
 80074d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80074dc:	1b76      	subs	r6, r6, r5
 80074de:	f7ff fded 	bl	80070bc <rshift>
 80074e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80074e6:	2702      	movs	r7, #2
 80074e8:	f1ba 0f00 	cmp.w	sl, #0
 80074ec:	d048      	beq.n	8007580 <__gethex+0x3f4>
 80074ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d015      	beq.n	8007522 <__gethex+0x396>
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d017      	beq.n	800752a <__gethex+0x39e>
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d109      	bne.n	8007512 <__gethex+0x386>
 80074fe:	f01a 0f02 	tst.w	sl, #2
 8007502:	d006      	beq.n	8007512 <__gethex+0x386>
 8007504:	f8d9 0000 	ldr.w	r0, [r9]
 8007508:	ea4a 0a00 	orr.w	sl, sl, r0
 800750c:	f01a 0f01 	tst.w	sl, #1
 8007510:	d10e      	bne.n	8007530 <__gethex+0x3a4>
 8007512:	f047 0710 	orr.w	r7, r7, #16
 8007516:	e033      	b.n	8007580 <__gethex+0x3f4>
 8007518:	f04f 0a01 	mov.w	sl, #1
 800751c:	e7d0      	b.n	80074c0 <__gethex+0x334>
 800751e:	2701      	movs	r7, #1
 8007520:	e7e2      	b.n	80074e8 <__gethex+0x35c>
 8007522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007524:	f1c3 0301 	rsb	r3, r3, #1
 8007528:	9315      	str	r3, [sp, #84]	; 0x54
 800752a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0f0      	beq.n	8007512 <__gethex+0x386>
 8007530:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007534:	f104 0314 	add.w	r3, r4, #20
 8007538:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800753c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007540:	f04f 0c00 	mov.w	ip, #0
 8007544:	4618      	mov	r0, r3
 8007546:	f853 2b04 	ldr.w	r2, [r3], #4
 800754a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800754e:	d01c      	beq.n	800758a <__gethex+0x3fe>
 8007550:	3201      	adds	r2, #1
 8007552:	6002      	str	r2, [r0, #0]
 8007554:	2f02      	cmp	r7, #2
 8007556:	f104 0314 	add.w	r3, r4, #20
 800755a:	d13f      	bne.n	80075dc <__gethex+0x450>
 800755c:	f8d8 2000 	ldr.w	r2, [r8]
 8007560:	3a01      	subs	r2, #1
 8007562:	42b2      	cmp	r2, r6
 8007564:	d10a      	bne.n	800757c <__gethex+0x3f0>
 8007566:	1171      	asrs	r1, r6, #5
 8007568:	2201      	movs	r2, #1
 800756a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800756e:	f006 061f 	and.w	r6, r6, #31
 8007572:	fa02 f606 	lsl.w	r6, r2, r6
 8007576:	421e      	tst	r6, r3
 8007578:	bf18      	it	ne
 800757a:	4617      	movne	r7, r2
 800757c:	f047 0720 	orr.w	r7, r7, #32
 8007580:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007582:	601c      	str	r4, [r3, #0]
 8007584:	9b04      	ldr	r3, [sp, #16]
 8007586:	601d      	str	r5, [r3, #0]
 8007588:	e695      	b.n	80072b6 <__gethex+0x12a>
 800758a:	4299      	cmp	r1, r3
 800758c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007590:	d8d8      	bhi.n	8007544 <__gethex+0x3b8>
 8007592:	68a3      	ldr	r3, [r4, #8]
 8007594:	459b      	cmp	fp, r3
 8007596:	db19      	blt.n	80075cc <__gethex+0x440>
 8007598:	6861      	ldr	r1, [r4, #4]
 800759a:	ee18 0a10 	vmov	r0, s16
 800759e:	3101      	adds	r1, #1
 80075a0:	f000 f91a 	bl	80077d8 <_Balloc>
 80075a4:	4681      	mov	r9, r0
 80075a6:	b918      	cbnz	r0, 80075b0 <__gethex+0x424>
 80075a8:	4b1a      	ldr	r3, [pc, #104]	; (8007614 <__gethex+0x488>)
 80075aa:	4602      	mov	r2, r0
 80075ac:	2184      	movs	r1, #132	; 0x84
 80075ae:	e6a8      	b.n	8007302 <__gethex+0x176>
 80075b0:	6922      	ldr	r2, [r4, #16]
 80075b2:	3202      	adds	r2, #2
 80075b4:	f104 010c 	add.w	r1, r4, #12
 80075b8:	0092      	lsls	r2, r2, #2
 80075ba:	300c      	adds	r0, #12
 80075bc:	f7fd f96e 	bl	800489c <memcpy>
 80075c0:	4621      	mov	r1, r4
 80075c2:	ee18 0a10 	vmov	r0, s16
 80075c6:	f000 f947 	bl	8007858 <_Bfree>
 80075ca:	464c      	mov	r4, r9
 80075cc:	6923      	ldr	r3, [r4, #16]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075d4:	6122      	str	r2, [r4, #16]
 80075d6:	2201      	movs	r2, #1
 80075d8:	615a      	str	r2, [r3, #20]
 80075da:	e7bb      	b.n	8007554 <__gethex+0x3c8>
 80075dc:	6922      	ldr	r2, [r4, #16]
 80075de:	455a      	cmp	r2, fp
 80075e0:	dd0b      	ble.n	80075fa <__gethex+0x46e>
 80075e2:	2101      	movs	r1, #1
 80075e4:	4620      	mov	r0, r4
 80075e6:	f7ff fd69 	bl	80070bc <rshift>
 80075ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075ee:	3501      	adds	r5, #1
 80075f0:	42ab      	cmp	r3, r5
 80075f2:	f6ff aed0 	blt.w	8007396 <__gethex+0x20a>
 80075f6:	2701      	movs	r7, #1
 80075f8:	e7c0      	b.n	800757c <__gethex+0x3f0>
 80075fa:	f016 061f 	ands.w	r6, r6, #31
 80075fe:	d0fa      	beq.n	80075f6 <__gethex+0x46a>
 8007600:	4453      	add	r3, sl
 8007602:	f1c6 0620 	rsb	r6, r6, #32
 8007606:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800760a:	f000 f9d7 	bl	80079bc <__hi0bits>
 800760e:	42b0      	cmp	r0, r6
 8007610:	dbe7      	blt.n	80075e2 <__gethex+0x456>
 8007612:	e7f0      	b.n	80075f6 <__gethex+0x46a>
 8007614:	0800a178 	.word	0x0800a178

08007618 <L_shift>:
 8007618:	f1c2 0208 	rsb	r2, r2, #8
 800761c:	0092      	lsls	r2, r2, #2
 800761e:	b570      	push	{r4, r5, r6, lr}
 8007620:	f1c2 0620 	rsb	r6, r2, #32
 8007624:	6843      	ldr	r3, [r0, #4]
 8007626:	6804      	ldr	r4, [r0, #0]
 8007628:	fa03 f506 	lsl.w	r5, r3, r6
 800762c:	432c      	orrs	r4, r5
 800762e:	40d3      	lsrs	r3, r2
 8007630:	6004      	str	r4, [r0, #0]
 8007632:	f840 3f04 	str.w	r3, [r0, #4]!
 8007636:	4288      	cmp	r0, r1
 8007638:	d3f4      	bcc.n	8007624 <L_shift+0xc>
 800763a:	bd70      	pop	{r4, r5, r6, pc}

0800763c <__match>:
 800763c:	b530      	push	{r4, r5, lr}
 800763e:	6803      	ldr	r3, [r0, #0]
 8007640:	3301      	adds	r3, #1
 8007642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007646:	b914      	cbnz	r4, 800764e <__match+0x12>
 8007648:	6003      	str	r3, [r0, #0]
 800764a:	2001      	movs	r0, #1
 800764c:	bd30      	pop	{r4, r5, pc}
 800764e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007652:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007656:	2d19      	cmp	r5, #25
 8007658:	bf98      	it	ls
 800765a:	3220      	addls	r2, #32
 800765c:	42a2      	cmp	r2, r4
 800765e:	d0f0      	beq.n	8007642 <__match+0x6>
 8007660:	2000      	movs	r0, #0
 8007662:	e7f3      	b.n	800764c <__match+0x10>

08007664 <__hexnan>:
 8007664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	680b      	ldr	r3, [r1, #0]
 800766a:	115e      	asrs	r6, r3, #5
 800766c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007670:	f013 031f 	ands.w	r3, r3, #31
 8007674:	b087      	sub	sp, #28
 8007676:	bf18      	it	ne
 8007678:	3604      	addne	r6, #4
 800767a:	2500      	movs	r5, #0
 800767c:	1f37      	subs	r7, r6, #4
 800767e:	4690      	mov	r8, r2
 8007680:	6802      	ldr	r2, [r0, #0]
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	4682      	mov	sl, r0
 8007686:	f846 5c04 	str.w	r5, [r6, #-4]
 800768a:	46b9      	mov	r9, r7
 800768c:	463c      	mov	r4, r7
 800768e:	9502      	str	r5, [sp, #8]
 8007690:	46ab      	mov	fp, r5
 8007692:	7851      	ldrb	r1, [r2, #1]
 8007694:	1c53      	adds	r3, r2, #1
 8007696:	9303      	str	r3, [sp, #12]
 8007698:	b341      	cbz	r1, 80076ec <__hexnan+0x88>
 800769a:	4608      	mov	r0, r1
 800769c:	9205      	str	r2, [sp, #20]
 800769e:	9104      	str	r1, [sp, #16]
 80076a0:	f7ff fd5e 	bl	8007160 <__hexdig_fun>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d14f      	bne.n	8007748 <__hexnan+0xe4>
 80076a8:	9904      	ldr	r1, [sp, #16]
 80076aa:	9a05      	ldr	r2, [sp, #20]
 80076ac:	2920      	cmp	r1, #32
 80076ae:	d818      	bhi.n	80076e2 <__hexnan+0x7e>
 80076b0:	9b02      	ldr	r3, [sp, #8]
 80076b2:	459b      	cmp	fp, r3
 80076b4:	dd13      	ble.n	80076de <__hexnan+0x7a>
 80076b6:	454c      	cmp	r4, r9
 80076b8:	d206      	bcs.n	80076c8 <__hexnan+0x64>
 80076ba:	2d07      	cmp	r5, #7
 80076bc:	dc04      	bgt.n	80076c8 <__hexnan+0x64>
 80076be:	462a      	mov	r2, r5
 80076c0:	4649      	mov	r1, r9
 80076c2:	4620      	mov	r0, r4
 80076c4:	f7ff ffa8 	bl	8007618 <L_shift>
 80076c8:	4544      	cmp	r4, r8
 80076ca:	d950      	bls.n	800776e <__hexnan+0x10a>
 80076cc:	2300      	movs	r3, #0
 80076ce:	f1a4 0904 	sub.w	r9, r4, #4
 80076d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80076d6:	f8cd b008 	str.w	fp, [sp, #8]
 80076da:	464c      	mov	r4, r9
 80076dc:	461d      	mov	r5, r3
 80076de:	9a03      	ldr	r2, [sp, #12]
 80076e0:	e7d7      	b.n	8007692 <__hexnan+0x2e>
 80076e2:	2929      	cmp	r1, #41	; 0x29
 80076e4:	d156      	bne.n	8007794 <__hexnan+0x130>
 80076e6:	3202      	adds	r2, #2
 80076e8:	f8ca 2000 	str.w	r2, [sl]
 80076ec:	f1bb 0f00 	cmp.w	fp, #0
 80076f0:	d050      	beq.n	8007794 <__hexnan+0x130>
 80076f2:	454c      	cmp	r4, r9
 80076f4:	d206      	bcs.n	8007704 <__hexnan+0xa0>
 80076f6:	2d07      	cmp	r5, #7
 80076f8:	dc04      	bgt.n	8007704 <__hexnan+0xa0>
 80076fa:	462a      	mov	r2, r5
 80076fc:	4649      	mov	r1, r9
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff ff8a 	bl	8007618 <L_shift>
 8007704:	4544      	cmp	r4, r8
 8007706:	d934      	bls.n	8007772 <__hexnan+0x10e>
 8007708:	f1a8 0204 	sub.w	r2, r8, #4
 800770c:	4623      	mov	r3, r4
 800770e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007712:	f842 1f04 	str.w	r1, [r2, #4]!
 8007716:	429f      	cmp	r7, r3
 8007718:	d2f9      	bcs.n	800770e <__hexnan+0xaa>
 800771a:	1b3b      	subs	r3, r7, r4
 800771c:	f023 0303 	bic.w	r3, r3, #3
 8007720:	3304      	adds	r3, #4
 8007722:	3401      	adds	r4, #1
 8007724:	3e03      	subs	r6, #3
 8007726:	42b4      	cmp	r4, r6
 8007728:	bf88      	it	hi
 800772a:	2304      	movhi	r3, #4
 800772c:	4443      	add	r3, r8
 800772e:	2200      	movs	r2, #0
 8007730:	f843 2b04 	str.w	r2, [r3], #4
 8007734:	429f      	cmp	r7, r3
 8007736:	d2fb      	bcs.n	8007730 <__hexnan+0xcc>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	b91b      	cbnz	r3, 8007744 <__hexnan+0xe0>
 800773c:	4547      	cmp	r7, r8
 800773e:	d127      	bne.n	8007790 <__hexnan+0x12c>
 8007740:	2301      	movs	r3, #1
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	2005      	movs	r0, #5
 8007746:	e026      	b.n	8007796 <__hexnan+0x132>
 8007748:	3501      	adds	r5, #1
 800774a:	2d08      	cmp	r5, #8
 800774c:	f10b 0b01 	add.w	fp, fp, #1
 8007750:	dd06      	ble.n	8007760 <__hexnan+0xfc>
 8007752:	4544      	cmp	r4, r8
 8007754:	d9c3      	bls.n	80076de <__hexnan+0x7a>
 8007756:	2300      	movs	r3, #0
 8007758:	f844 3c04 	str.w	r3, [r4, #-4]
 800775c:	2501      	movs	r5, #1
 800775e:	3c04      	subs	r4, #4
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	f000 000f 	and.w	r0, r0, #15
 8007766:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800776a:	6022      	str	r2, [r4, #0]
 800776c:	e7b7      	b.n	80076de <__hexnan+0x7a>
 800776e:	2508      	movs	r5, #8
 8007770:	e7b5      	b.n	80076de <__hexnan+0x7a>
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0df      	beq.n	8007738 <__hexnan+0xd4>
 8007778:	f04f 32ff 	mov.w	r2, #4294967295
 800777c:	f1c3 0320 	rsb	r3, r3, #32
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
 8007784:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007788:	401a      	ands	r2, r3
 800778a:	f846 2c04 	str.w	r2, [r6, #-4]
 800778e:	e7d3      	b.n	8007738 <__hexnan+0xd4>
 8007790:	3f04      	subs	r7, #4
 8007792:	e7d1      	b.n	8007738 <__hexnan+0xd4>
 8007794:	2004      	movs	r0, #4
 8007796:	b007      	add	sp, #28
 8007798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800779c <_localeconv_r>:
 800779c:	4800      	ldr	r0, [pc, #0]	; (80077a0 <_localeconv_r+0x4>)
 800779e:	4770      	bx	lr
 80077a0:	20000168 	.word	0x20000168

080077a4 <malloc>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <malloc+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f000 bd59 	b.w	8008260 <_malloc_r>
 80077ae:	bf00      	nop
 80077b0:	20000010 	.word	0x20000010

080077b4 <__ascii_mbtowc>:
 80077b4:	b082      	sub	sp, #8
 80077b6:	b901      	cbnz	r1, 80077ba <__ascii_mbtowc+0x6>
 80077b8:	a901      	add	r1, sp, #4
 80077ba:	b142      	cbz	r2, 80077ce <__ascii_mbtowc+0x1a>
 80077bc:	b14b      	cbz	r3, 80077d2 <__ascii_mbtowc+0x1e>
 80077be:	7813      	ldrb	r3, [r2, #0]
 80077c0:	600b      	str	r3, [r1, #0]
 80077c2:	7812      	ldrb	r2, [r2, #0]
 80077c4:	1e10      	subs	r0, r2, #0
 80077c6:	bf18      	it	ne
 80077c8:	2001      	movne	r0, #1
 80077ca:	b002      	add	sp, #8
 80077cc:	4770      	bx	lr
 80077ce:	4610      	mov	r0, r2
 80077d0:	e7fb      	b.n	80077ca <__ascii_mbtowc+0x16>
 80077d2:	f06f 0001 	mvn.w	r0, #1
 80077d6:	e7f8      	b.n	80077ca <__ascii_mbtowc+0x16>

080077d8 <_Balloc>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	b976      	cbnz	r6, 8007800 <_Balloc+0x28>
 80077e2:	2010      	movs	r0, #16
 80077e4:	f7ff ffde 	bl	80077a4 <malloc>
 80077e8:	4602      	mov	r2, r0
 80077ea:	6260      	str	r0, [r4, #36]	; 0x24
 80077ec:	b920      	cbnz	r0, 80077f8 <_Balloc+0x20>
 80077ee:	4b18      	ldr	r3, [pc, #96]	; (8007850 <_Balloc+0x78>)
 80077f0:	4818      	ldr	r0, [pc, #96]	; (8007854 <_Balloc+0x7c>)
 80077f2:	2166      	movs	r1, #102	; 0x66
 80077f4:	f000 ff3e 	bl	8008674 <__assert_func>
 80077f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077fc:	6006      	str	r6, [r0, #0]
 80077fe:	60c6      	str	r6, [r0, #12]
 8007800:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007802:	68f3      	ldr	r3, [r6, #12]
 8007804:	b183      	cbz	r3, 8007828 <_Balloc+0x50>
 8007806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800780e:	b9b8      	cbnz	r0, 8007840 <_Balloc+0x68>
 8007810:	2101      	movs	r1, #1
 8007812:	fa01 f605 	lsl.w	r6, r1, r5
 8007816:	1d72      	adds	r2, r6, #5
 8007818:	0092      	lsls	r2, r2, #2
 800781a:	4620      	mov	r0, r4
 800781c:	f000 fc9d 	bl	800815a <_calloc_r>
 8007820:	b160      	cbz	r0, 800783c <_Balloc+0x64>
 8007822:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007826:	e00e      	b.n	8007846 <_Balloc+0x6e>
 8007828:	2221      	movs	r2, #33	; 0x21
 800782a:	2104      	movs	r1, #4
 800782c:	4620      	mov	r0, r4
 800782e:	f000 fc94 	bl	800815a <_calloc_r>
 8007832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007834:	60f0      	str	r0, [r6, #12]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e4      	bne.n	8007806 <_Balloc+0x2e>
 800783c:	2000      	movs	r0, #0
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	6802      	ldr	r2, [r0, #0]
 8007842:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007846:	2300      	movs	r3, #0
 8007848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800784c:	e7f7      	b.n	800783e <_Balloc+0x66>
 800784e:	bf00      	nop
 8007850:	0800a106 	.word	0x0800a106
 8007854:	0800a204 	.word	0x0800a204

08007858 <_Bfree>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800785c:	4605      	mov	r5, r0
 800785e:	460c      	mov	r4, r1
 8007860:	b976      	cbnz	r6, 8007880 <_Bfree+0x28>
 8007862:	2010      	movs	r0, #16
 8007864:	f7ff ff9e 	bl	80077a4 <malloc>
 8007868:	4602      	mov	r2, r0
 800786a:	6268      	str	r0, [r5, #36]	; 0x24
 800786c:	b920      	cbnz	r0, 8007878 <_Bfree+0x20>
 800786e:	4b09      	ldr	r3, [pc, #36]	; (8007894 <_Bfree+0x3c>)
 8007870:	4809      	ldr	r0, [pc, #36]	; (8007898 <_Bfree+0x40>)
 8007872:	218a      	movs	r1, #138	; 0x8a
 8007874:	f000 fefe 	bl	8008674 <__assert_func>
 8007878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800787c:	6006      	str	r6, [r0, #0]
 800787e:	60c6      	str	r6, [r0, #12]
 8007880:	b13c      	cbz	r4, 8007892 <_Bfree+0x3a>
 8007882:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007884:	6862      	ldr	r2, [r4, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800788c:	6021      	str	r1, [r4, #0]
 800788e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	0800a106 	.word	0x0800a106
 8007898:	0800a204 	.word	0x0800a204

0800789c <__multadd>:
 800789c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a0:	690d      	ldr	r5, [r1, #16]
 80078a2:	4607      	mov	r7, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	461e      	mov	r6, r3
 80078a8:	f101 0c14 	add.w	ip, r1, #20
 80078ac:	2000      	movs	r0, #0
 80078ae:	f8dc 3000 	ldr.w	r3, [ip]
 80078b2:	b299      	uxth	r1, r3
 80078b4:	fb02 6101 	mla	r1, r2, r1, r6
 80078b8:	0c1e      	lsrs	r6, r3, #16
 80078ba:	0c0b      	lsrs	r3, r1, #16
 80078bc:	fb02 3306 	mla	r3, r2, r6, r3
 80078c0:	b289      	uxth	r1, r1
 80078c2:	3001      	adds	r0, #1
 80078c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078c8:	4285      	cmp	r5, r0
 80078ca:	f84c 1b04 	str.w	r1, [ip], #4
 80078ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078d2:	dcec      	bgt.n	80078ae <__multadd+0x12>
 80078d4:	b30e      	cbz	r6, 800791a <__multadd+0x7e>
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc19      	bgt.n	8007910 <__multadd+0x74>
 80078dc:	6861      	ldr	r1, [r4, #4]
 80078de:	4638      	mov	r0, r7
 80078e0:	3101      	adds	r1, #1
 80078e2:	f7ff ff79 	bl	80077d8 <_Balloc>
 80078e6:	4680      	mov	r8, r0
 80078e8:	b928      	cbnz	r0, 80078f6 <__multadd+0x5a>
 80078ea:	4602      	mov	r2, r0
 80078ec:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <__multadd+0x84>)
 80078ee:	480d      	ldr	r0, [pc, #52]	; (8007924 <__multadd+0x88>)
 80078f0:	21b5      	movs	r1, #181	; 0xb5
 80078f2:	f000 febf 	bl	8008674 <__assert_func>
 80078f6:	6922      	ldr	r2, [r4, #16]
 80078f8:	3202      	adds	r2, #2
 80078fa:	f104 010c 	add.w	r1, r4, #12
 80078fe:	0092      	lsls	r2, r2, #2
 8007900:	300c      	adds	r0, #12
 8007902:	f7fc ffcb 	bl	800489c <memcpy>
 8007906:	4621      	mov	r1, r4
 8007908:	4638      	mov	r0, r7
 800790a:	f7ff ffa5 	bl	8007858 <_Bfree>
 800790e:	4644      	mov	r4, r8
 8007910:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007914:	3501      	adds	r5, #1
 8007916:	615e      	str	r6, [r3, #20]
 8007918:	6125      	str	r5, [r4, #16]
 800791a:	4620      	mov	r0, r4
 800791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007920:	0800a178 	.word	0x0800a178
 8007924:	0800a204 	.word	0x0800a204

08007928 <__s2b>:
 8007928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800792c:	460c      	mov	r4, r1
 800792e:	4615      	mov	r5, r2
 8007930:	461f      	mov	r7, r3
 8007932:	2209      	movs	r2, #9
 8007934:	3308      	adds	r3, #8
 8007936:	4606      	mov	r6, r0
 8007938:	fb93 f3f2 	sdiv	r3, r3, r2
 800793c:	2100      	movs	r1, #0
 800793e:	2201      	movs	r2, #1
 8007940:	429a      	cmp	r2, r3
 8007942:	db09      	blt.n	8007958 <__s2b+0x30>
 8007944:	4630      	mov	r0, r6
 8007946:	f7ff ff47 	bl	80077d8 <_Balloc>
 800794a:	b940      	cbnz	r0, 800795e <__s2b+0x36>
 800794c:	4602      	mov	r2, r0
 800794e:	4b19      	ldr	r3, [pc, #100]	; (80079b4 <__s2b+0x8c>)
 8007950:	4819      	ldr	r0, [pc, #100]	; (80079b8 <__s2b+0x90>)
 8007952:	21ce      	movs	r1, #206	; 0xce
 8007954:	f000 fe8e 	bl	8008674 <__assert_func>
 8007958:	0052      	lsls	r2, r2, #1
 800795a:	3101      	adds	r1, #1
 800795c:	e7f0      	b.n	8007940 <__s2b+0x18>
 800795e:	9b08      	ldr	r3, [sp, #32]
 8007960:	6143      	str	r3, [r0, #20]
 8007962:	2d09      	cmp	r5, #9
 8007964:	f04f 0301 	mov.w	r3, #1
 8007968:	6103      	str	r3, [r0, #16]
 800796a:	dd16      	ble.n	800799a <__s2b+0x72>
 800796c:	f104 0909 	add.w	r9, r4, #9
 8007970:	46c8      	mov	r8, r9
 8007972:	442c      	add	r4, r5
 8007974:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007978:	4601      	mov	r1, r0
 800797a:	3b30      	subs	r3, #48	; 0x30
 800797c:	220a      	movs	r2, #10
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff ff8c 	bl	800789c <__multadd>
 8007984:	45a0      	cmp	r8, r4
 8007986:	d1f5      	bne.n	8007974 <__s2b+0x4c>
 8007988:	f1a5 0408 	sub.w	r4, r5, #8
 800798c:	444c      	add	r4, r9
 800798e:	1b2d      	subs	r5, r5, r4
 8007990:	1963      	adds	r3, r4, r5
 8007992:	42bb      	cmp	r3, r7
 8007994:	db04      	blt.n	80079a0 <__s2b+0x78>
 8007996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799a:	340a      	adds	r4, #10
 800799c:	2509      	movs	r5, #9
 800799e:	e7f6      	b.n	800798e <__s2b+0x66>
 80079a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079a4:	4601      	mov	r1, r0
 80079a6:	3b30      	subs	r3, #48	; 0x30
 80079a8:	220a      	movs	r2, #10
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7ff ff76 	bl	800789c <__multadd>
 80079b0:	e7ee      	b.n	8007990 <__s2b+0x68>
 80079b2:	bf00      	nop
 80079b4:	0800a178 	.word	0x0800a178
 80079b8:	0800a204 	.word	0x0800a204

080079bc <__hi0bits>:
 80079bc:	0c03      	lsrs	r3, r0, #16
 80079be:	041b      	lsls	r3, r3, #16
 80079c0:	b9d3      	cbnz	r3, 80079f8 <__hi0bits+0x3c>
 80079c2:	0400      	lsls	r0, r0, #16
 80079c4:	2310      	movs	r3, #16
 80079c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079ca:	bf04      	itt	eq
 80079cc:	0200      	lsleq	r0, r0, #8
 80079ce:	3308      	addeq	r3, #8
 80079d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079d4:	bf04      	itt	eq
 80079d6:	0100      	lsleq	r0, r0, #4
 80079d8:	3304      	addeq	r3, #4
 80079da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079de:	bf04      	itt	eq
 80079e0:	0080      	lsleq	r0, r0, #2
 80079e2:	3302      	addeq	r3, #2
 80079e4:	2800      	cmp	r0, #0
 80079e6:	db05      	blt.n	80079f4 <__hi0bits+0x38>
 80079e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80079ec:	f103 0301 	add.w	r3, r3, #1
 80079f0:	bf08      	it	eq
 80079f2:	2320      	moveq	r3, #32
 80079f4:	4618      	mov	r0, r3
 80079f6:	4770      	bx	lr
 80079f8:	2300      	movs	r3, #0
 80079fa:	e7e4      	b.n	80079c6 <__hi0bits+0xa>

080079fc <__lo0bits>:
 80079fc:	6803      	ldr	r3, [r0, #0]
 80079fe:	f013 0207 	ands.w	r2, r3, #7
 8007a02:	4601      	mov	r1, r0
 8007a04:	d00b      	beq.n	8007a1e <__lo0bits+0x22>
 8007a06:	07da      	lsls	r2, r3, #31
 8007a08:	d423      	bmi.n	8007a52 <__lo0bits+0x56>
 8007a0a:	0798      	lsls	r0, r3, #30
 8007a0c:	bf49      	itett	mi
 8007a0e:	085b      	lsrmi	r3, r3, #1
 8007a10:	089b      	lsrpl	r3, r3, #2
 8007a12:	2001      	movmi	r0, #1
 8007a14:	600b      	strmi	r3, [r1, #0]
 8007a16:	bf5c      	itt	pl
 8007a18:	600b      	strpl	r3, [r1, #0]
 8007a1a:	2002      	movpl	r0, #2
 8007a1c:	4770      	bx	lr
 8007a1e:	b298      	uxth	r0, r3
 8007a20:	b9a8      	cbnz	r0, 8007a4e <__lo0bits+0x52>
 8007a22:	0c1b      	lsrs	r3, r3, #16
 8007a24:	2010      	movs	r0, #16
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	b90a      	cbnz	r2, 8007a2e <__lo0bits+0x32>
 8007a2a:	3008      	adds	r0, #8
 8007a2c:	0a1b      	lsrs	r3, r3, #8
 8007a2e:	071a      	lsls	r2, r3, #28
 8007a30:	bf04      	itt	eq
 8007a32:	091b      	lsreq	r3, r3, #4
 8007a34:	3004      	addeq	r0, #4
 8007a36:	079a      	lsls	r2, r3, #30
 8007a38:	bf04      	itt	eq
 8007a3a:	089b      	lsreq	r3, r3, #2
 8007a3c:	3002      	addeq	r0, #2
 8007a3e:	07da      	lsls	r2, r3, #31
 8007a40:	d403      	bmi.n	8007a4a <__lo0bits+0x4e>
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	f100 0001 	add.w	r0, r0, #1
 8007a48:	d005      	beq.n	8007a56 <__lo0bits+0x5a>
 8007a4a:	600b      	str	r3, [r1, #0]
 8007a4c:	4770      	bx	lr
 8007a4e:	4610      	mov	r0, r2
 8007a50:	e7e9      	b.n	8007a26 <__lo0bits+0x2a>
 8007a52:	2000      	movs	r0, #0
 8007a54:	4770      	bx	lr
 8007a56:	2020      	movs	r0, #32
 8007a58:	4770      	bx	lr
	...

08007a5c <__i2b>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	460c      	mov	r4, r1
 8007a60:	2101      	movs	r1, #1
 8007a62:	f7ff feb9 	bl	80077d8 <_Balloc>
 8007a66:	4602      	mov	r2, r0
 8007a68:	b928      	cbnz	r0, 8007a76 <__i2b+0x1a>
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <__i2b+0x24>)
 8007a6c:	4805      	ldr	r0, [pc, #20]	; (8007a84 <__i2b+0x28>)
 8007a6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a72:	f000 fdff 	bl	8008674 <__assert_func>
 8007a76:	2301      	movs	r3, #1
 8007a78:	6144      	str	r4, [r0, #20]
 8007a7a:	6103      	str	r3, [r0, #16]
 8007a7c:	bd10      	pop	{r4, pc}
 8007a7e:	bf00      	nop
 8007a80:	0800a178 	.word	0x0800a178
 8007a84:	0800a204 	.word	0x0800a204

08007a88 <__multiply>:
 8007a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	4691      	mov	r9, r2
 8007a8e:	690a      	ldr	r2, [r1, #16]
 8007a90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	bfb8      	it	lt
 8007a98:	460b      	movlt	r3, r1
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	bfbc      	itt	lt
 8007a9e:	464c      	movlt	r4, r9
 8007aa0:	4699      	movlt	r9, r3
 8007aa2:	6927      	ldr	r7, [r4, #16]
 8007aa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007aa8:	68a3      	ldr	r3, [r4, #8]
 8007aaa:	6861      	ldr	r1, [r4, #4]
 8007aac:	eb07 060a 	add.w	r6, r7, sl
 8007ab0:	42b3      	cmp	r3, r6
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	bfb8      	it	lt
 8007ab6:	3101      	addlt	r1, #1
 8007ab8:	f7ff fe8e 	bl	80077d8 <_Balloc>
 8007abc:	b930      	cbnz	r0, 8007acc <__multiply+0x44>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	4b44      	ldr	r3, [pc, #272]	; (8007bd4 <__multiply+0x14c>)
 8007ac2:	4845      	ldr	r0, [pc, #276]	; (8007bd8 <__multiply+0x150>)
 8007ac4:	f240 115d 	movw	r1, #349	; 0x15d
 8007ac8:	f000 fdd4 	bl	8008674 <__assert_func>
 8007acc:	f100 0514 	add.w	r5, r0, #20
 8007ad0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	4543      	cmp	r3, r8
 8007ada:	d321      	bcc.n	8007b20 <__multiply+0x98>
 8007adc:	f104 0314 	add.w	r3, r4, #20
 8007ae0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ae4:	f109 0314 	add.w	r3, r9, #20
 8007ae8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007aec:	9202      	str	r2, [sp, #8]
 8007aee:	1b3a      	subs	r2, r7, r4
 8007af0:	3a15      	subs	r2, #21
 8007af2:	f022 0203 	bic.w	r2, r2, #3
 8007af6:	3204      	adds	r2, #4
 8007af8:	f104 0115 	add.w	r1, r4, #21
 8007afc:	428f      	cmp	r7, r1
 8007afe:	bf38      	it	cc
 8007b00:	2204      	movcc	r2, #4
 8007b02:	9201      	str	r2, [sp, #4]
 8007b04:	9a02      	ldr	r2, [sp, #8]
 8007b06:	9303      	str	r3, [sp, #12]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d80c      	bhi.n	8007b26 <__multiply+0x9e>
 8007b0c:	2e00      	cmp	r6, #0
 8007b0e:	dd03      	ble.n	8007b18 <__multiply+0x90>
 8007b10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d05a      	beq.n	8007bce <__multiply+0x146>
 8007b18:	6106      	str	r6, [r0, #16]
 8007b1a:	b005      	add	sp, #20
 8007b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b20:	f843 2b04 	str.w	r2, [r3], #4
 8007b24:	e7d8      	b.n	8007ad8 <__multiply+0x50>
 8007b26:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b2a:	f1ba 0f00 	cmp.w	sl, #0
 8007b2e:	d024      	beq.n	8007b7a <__multiply+0xf2>
 8007b30:	f104 0e14 	add.w	lr, r4, #20
 8007b34:	46a9      	mov	r9, r5
 8007b36:	f04f 0c00 	mov.w	ip, #0
 8007b3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b3e:	f8d9 1000 	ldr.w	r1, [r9]
 8007b42:	fa1f fb82 	uxth.w	fp, r2
 8007b46:	b289      	uxth	r1, r1
 8007b48:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b50:	f8d9 2000 	ldr.w	r2, [r9]
 8007b54:	4461      	add	r1, ip
 8007b56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b62:	b289      	uxth	r1, r1
 8007b64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b68:	4577      	cmp	r7, lr
 8007b6a:	f849 1b04 	str.w	r1, [r9], #4
 8007b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b72:	d8e2      	bhi.n	8007b3a <__multiply+0xb2>
 8007b74:	9a01      	ldr	r2, [sp, #4]
 8007b76:	f845 c002 	str.w	ip, [r5, r2]
 8007b7a:	9a03      	ldr	r2, [sp, #12]
 8007b7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b80:	3304      	adds	r3, #4
 8007b82:	f1b9 0f00 	cmp.w	r9, #0
 8007b86:	d020      	beq.n	8007bca <__multiply+0x142>
 8007b88:	6829      	ldr	r1, [r5, #0]
 8007b8a:	f104 0c14 	add.w	ip, r4, #20
 8007b8e:	46ae      	mov	lr, r5
 8007b90:	f04f 0a00 	mov.w	sl, #0
 8007b94:	f8bc b000 	ldrh.w	fp, [ip]
 8007b98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b9c:	fb09 220b 	mla	r2, r9, fp, r2
 8007ba0:	4492      	add	sl, r2
 8007ba2:	b289      	uxth	r1, r1
 8007ba4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ba8:	f84e 1b04 	str.w	r1, [lr], #4
 8007bac:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007bb0:	f8be 1000 	ldrh.w	r1, [lr]
 8007bb4:	0c12      	lsrs	r2, r2, #16
 8007bb6:	fb09 1102 	mla	r1, r9, r2, r1
 8007bba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007bbe:	4567      	cmp	r7, ip
 8007bc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bc4:	d8e6      	bhi.n	8007b94 <__multiply+0x10c>
 8007bc6:	9a01      	ldr	r2, [sp, #4]
 8007bc8:	50a9      	str	r1, [r5, r2]
 8007bca:	3504      	adds	r5, #4
 8007bcc:	e79a      	b.n	8007b04 <__multiply+0x7c>
 8007bce:	3e01      	subs	r6, #1
 8007bd0:	e79c      	b.n	8007b0c <__multiply+0x84>
 8007bd2:	bf00      	nop
 8007bd4:	0800a178 	.word	0x0800a178
 8007bd8:	0800a204 	.word	0x0800a204

08007bdc <__pow5mult>:
 8007bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be0:	4615      	mov	r5, r2
 8007be2:	f012 0203 	ands.w	r2, r2, #3
 8007be6:	4606      	mov	r6, r0
 8007be8:	460f      	mov	r7, r1
 8007bea:	d007      	beq.n	8007bfc <__pow5mult+0x20>
 8007bec:	4c25      	ldr	r4, [pc, #148]	; (8007c84 <__pow5mult+0xa8>)
 8007bee:	3a01      	subs	r2, #1
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bf6:	f7ff fe51 	bl	800789c <__multadd>
 8007bfa:	4607      	mov	r7, r0
 8007bfc:	10ad      	asrs	r5, r5, #2
 8007bfe:	d03d      	beq.n	8007c7c <__pow5mult+0xa0>
 8007c00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c02:	b97c      	cbnz	r4, 8007c24 <__pow5mult+0x48>
 8007c04:	2010      	movs	r0, #16
 8007c06:	f7ff fdcd 	bl	80077a4 <malloc>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	6270      	str	r0, [r6, #36]	; 0x24
 8007c0e:	b928      	cbnz	r0, 8007c1c <__pow5mult+0x40>
 8007c10:	4b1d      	ldr	r3, [pc, #116]	; (8007c88 <__pow5mult+0xac>)
 8007c12:	481e      	ldr	r0, [pc, #120]	; (8007c8c <__pow5mult+0xb0>)
 8007c14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c18:	f000 fd2c 	bl	8008674 <__assert_func>
 8007c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c20:	6004      	str	r4, [r0, #0]
 8007c22:	60c4      	str	r4, [r0, #12]
 8007c24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c2c:	b94c      	cbnz	r4, 8007c42 <__pow5mult+0x66>
 8007c2e:	f240 2171 	movw	r1, #625	; 0x271
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7ff ff12 	bl	8007a5c <__i2b>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c3e:	4604      	mov	r4, r0
 8007c40:	6003      	str	r3, [r0, #0]
 8007c42:	f04f 0900 	mov.w	r9, #0
 8007c46:	07eb      	lsls	r3, r5, #31
 8007c48:	d50a      	bpl.n	8007c60 <__pow5mult+0x84>
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f7ff ff1a 	bl	8007a88 <__multiply>
 8007c54:	4639      	mov	r1, r7
 8007c56:	4680      	mov	r8, r0
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f7ff fdfd 	bl	8007858 <_Bfree>
 8007c5e:	4647      	mov	r7, r8
 8007c60:	106d      	asrs	r5, r5, #1
 8007c62:	d00b      	beq.n	8007c7c <__pow5mult+0xa0>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	b938      	cbnz	r0, 8007c78 <__pow5mult+0x9c>
 8007c68:	4622      	mov	r2, r4
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7ff ff0b 	bl	8007a88 <__multiply>
 8007c72:	6020      	str	r0, [r4, #0]
 8007c74:	f8c0 9000 	str.w	r9, [r0]
 8007c78:	4604      	mov	r4, r0
 8007c7a:	e7e4      	b.n	8007c46 <__pow5mult+0x6a>
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c82:	bf00      	nop
 8007c84:	0800a350 	.word	0x0800a350
 8007c88:	0800a106 	.word	0x0800a106
 8007c8c:	0800a204 	.word	0x0800a204

08007c90 <__lshift>:
 8007c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c94:	460c      	mov	r4, r1
 8007c96:	6849      	ldr	r1, [r1, #4]
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c9e:	68a3      	ldr	r3, [r4, #8]
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	4691      	mov	r9, r2
 8007ca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ca8:	f108 0601 	add.w	r6, r8, #1
 8007cac:	42b3      	cmp	r3, r6
 8007cae:	db0b      	blt.n	8007cc8 <__lshift+0x38>
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	f7ff fd91 	bl	80077d8 <_Balloc>
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	b948      	cbnz	r0, 8007cce <__lshift+0x3e>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	4b2a      	ldr	r3, [pc, #168]	; (8007d68 <__lshift+0xd8>)
 8007cbe:	482b      	ldr	r0, [pc, #172]	; (8007d6c <__lshift+0xdc>)
 8007cc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007cc4:	f000 fcd6 	bl	8008674 <__assert_func>
 8007cc8:	3101      	adds	r1, #1
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	e7ee      	b.n	8007cac <__lshift+0x1c>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f100 0114 	add.w	r1, r0, #20
 8007cd4:	f100 0210 	add.w	r2, r0, #16
 8007cd8:	4618      	mov	r0, r3
 8007cda:	4553      	cmp	r3, sl
 8007cdc:	db37      	blt.n	8007d4e <__lshift+0xbe>
 8007cde:	6920      	ldr	r0, [r4, #16]
 8007ce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ce4:	f104 0314 	add.w	r3, r4, #20
 8007ce8:	f019 091f 	ands.w	r9, r9, #31
 8007cec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cf0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007cf4:	d02f      	beq.n	8007d56 <__lshift+0xc6>
 8007cf6:	f1c9 0e20 	rsb	lr, r9, #32
 8007cfa:	468a      	mov	sl, r1
 8007cfc:	f04f 0c00 	mov.w	ip, #0
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	fa02 f209 	lsl.w	r2, r2, r9
 8007d06:	ea42 020c 	orr.w	r2, r2, ip
 8007d0a:	f84a 2b04 	str.w	r2, [sl], #4
 8007d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d12:	4298      	cmp	r0, r3
 8007d14:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d18:	d8f2      	bhi.n	8007d00 <__lshift+0x70>
 8007d1a:	1b03      	subs	r3, r0, r4
 8007d1c:	3b15      	subs	r3, #21
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	3304      	adds	r3, #4
 8007d24:	f104 0215 	add.w	r2, r4, #21
 8007d28:	4290      	cmp	r0, r2
 8007d2a:	bf38      	it	cc
 8007d2c:	2304      	movcc	r3, #4
 8007d2e:	f841 c003 	str.w	ip, [r1, r3]
 8007d32:	f1bc 0f00 	cmp.w	ip, #0
 8007d36:	d001      	beq.n	8007d3c <__lshift+0xac>
 8007d38:	f108 0602 	add.w	r6, r8, #2
 8007d3c:	3e01      	subs	r6, #1
 8007d3e:	4638      	mov	r0, r7
 8007d40:	612e      	str	r6, [r5, #16]
 8007d42:	4621      	mov	r1, r4
 8007d44:	f7ff fd88 	bl	8007858 <_Bfree>
 8007d48:	4628      	mov	r0, r5
 8007d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d52:	3301      	adds	r3, #1
 8007d54:	e7c1      	b.n	8007cda <__lshift+0x4a>
 8007d56:	3904      	subs	r1, #4
 8007d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d60:	4298      	cmp	r0, r3
 8007d62:	d8f9      	bhi.n	8007d58 <__lshift+0xc8>
 8007d64:	e7ea      	b.n	8007d3c <__lshift+0xac>
 8007d66:	bf00      	nop
 8007d68:	0800a178 	.word	0x0800a178
 8007d6c:	0800a204 	.word	0x0800a204

08007d70 <__mcmp>:
 8007d70:	b530      	push	{r4, r5, lr}
 8007d72:	6902      	ldr	r2, [r0, #16]
 8007d74:	690c      	ldr	r4, [r1, #16]
 8007d76:	1b12      	subs	r2, r2, r4
 8007d78:	d10e      	bne.n	8007d98 <__mcmp+0x28>
 8007d7a:	f100 0314 	add.w	r3, r0, #20
 8007d7e:	3114      	adds	r1, #20
 8007d80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d90:	42a5      	cmp	r5, r4
 8007d92:	d003      	beq.n	8007d9c <__mcmp+0x2c>
 8007d94:	d305      	bcc.n	8007da2 <__mcmp+0x32>
 8007d96:	2201      	movs	r2, #1
 8007d98:	4610      	mov	r0, r2
 8007d9a:	bd30      	pop	{r4, r5, pc}
 8007d9c:	4283      	cmp	r3, r0
 8007d9e:	d3f3      	bcc.n	8007d88 <__mcmp+0x18>
 8007da0:	e7fa      	b.n	8007d98 <__mcmp+0x28>
 8007da2:	f04f 32ff 	mov.w	r2, #4294967295
 8007da6:	e7f7      	b.n	8007d98 <__mcmp+0x28>

08007da8 <__mdiff>:
 8007da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	460c      	mov	r4, r1
 8007dae:	4606      	mov	r6, r0
 8007db0:	4611      	mov	r1, r2
 8007db2:	4620      	mov	r0, r4
 8007db4:	4690      	mov	r8, r2
 8007db6:	f7ff ffdb 	bl	8007d70 <__mcmp>
 8007dba:	1e05      	subs	r5, r0, #0
 8007dbc:	d110      	bne.n	8007de0 <__mdiff+0x38>
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f7ff fd09 	bl	80077d8 <_Balloc>
 8007dc6:	b930      	cbnz	r0, 8007dd6 <__mdiff+0x2e>
 8007dc8:	4b3a      	ldr	r3, [pc, #232]	; (8007eb4 <__mdiff+0x10c>)
 8007dca:	4602      	mov	r2, r0
 8007dcc:	f240 2132 	movw	r1, #562	; 0x232
 8007dd0:	4839      	ldr	r0, [pc, #228]	; (8007eb8 <__mdiff+0x110>)
 8007dd2:	f000 fc4f 	bl	8008674 <__assert_func>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de0:	bfa4      	itt	ge
 8007de2:	4643      	movge	r3, r8
 8007de4:	46a0      	movge	r8, r4
 8007de6:	4630      	mov	r0, r6
 8007de8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dec:	bfa6      	itte	ge
 8007dee:	461c      	movge	r4, r3
 8007df0:	2500      	movge	r5, #0
 8007df2:	2501      	movlt	r5, #1
 8007df4:	f7ff fcf0 	bl	80077d8 <_Balloc>
 8007df8:	b920      	cbnz	r0, 8007e04 <__mdiff+0x5c>
 8007dfa:	4b2e      	ldr	r3, [pc, #184]	; (8007eb4 <__mdiff+0x10c>)
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e02:	e7e5      	b.n	8007dd0 <__mdiff+0x28>
 8007e04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e08:	6926      	ldr	r6, [r4, #16]
 8007e0a:	60c5      	str	r5, [r0, #12]
 8007e0c:	f104 0914 	add.w	r9, r4, #20
 8007e10:	f108 0514 	add.w	r5, r8, #20
 8007e14:	f100 0e14 	add.w	lr, r0, #20
 8007e18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e20:	f108 0210 	add.w	r2, r8, #16
 8007e24:	46f2      	mov	sl, lr
 8007e26:	2100      	movs	r1, #0
 8007e28:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e30:	fa1f f883 	uxth.w	r8, r3
 8007e34:	fa11 f18b 	uxtah	r1, r1, fp
 8007e38:	0c1b      	lsrs	r3, r3, #16
 8007e3a:	eba1 0808 	sub.w	r8, r1, r8
 8007e3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e46:	fa1f f888 	uxth.w	r8, r8
 8007e4a:	1419      	asrs	r1, r3, #16
 8007e4c:	454e      	cmp	r6, r9
 8007e4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e52:	f84a 3b04 	str.w	r3, [sl], #4
 8007e56:	d8e7      	bhi.n	8007e28 <__mdiff+0x80>
 8007e58:	1b33      	subs	r3, r6, r4
 8007e5a:	3b15      	subs	r3, #21
 8007e5c:	f023 0303 	bic.w	r3, r3, #3
 8007e60:	3304      	adds	r3, #4
 8007e62:	3415      	adds	r4, #21
 8007e64:	42a6      	cmp	r6, r4
 8007e66:	bf38      	it	cc
 8007e68:	2304      	movcc	r3, #4
 8007e6a:	441d      	add	r5, r3
 8007e6c:	4473      	add	r3, lr
 8007e6e:	469e      	mov	lr, r3
 8007e70:	462e      	mov	r6, r5
 8007e72:	4566      	cmp	r6, ip
 8007e74:	d30e      	bcc.n	8007e94 <__mdiff+0xec>
 8007e76:	f10c 0203 	add.w	r2, ip, #3
 8007e7a:	1b52      	subs	r2, r2, r5
 8007e7c:	f022 0203 	bic.w	r2, r2, #3
 8007e80:	3d03      	subs	r5, #3
 8007e82:	45ac      	cmp	ip, r5
 8007e84:	bf38      	it	cc
 8007e86:	2200      	movcc	r2, #0
 8007e88:	441a      	add	r2, r3
 8007e8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007e8e:	b17b      	cbz	r3, 8007eb0 <__mdiff+0x108>
 8007e90:	6107      	str	r7, [r0, #16]
 8007e92:	e7a3      	b.n	8007ddc <__mdiff+0x34>
 8007e94:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e98:	fa11 f288 	uxtah	r2, r1, r8
 8007e9c:	1414      	asrs	r4, r2, #16
 8007e9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ea2:	b292      	uxth	r2, r2
 8007ea4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ea8:	f84e 2b04 	str.w	r2, [lr], #4
 8007eac:	1421      	asrs	r1, r4, #16
 8007eae:	e7e0      	b.n	8007e72 <__mdiff+0xca>
 8007eb0:	3f01      	subs	r7, #1
 8007eb2:	e7ea      	b.n	8007e8a <__mdiff+0xe2>
 8007eb4:	0800a178 	.word	0x0800a178
 8007eb8:	0800a204 	.word	0x0800a204

08007ebc <__ulp>:
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	ed8d 0b00 	vstr	d0, [sp]
 8007ec2:	9b01      	ldr	r3, [sp, #4]
 8007ec4:	4912      	ldr	r1, [pc, #72]	; (8007f10 <__ulp+0x54>)
 8007ec6:	4019      	ands	r1, r3
 8007ec8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	dd05      	ble.n	8007edc <__ulp+0x20>
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	ec43 2b10 	vmov	d0, r2, r3
 8007ed8:	b002      	add	sp, #8
 8007eda:	4770      	bx	lr
 8007edc:	4249      	negs	r1, r1
 8007ede:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007ee2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	da04      	bge.n	8007efa <__ulp+0x3e>
 8007ef0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007ef4:	fa41 f300 	asr.w	r3, r1, r0
 8007ef8:	e7ec      	b.n	8007ed4 <__ulp+0x18>
 8007efa:	f1a0 0114 	sub.w	r1, r0, #20
 8007efe:	291e      	cmp	r1, #30
 8007f00:	bfda      	itte	le
 8007f02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007f06:	fa20 f101 	lsrle.w	r1, r0, r1
 8007f0a:	2101      	movgt	r1, #1
 8007f0c:	460a      	mov	r2, r1
 8007f0e:	e7e1      	b.n	8007ed4 <__ulp+0x18>
 8007f10:	7ff00000 	.word	0x7ff00000

08007f14 <__b2d>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	6905      	ldr	r5, [r0, #16]
 8007f18:	f100 0714 	add.w	r7, r0, #20
 8007f1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007f20:	1f2e      	subs	r6, r5, #4
 8007f22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007f26:	4620      	mov	r0, r4
 8007f28:	f7ff fd48 	bl	80079bc <__hi0bits>
 8007f2c:	f1c0 0320 	rsb	r3, r0, #32
 8007f30:	280a      	cmp	r0, #10
 8007f32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007fb0 <__b2d+0x9c>
 8007f36:	600b      	str	r3, [r1, #0]
 8007f38:	dc14      	bgt.n	8007f64 <__b2d+0x50>
 8007f3a:	f1c0 0e0b 	rsb	lr, r0, #11
 8007f3e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007f42:	42b7      	cmp	r7, r6
 8007f44:	ea41 030c 	orr.w	r3, r1, ip
 8007f48:	bf34      	ite	cc
 8007f4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007f4e:	2100      	movcs	r1, #0
 8007f50:	3015      	adds	r0, #21
 8007f52:	fa04 f000 	lsl.w	r0, r4, r0
 8007f56:	fa21 f10e 	lsr.w	r1, r1, lr
 8007f5a:	ea40 0201 	orr.w	r2, r0, r1
 8007f5e:	ec43 2b10 	vmov	d0, r2, r3
 8007f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f64:	42b7      	cmp	r7, r6
 8007f66:	bf3a      	itte	cc
 8007f68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007f6c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007f70:	2100      	movcs	r1, #0
 8007f72:	380b      	subs	r0, #11
 8007f74:	d017      	beq.n	8007fa6 <__b2d+0x92>
 8007f76:	f1c0 0c20 	rsb	ip, r0, #32
 8007f7a:	fa04 f500 	lsl.w	r5, r4, r0
 8007f7e:	42be      	cmp	r6, r7
 8007f80:	fa21 f40c 	lsr.w	r4, r1, ip
 8007f84:	ea45 0504 	orr.w	r5, r5, r4
 8007f88:	bf8c      	ite	hi
 8007f8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007f8e:	2400      	movls	r4, #0
 8007f90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007f94:	fa01 f000 	lsl.w	r0, r1, r0
 8007f98:	fa24 f40c 	lsr.w	r4, r4, ip
 8007f9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007fa0:	ea40 0204 	orr.w	r2, r0, r4
 8007fa4:	e7db      	b.n	8007f5e <__b2d+0x4a>
 8007fa6:	ea44 030c 	orr.w	r3, r4, ip
 8007faa:	460a      	mov	r2, r1
 8007fac:	e7d7      	b.n	8007f5e <__b2d+0x4a>
 8007fae:	bf00      	nop
 8007fb0:	3ff00000 	.word	0x3ff00000

08007fb4 <__d2b>:
 8007fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fb8:	4689      	mov	r9, r1
 8007fba:	2101      	movs	r1, #1
 8007fbc:	ec57 6b10 	vmov	r6, r7, d0
 8007fc0:	4690      	mov	r8, r2
 8007fc2:	f7ff fc09 	bl	80077d8 <_Balloc>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	b930      	cbnz	r0, 8007fd8 <__d2b+0x24>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	4b25      	ldr	r3, [pc, #148]	; (8008064 <__d2b+0xb0>)
 8007fce:	4826      	ldr	r0, [pc, #152]	; (8008068 <__d2b+0xb4>)
 8007fd0:	f240 310a 	movw	r1, #778	; 0x30a
 8007fd4:	f000 fb4e 	bl	8008674 <__assert_func>
 8007fd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007fdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fe0:	bb35      	cbnz	r5, 8008030 <__d2b+0x7c>
 8007fe2:	2e00      	cmp	r6, #0
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	d028      	beq.n	800803a <__d2b+0x86>
 8007fe8:	4668      	mov	r0, sp
 8007fea:	9600      	str	r6, [sp, #0]
 8007fec:	f7ff fd06 	bl	80079fc <__lo0bits>
 8007ff0:	9900      	ldr	r1, [sp, #0]
 8007ff2:	b300      	cbz	r0, 8008036 <__d2b+0x82>
 8007ff4:	9a01      	ldr	r2, [sp, #4]
 8007ff6:	f1c0 0320 	rsb	r3, r0, #32
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	430b      	orrs	r3, r1
 8008000:	40c2      	lsrs	r2, r0
 8008002:	6163      	str	r3, [r4, #20]
 8008004:	9201      	str	r2, [sp, #4]
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	61a3      	str	r3, [r4, #24]
 800800a:	2b00      	cmp	r3, #0
 800800c:	bf14      	ite	ne
 800800e:	2202      	movne	r2, #2
 8008010:	2201      	moveq	r2, #1
 8008012:	6122      	str	r2, [r4, #16]
 8008014:	b1d5      	cbz	r5, 800804c <__d2b+0x98>
 8008016:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800801a:	4405      	add	r5, r0
 800801c:	f8c9 5000 	str.w	r5, [r9]
 8008020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008024:	f8c8 0000 	str.w	r0, [r8]
 8008028:	4620      	mov	r0, r4
 800802a:	b003      	add	sp, #12
 800802c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008034:	e7d5      	b.n	8007fe2 <__d2b+0x2e>
 8008036:	6161      	str	r1, [r4, #20]
 8008038:	e7e5      	b.n	8008006 <__d2b+0x52>
 800803a:	a801      	add	r0, sp, #4
 800803c:	f7ff fcde 	bl	80079fc <__lo0bits>
 8008040:	9b01      	ldr	r3, [sp, #4]
 8008042:	6163      	str	r3, [r4, #20]
 8008044:	2201      	movs	r2, #1
 8008046:	6122      	str	r2, [r4, #16]
 8008048:	3020      	adds	r0, #32
 800804a:	e7e3      	b.n	8008014 <__d2b+0x60>
 800804c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008054:	f8c9 0000 	str.w	r0, [r9]
 8008058:	6918      	ldr	r0, [r3, #16]
 800805a:	f7ff fcaf 	bl	80079bc <__hi0bits>
 800805e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008062:	e7df      	b.n	8008024 <__d2b+0x70>
 8008064:	0800a178 	.word	0x0800a178
 8008068:	0800a204 	.word	0x0800a204

0800806c <__ratio>:
 800806c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	4688      	mov	r8, r1
 8008072:	4669      	mov	r1, sp
 8008074:	4681      	mov	r9, r0
 8008076:	f7ff ff4d 	bl	8007f14 <__b2d>
 800807a:	a901      	add	r1, sp, #4
 800807c:	4640      	mov	r0, r8
 800807e:	ec55 4b10 	vmov	r4, r5, d0
 8008082:	f7ff ff47 	bl	8007f14 <__b2d>
 8008086:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800808a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800808e:	eba3 0c02 	sub.w	ip, r3, r2
 8008092:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008096:	1a9b      	subs	r3, r3, r2
 8008098:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800809c:	ec51 0b10 	vmov	r0, r1, d0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bfd6      	itet	le
 80080a4:	460a      	movle	r2, r1
 80080a6:	462a      	movgt	r2, r5
 80080a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080ac:	468b      	mov	fp, r1
 80080ae:	462f      	mov	r7, r5
 80080b0:	bfd4      	ite	le
 80080b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80080b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80080ba:	4620      	mov	r0, r4
 80080bc:	ee10 2a10 	vmov	r2, s0
 80080c0:	465b      	mov	r3, fp
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fbc2 	bl	800084c <__aeabi_ddiv>
 80080c8:	ec41 0b10 	vmov	d0, r0, r1
 80080cc:	b003      	add	sp, #12
 80080ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080d2 <__copybits>:
 80080d2:	3901      	subs	r1, #1
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	1149      	asrs	r1, r1, #5
 80080d8:	6914      	ldr	r4, [r2, #16]
 80080da:	3101      	adds	r1, #1
 80080dc:	f102 0314 	add.w	r3, r2, #20
 80080e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080e8:	1f05      	subs	r5, r0, #4
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	d30c      	bcc.n	8008108 <__copybits+0x36>
 80080ee:	1aa3      	subs	r3, r4, r2
 80080f0:	3b11      	subs	r3, #17
 80080f2:	f023 0303 	bic.w	r3, r3, #3
 80080f6:	3211      	adds	r2, #17
 80080f8:	42a2      	cmp	r2, r4
 80080fa:	bf88      	it	hi
 80080fc:	2300      	movhi	r3, #0
 80080fe:	4418      	add	r0, r3
 8008100:	2300      	movs	r3, #0
 8008102:	4288      	cmp	r0, r1
 8008104:	d305      	bcc.n	8008112 <__copybits+0x40>
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	f853 6b04 	ldr.w	r6, [r3], #4
 800810c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008110:	e7eb      	b.n	80080ea <__copybits+0x18>
 8008112:	f840 3b04 	str.w	r3, [r0], #4
 8008116:	e7f4      	b.n	8008102 <__copybits+0x30>

08008118 <__any_on>:
 8008118:	f100 0214 	add.w	r2, r0, #20
 800811c:	6900      	ldr	r0, [r0, #16]
 800811e:	114b      	asrs	r3, r1, #5
 8008120:	4298      	cmp	r0, r3
 8008122:	b510      	push	{r4, lr}
 8008124:	db11      	blt.n	800814a <__any_on+0x32>
 8008126:	dd0a      	ble.n	800813e <__any_on+0x26>
 8008128:	f011 011f 	ands.w	r1, r1, #31
 800812c:	d007      	beq.n	800813e <__any_on+0x26>
 800812e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008132:	fa24 f001 	lsr.w	r0, r4, r1
 8008136:	fa00 f101 	lsl.w	r1, r0, r1
 800813a:	428c      	cmp	r4, r1
 800813c:	d10b      	bne.n	8008156 <__any_on+0x3e>
 800813e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008142:	4293      	cmp	r3, r2
 8008144:	d803      	bhi.n	800814e <__any_on+0x36>
 8008146:	2000      	movs	r0, #0
 8008148:	bd10      	pop	{r4, pc}
 800814a:	4603      	mov	r3, r0
 800814c:	e7f7      	b.n	800813e <__any_on+0x26>
 800814e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008152:	2900      	cmp	r1, #0
 8008154:	d0f5      	beq.n	8008142 <__any_on+0x2a>
 8008156:	2001      	movs	r0, #1
 8008158:	e7f6      	b.n	8008148 <__any_on+0x30>

0800815a <_calloc_r>:
 800815a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800815c:	fba1 2402 	umull	r2, r4, r1, r2
 8008160:	b94c      	cbnz	r4, 8008176 <_calloc_r+0x1c>
 8008162:	4611      	mov	r1, r2
 8008164:	9201      	str	r2, [sp, #4]
 8008166:	f000 f87b 	bl	8008260 <_malloc_r>
 800816a:	9a01      	ldr	r2, [sp, #4]
 800816c:	4605      	mov	r5, r0
 800816e:	b930      	cbnz	r0, 800817e <_calloc_r+0x24>
 8008170:	4628      	mov	r0, r5
 8008172:	b003      	add	sp, #12
 8008174:	bd30      	pop	{r4, r5, pc}
 8008176:	220c      	movs	r2, #12
 8008178:	6002      	str	r2, [r0, #0]
 800817a:	2500      	movs	r5, #0
 800817c:	e7f8      	b.n	8008170 <_calloc_r+0x16>
 800817e:	4621      	mov	r1, r4
 8008180:	f7fc fb9a 	bl	80048b8 <memset>
 8008184:	e7f4      	b.n	8008170 <_calloc_r+0x16>
	...

08008188 <_free_r>:
 8008188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800818a:	2900      	cmp	r1, #0
 800818c:	d044      	beq.n	8008218 <_free_r+0x90>
 800818e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008192:	9001      	str	r0, [sp, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f1a1 0404 	sub.w	r4, r1, #4
 800819a:	bfb8      	it	lt
 800819c:	18e4      	addlt	r4, r4, r3
 800819e:	f000 fab3 	bl	8008708 <__malloc_lock>
 80081a2:	4a1e      	ldr	r2, [pc, #120]	; (800821c <_free_r+0x94>)
 80081a4:	9801      	ldr	r0, [sp, #4]
 80081a6:	6813      	ldr	r3, [r2, #0]
 80081a8:	b933      	cbnz	r3, 80081b8 <_free_r+0x30>
 80081aa:	6063      	str	r3, [r4, #4]
 80081ac:	6014      	str	r4, [r2, #0]
 80081ae:	b003      	add	sp, #12
 80081b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081b4:	f000 baae 	b.w	8008714 <__malloc_unlock>
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	d908      	bls.n	80081ce <_free_r+0x46>
 80081bc:	6825      	ldr	r5, [r4, #0]
 80081be:	1961      	adds	r1, r4, r5
 80081c0:	428b      	cmp	r3, r1
 80081c2:	bf01      	itttt	eq
 80081c4:	6819      	ldreq	r1, [r3, #0]
 80081c6:	685b      	ldreq	r3, [r3, #4]
 80081c8:	1949      	addeq	r1, r1, r5
 80081ca:	6021      	streq	r1, [r4, #0]
 80081cc:	e7ed      	b.n	80081aa <_free_r+0x22>
 80081ce:	461a      	mov	r2, r3
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	b10b      	cbz	r3, 80081d8 <_free_r+0x50>
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	d9fa      	bls.n	80081ce <_free_r+0x46>
 80081d8:	6811      	ldr	r1, [r2, #0]
 80081da:	1855      	adds	r5, r2, r1
 80081dc:	42a5      	cmp	r5, r4
 80081de:	d10b      	bne.n	80081f8 <_free_r+0x70>
 80081e0:	6824      	ldr	r4, [r4, #0]
 80081e2:	4421      	add	r1, r4
 80081e4:	1854      	adds	r4, r2, r1
 80081e6:	42a3      	cmp	r3, r4
 80081e8:	6011      	str	r1, [r2, #0]
 80081ea:	d1e0      	bne.n	80081ae <_free_r+0x26>
 80081ec:	681c      	ldr	r4, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	6053      	str	r3, [r2, #4]
 80081f2:	4421      	add	r1, r4
 80081f4:	6011      	str	r1, [r2, #0]
 80081f6:	e7da      	b.n	80081ae <_free_r+0x26>
 80081f8:	d902      	bls.n	8008200 <_free_r+0x78>
 80081fa:	230c      	movs	r3, #12
 80081fc:	6003      	str	r3, [r0, #0]
 80081fe:	e7d6      	b.n	80081ae <_free_r+0x26>
 8008200:	6825      	ldr	r5, [r4, #0]
 8008202:	1961      	adds	r1, r4, r5
 8008204:	428b      	cmp	r3, r1
 8008206:	bf04      	itt	eq
 8008208:	6819      	ldreq	r1, [r3, #0]
 800820a:	685b      	ldreq	r3, [r3, #4]
 800820c:	6063      	str	r3, [r4, #4]
 800820e:	bf04      	itt	eq
 8008210:	1949      	addeq	r1, r1, r5
 8008212:	6021      	streq	r1, [r4, #0]
 8008214:	6054      	str	r4, [r2, #4]
 8008216:	e7ca      	b.n	80081ae <_free_r+0x26>
 8008218:	b003      	add	sp, #12
 800821a:	bd30      	pop	{r4, r5, pc}
 800821c:	20000560 	.word	0x20000560

08008220 <sbrk_aligned>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	4e0e      	ldr	r6, [pc, #56]	; (800825c <sbrk_aligned+0x3c>)
 8008224:	460c      	mov	r4, r1
 8008226:	6831      	ldr	r1, [r6, #0]
 8008228:	4605      	mov	r5, r0
 800822a:	b911      	cbnz	r1, 8008232 <sbrk_aligned+0x12>
 800822c:	f000 f9f0 	bl	8008610 <_sbrk_r>
 8008230:	6030      	str	r0, [r6, #0]
 8008232:	4621      	mov	r1, r4
 8008234:	4628      	mov	r0, r5
 8008236:	f000 f9eb 	bl	8008610 <_sbrk_r>
 800823a:	1c43      	adds	r3, r0, #1
 800823c:	d00a      	beq.n	8008254 <sbrk_aligned+0x34>
 800823e:	1cc4      	adds	r4, r0, #3
 8008240:	f024 0403 	bic.w	r4, r4, #3
 8008244:	42a0      	cmp	r0, r4
 8008246:	d007      	beq.n	8008258 <sbrk_aligned+0x38>
 8008248:	1a21      	subs	r1, r4, r0
 800824a:	4628      	mov	r0, r5
 800824c:	f000 f9e0 	bl	8008610 <_sbrk_r>
 8008250:	3001      	adds	r0, #1
 8008252:	d101      	bne.n	8008258 <sbrk_aligned+0x38>
 8008254:	f04f 34ff 	mov.w	r4, #4294967295
 8008258:	4620      	mov	r0, r4
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	20000564 	.word	0x20000564

08008260 <_malloc_r>:
 8008260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008264:	1ccd      	adds	r5, r1, #3
 8008266:	f025 0503 	bic.w	r5, r5, #3
 800826a:	3508      	adds	r5, #8
 800826c:	2d0c      	cmp	r5, #12
 800826e:	bf38      	it	cc
 8008270:	250c      	movcc	r5, #12
 8008272:	2d00      	cmp	r5, #0
 8008274:	4607      	mov	r7, r0
 8008276:	db01      	blt.n	800827c <_malloc_r+0x1c>
 8008278:	42a9      	cmp	r1, r5
 800827a:	d905      	bls.n	8008288 <_malloc_r+0x28>
 800827c:	230c      	movs	r3, #12
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	2600      	movs	r6, #0
 8008282:	4630      	mov	r0, r6
 8008284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008288:	4e2e      	ldr	r6, [pc, #184]	; (8008344 <_malloc_r+0xe4>)
 800828a:	f000 fa3d 	bl	8008708 <__malloc_lock>
 800828e:	6833      	ldr	r3, [r6, #0]
 8008290:	461c      	mov	r4, r3
 8008292:	bb34      	cbnz	r4, 80082e2 <_malloc_r+0x82>
 8008294:	4629      	mov	r1, r5
 8008296:	4638      	mov	r0, r7
 8008298:	f7ff ffc2 	bl	8008220 <sbrk_aligned>
 800829c:	1c43      	adds	r3, r0, #1
 800829e:	4604      	mov	r4, r0
 80082a0:	d14d      	bne.n	800833e <_malloc_r+0xde>
 80082a2:	6834      	ldr	r4, [r6, #0]
 80082a4:	4626      	mov	r6, r4
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d140      	bne.n	800832c <_malloc_r+0xcc>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	4631      	mov	r1, r6
 80082ae:	4638      	mov	r0, r7
 80082b0:	eb04 0803 	add.w	r8, r4, r3
 80082b4:	f000 f9ac 	bl	8008610 <_sbrk_r>
 80082b8:	4580      	cmp	r8, r0
 80082ba:	d13a      	bne.n	8008332 <_malloc_r+0xd2>
 80082bc:	6821      	ldr	r1, [r4, #0]
 80082be:	3503      	adds	r5, #3
 80082c0:	1a6d      	subs	r5, r5, r1
 80082c2:	f025 0503 	bic.w	r5, r5, #3
 80082c6:	3508      	adds	r5, #8
 80082c8:	2d0c      	cmp	r5, #12
 80082ca:	bf38      	it	cc
 80082cc:	250c      	movcc	r5, #12
 80082ce:	4629      	mov	r1, r5
 80082d0:	4638      	mov	r0, r7
 80082d2:	f7ff ffa5 	bl	8008220 <sbrk_aligned>
 80082d6:	3001      	adds	r0, #1
 80082d8:	d02b      	beq.n	8008332 <_malloc_r+0xd2>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	442b      	add	r3, r5
 80082de:	6023      	str	r3, [r4, #0]
 80082e0:	e00e      	b.n	8008300 <_malloc_r+0xa0>
 80082e2:	6822      	ldr	r2, [r4, #0]
 80082e4:	1b52      	subs	r2, r2, r5
 80082e6:	d41e      	bmi.n	8008326 <_malloc_r+0xc6>
 80082e8:	2a0b      	cmp	r2, #11
 80082ea:	d916      	bls.n	800831a <_malloc_r+0xba>
 80082ec:	1961      	adds	r1, r4, r5
 80082ee:	42a3      	cmp	r3, r4
 80082f0:	6025      	str	r5, [r4, #0]
 80082f2:	bf18      	it	ne
 80082f4:	6059      	strne	r1, [r3, #4]
 80082f6:	6863      	ldr	r3, [r4, #4]
 80082f8:	bf08      	it	eq
 80082fa:	6031      	streq	r1, [r6, #0]
 80082fc:	5162      	str	r2, [r4, r5]
 80082fe:	604b      	str	r3, [r1, #4]
 8008300:	4638      	mov	r0, r7
 8008302:	f104 060b 	add.w	r6, r4, #11
 8008306:	f000 fa05 	bl	8008714 <__malloc_unlock>
 800830a:	f026 0607 	bic.w	r6, r6, #7
 800830e:	1d23      	adds	r3, r4, #4
 8008310:	1af2      	subs	r2, r6, r3
 8008312:	d0b6      	beq.n	8008282 <_malloc_r+0x22>
 8008314:	1b9b      	subs	r3, r3, r6
 8008316:	50a3      	str	r3, [r4, r2]
 8008318:	e7b3      	b.n	8008282 <_malloc_r+0x22>
 800831a:	6862      	ldr	r2, [r4, #4]
 800831c:	42a3      	cmp	r3, r4
 800831e:	bf0c      	ite	eq
 8008320:	6032      	streq	r2, [r6, #0]
 8008322:	605a      	strne	r2, [r3, #4]
 8008324:	e7ec      	b.n	8008300 <_malloc_r+0xa0>
 8008326:	4623      	mov	r3, r4
 8008328:	6864      	ldr	r4, [r4, #4]
 800832a:	e7b2      	b.n	8008292 <_malloc_r+0x32>
 800832c:	4634      	mov	r4, r6
 800832e:	6876      	ldr	r6, [r6, #4]
 8008330:	e7b9      	b.n	80082a6 <_malloc_r+0x46>
 8008332:	230c      	movs	r3, #12
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	4638      	mov	r0, r7
 8008338:	f000 f9ec 	bl	8008714 <__malloc_unlock>
 800833c:	e7a1      	b.n	8008282 <_malloc_r+0x22>
 800833e:	6025      	str	r5, [r4, #0]
 8008340:	e7de      	b.n	8008300 <_malloc_r+0xa0>
 8008342:	bf00      	nop
 8008344:	20000560 	.word	0x20000560

08008348 <__ssputs_r>:
 8008348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800834c:	688e      	ldr	r6, [r1, #8]
 800834e:	429e      	cmp	r6, r3
 8008350:	4682      	mov	sl, r0
 8008352:	460c      	mov	r4, r1
 8008354:	4690      	mov	r8, r2
 8008356:	461f      	mov	r7, r3
 8008358:	d838      	bhi.n	80083cc <__ssputs_r+0x84>
 800835a:	898a      	ldrh	r2, [r1, #12]
 800835c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008360:	d032      	beq.n	80083c8 <__ssputs_r+0x80>
 8008362:	6825      	ldr	r5, [r4, #0]
 8008364:	6909      	ldr	r1, [r1, #16]
 8008366:	eba5 0901 	sub.w	r9, r5, r1
 800836a:	6965      	ldr	r5, [r4, #20]
 800836c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008374:	3301      	adds	r3, #1
 8008376:	444b      	add	r3, r9
 8008378:	106d      	asrs	r5, r5, #1
 800837a:	429d      	cmp	r5, r3
 800837c:	bf38      	it	cc
 800837e:	461d      	movcc	r5, r3
 8008380:	0553      	lsls	r3, r2, #21
 8008382:	d531      	bpl.n	80083e8 <__ssputs_r+0xa0>
 8008384:	4629      	mov	r1, r5
 8008386:	f7ff ff6b 	bl	8008260 <_malloc_r>
 800838a:	4606      	mov	r6, r0
 800838c:	b950      	cbnz	r0, 80083a4 <__ssputs_r+0x5c>
 800838e:	230c      	movs	r3, #12
 8008390:	f8ca 3000 	str.w	r3, [sl]
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	f04f 30ff 	mov.w	r0, #4294967295
 80083a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a4:	6921      	ldr	r1, [r4, #16]
 80083a6:	464a      	mov	r2, r9
 80083a8:	f7fc fa78 	bl	800489c <memcpy>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	6126      	str	r6, [r4, #16]
 80083ba:	6165      	str	r5, [r4, #20]
 80083bc:	444e      	add	r6, r9
 80083be:	eba5 0509 	sub.w	r5, r5, r9
 80083c2:	6026      	str	r6, [r4, #0]
 80083c4:	60a5      	str	r5, [r4, #8]
 80083c6:	463e      	mov	r6, r7
 80083c8:	42be      	cmp	r6, r7
 80083ca:	d900      	bls.n	80083ce <__ssputs_r+0x86>
 80083cc:	463e      	mov	r6, r7
 80083ce:	6820      	ldr	r0, [r4, #0]
 80083d0:	4632      	mov	r2, r6
 80083d2:	4641      	mov	r1, r8
 80083d4:	f000 f97e 	bl	80086d4 <memmove>
 80083d8:	68a3      	ldr	r3, [r4, #8]
 80083da:	1b9b      	subs	r3, r3, r6
 80083dc:	60a3      	str	r3, [r4, #8]
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	4433      	add	r3, r6
 80083e2:	6023      	str	r3, [r4, #0]
 80083e4:	2000      	movs	r0, #0
 80083e6:	e7db      	b.n	80083a0 <__ssputs_r+0x58>
 80083e8:	462a      	mov	r2, r5
 80083ea:	f000 f999 	bl	8008720 <_realloc_r>
 80083ee:	4606      	mov	r6, r0
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d1e1      	bne.n	80083b8 <__ssputs_r+0x70>
 80083f4:	6921      	ldr	r1, [r4, #16]
 80083f6:	4650      	mov	r0, sl
 80083f8:	f7ff fec6 	bl	8008188 <_free_r>
 80083fc:	e7c7      	b.n	800838e <__ssputs_r+0x46>
	...

08008400 <_svfiprintf_r>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	4698      	mov	r8, r3
 8008406:	898b      	ldrh	r3, [r1, #12]
 8008408:	061b      	lsls	r3, r3, #24
 800840a:	b09d      	sub	sp, #116	; 0x74
 800840c:	4607      	mov	r7, r0
 800840e:	460d      	mov	r5, r1
 8008410:	4614      	mov	r4, r2
 8008412:	d50e      	bpl.n	8008432 <_svfiprintf_r+0x32>
 8008414:	690b      	ldr	r3, [r1, #16]
 8008416:	b963      	cbnz	r3, 8008432 <_svfiprintf_r+0x32>
 8008418:	2140      	movs	r1, #64	; 0x40
 800841a:	f7ff ff21 	bl	8008260 <_malloc_r>
 800841e:	6028      	str	r0, [r5, #0]
 8008420:	6128      	str	r0, [r5, #16]
 8008422:	b920      	cbnz	r0, 800842e <_svfiprintf_r+0x2e>
 8008424:	230c      	movs	r3, #12
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	f04f 30ff 	mov.w	r0, #4294967295
 800842c:	e0d1      	b.n	80085d2 <_svfiprintf_r+0x1d2>
 800842e:	2340      	movs	r3, #64	; 0x40
 8008430:	616b      	str	r3, [r5, #20]
 8008432:	2300      	movs	r3, #0
 8008434:	9309      	str	r3, [sp, #36]	; 0x24
 8008436:	2320      	movs	r3, #32
 8008438:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800843c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008440:	2330      	movs	r3, #48	; 0x30
 8008442:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085ec <_svfiprintf_r+0x1ec>
 8008446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800844a:	f04f 0901 	mov.w	r9, #1
 800844e:	4623      	mov	r3, r4
 8008450:	469a      	mov	sl, r3
 8008452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008456:	b10a      	cbz	r2, 800845c <_svfiprintf_r+0x5c>
 8008458:	2a25      	cmp	r2, #37	; 0x25
 800845a:	d1f9      	bne.n	8008450 <_svfiprintf_r+0x50>
 800845c:	ebba 0b04 	subs.w	fp, sl, r4
 8008460:	d00b      	beq.n	800847a <_svfiprintf_r+0x7a>
 8008462:	465b      	mov	r3, fp
 8008464:	4622      	mov	r2, r4
 8008466:	4629      	mov	r1, r5
 8008468:	4638      	mov	r0, r7
 800846a:	f7ff ff6d 	bl	8008348 <__ssputs_r>
 800846e:	3001      	adds	r0, #1
 8008470:	f000 80aa 	beq.w	80085c8 <_svfiprintf_r+0x1c8>
 8008474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008476:	445a      	add	r2, fp
 8008478:	9209      	str	r2, [sp, #36]	; 0x24
 800847a:	f89a 3000 	ldrb.w	r3, [sl]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 80a2 	beq.w	80085c8 <_svfiprintf_r+0x1c8>
 8008484:	2300      	movs	r3, #0
 8008486:	f04f 32ff 	mov.w	r2, #4294967295
 800848a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800848e:	f10a 0a01 	add.w	sl, sl, #1
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	9307      	str	r3, [sp, #28]
 8008496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800849a:	931a      	str	r3, [sp, #104]	; 0x68
 800849c:	4654      	mov	r4, sl
 800849e:	2205      	movs	r2, #5
 80084a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a4:	4851      	ldr	r0, [pc, #324]	; (80085ec <_svfiprintf_r+0x1ec>)
 80084a6:	f7f7 fe9b 	bl	80001e0 <memchr>
 80084aa:	9a04      	ldr	r2, [sp, #16]
 80084ac:	b9d8      	cbnz	r0, 80084e6 <_svfiprintf_r+0xe6>
 80084ae:	06d0      	lsls	r0, r2, #27
 80084b0:	bf44      	itt	mi
 80084b2:	2320      	movmi	r3, #32
 80084b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b8:	0711      	lsls	r1, r2, #28
 80084ba:	bf44      	itt	mi
 80084bc:	232b      	movmi	r3, #43	; 0x2b
 80084be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084c2:	f89a 3000 	ldrb.w	r3, [sl]
 80084c6:	2b2a      	cmp	r3, #42	; 0x2a
 80084c8:	d015      	beq.n	80084f6 <_svfiprintf_r+0xf6>
 80084ca:	9a07      	ldr	r2, [sp, #28]
 80084cc:	4654      	mov	r4, sl
 80084ce:	2000      	movs	r0, #0
 80084d0:	f04f 0c0a 	mov.w	ip, #10
 80084d4:	4621      	mov	r1, r4
 80084d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084da:	3b30      	subs	r3, #48	; 0x30
 80084dc:	2b09      	cmp	r3, #9
 80084de:	d94e      	bls.n	800857e <_svfiprintf_r+0x17e>
 80084e0:	b1b0      	cbz	r0, 8008510 <_svfiprintf_r+0x110>
 80084e2:	9207      	str	r2, [sp, #28]
 80084e4:	e014      	b.n	8008510 <_svfiprintf_r+0x110>
 80084e6:	eba0 0308 	sub.w	r3, r0, r8
 80084ea:	fa09 f303 	lsl.w	r3, r9, r3
 80084ee:	4313      	orrs	r3, r2
 80084f0:	9304      	str	r3, [sp, #16]
 80084f2:	46a2      	mov	sl, r4
 80084f4:	e7d2      	b.n	800849c <_svfiprintf_r+0x9c>
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	1d19      	adds	r1, r3, #4
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	9103      	str	r1, [sp, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	bfbb      	ittet	lt
 8008502:	425b      	neglt	r3, r3
 8008504:	f042 0202 	orrlt.w	r2, r2, #2
 8008508:	9307      	strge	r3, [sp, #28]
 800850a:	9307      	strlt	r3, [sp, #28]
 800850c:	bfb8      	it	lt
 800850e:	9204      	strlt	r2, [sp, #16]
 8008510:	7823      	ldrb	r3, [r4, #0]
 8008512:	2b2e      	cmp	r3, #46	; 0x2e
 8008514:	d10c      	bne.n	8008530 <_svfiprintf_r+0x130>
 8008516:	7863      	ldrb	r3, [r4, #1]
 8008518:	2b2a      	cmp	r3, #42	; 0x2a
 800851a:	d135      	bne.n	8008588 <_svfiprintf_r+0x188>
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	1d1a      	adds	r2, r3, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	9203      	str	r2, [sp, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	bfb8      	it	lt
 8008528:	f04f 33ff 	movlt.w	r3, #4294967295
 800852c:	3402      	adds	r4, #2
 800852e:	9305      	str	r3, [sp, #20]
 8008530:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085fc <_svfiprintf_r+0x1fc>
 8008534:	7821      	ldrb	r1, [r4, #0]
 8008536:	2203      	movs	r2, #3
 8008538:	4650      	mov	r0, sl
 800853a:	f7f7 fe51 	bl	80001e0 <memchr>
 800853e:	b140      	cbz	r0, 8008552 <_svfiprintf_r+0x152>
 8008540:	2340      	movs	r3, #64	; 0x40
 8008542:	eba0 000a 	sub.w	r0, r0, sl
 8008546:	fa03 f000 	lsl.w	r0, r3, r0
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	4303      	orrs	r3, r0
 800854e:	3401      	adds	r4, #1
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008556:	4826      	ldr	r0, [pc, #152]	; (80085f0 <_svfiprintf_r+0x1f0>)
 8008558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800855c:	2206      	movs	r2, #6
 800855e:	f7f7 fe3f 	bl	80001e0 <memchr>
 8008562:	2800      	cmp	r0, #0
 8008564:	d038      	beq.n	80085d8 <_svfiprintf_r+0x1d8>
 8008566:	4b23      	ldr	r3, [pc, #140]	; (80085f4 <_svfiprintf_r+0x1f4>)
 8008568:	bb1b      	cbnz	r3, 80085b2 <_svfiprintf_r+0x1b2>
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	3307      	adds	r3, #7
 800856e:	f023 0307 	bic.w	r3, r3, #7
 8008572:	3308      	adds	r3, #8
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008578:	4433      	add	r3, r6
 800857a:	9309      	str	r3, [sp, #36]	; 0x24
 800857c:	e767      	b.n	800844e <_svfiprintf_r+0x4e>
 800857e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008582:	460c      	mov	r4, r1
 8008584:	2001      	movs	r0, #1
 8008586:	e7a5      	b.n	80084d4 <_svfiprintf_r+0xd4>
 8008588:	2300      	movs	r3, #0
 800858a:	3401      	adds	r4, #1
 800858c:	9305      	str	r3, [sp, #20]
 800858e:	4619      	mov	r1, r3
 8008590:	f04f 0c0a 	mov.w	ip, #10
 8008594:	4620      	mov	r0, r4
 8008596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800859a:	3a30      	subs	r2, #48	; 0x30
 800859c:	2a09      	cmp	r2, #9
 800859e:	d903      	bls.n	80085a8 <_svfiprintf_r+0x1a8>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0c5      	beq.n	8008530 <_svfiprintf_r+0x130>
 80085a4:	9105      	str	r1, [sp, #20]
 80085a6:	e7c3      	b.n	8008530 <_svfiprintf_r+0x130>
 80085a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ac:	4604      	mov	r4, r0
 80085ae:	2301      	movs	r3, #1
 80085b0:	e7f0      	b.n	8008594 <_svfiprintf_r+0x194>
 80085b2:	ab03      	add	r3, sp, #12
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	462a      	mov	r2, r5
 80085b8:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <_svfiprintf_r+0x1f8>)
 80085ba:	a904      	add	r1, sp, #16
 80085bc:	4638      	mov	r0, r7
 80085be:	f7fc fa23 	bl	8004a08 <_printf_float>
 80085c2:	1c42      	adds	r2, r0, #1
 80085c4:	4606      	mov	r6, r0
 80085c6:	d1d6      	bne.n	8008576 <_svfiprintf_r+0x176>
 80085c8:	89ab      	ldrh	r3, [r5, #12]
 80085ca:	065b      	lsls	r3, r3, #25
 80085cc:	f53f af2c 	bmi.w	8008428 <_svfiprintf_r+0x28>
 80085d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085d2:	b01d      	add	sp, #116	; 0x74
 80085d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d8:	ab03      	add	r3, sp, #12
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	462a      	mov	r2, r5
 80085de:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <_svfiprintf_r+0x1f8>)
 80085e0:	a904      	add	r1, sp, #16
 80085e2:	4638      	mov	r0, r7
 80085e4:	f7fc fcb4 	bl	8004f50 <_printf_i>
 80085e8:	e7eb      	b.n	80085c2 <_svfiprintf_r+0x1c2>
 80085ea:	bf00      	nop
 80085ec:	0800a35c 	.word	0x0800a35c
 80085f0:	0800a366 	.word	0x0800a366
 80085f4:	08004a09 	.word	0x08004a09
 80085f8:	08008349 	.word	0x08008349
 80085fc:	0800a362 	.word	0x0800a362

08008600 <nan>:
 8008600:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008608 <nan+0x8>
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	00000000 	.word	0x00000000
 800860c:	7ff80000 	.word	0x7ff80000

08008610 <_sbrk_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4d06      	ldr	r5, [pc, #24]	; (800862c <_sbrk_r+0x1c>)
 8008614:	2300      	movs	r3, #0
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	602b      	str	r3, [r5, #0]
 800861c:	f7f9 fa64 	bl	8001ae8 <_sbrk>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_sbrk_r+0x1a>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	b103      	cbz	r3, 800862a <_sbrk_r+0x1a>
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	20000568 	.word	0x20000568

08008630 <strncmp>:
 8008630:	b510      	push	{r4, lr}
 8008632:	b17a      	cbz	r2, 8008654 <strncmp+0x24>
 8008634:	4603      	mov	r3, r0
 8008636:	3901      	subs	r1, #1
 8008638:	1884      	adds	r4, r0, r2
 800863a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800863e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008642:	4290      	cmp	r0, r2
 8008644:	d101      	bne.n	800864a <strncmp+0x1a>
 8008646:	42a3      	cmp	r3, r4
 8008648:	d101      	bne.n	800864e <strncmp+0x1e>
 800864a:	1a80      	subs	r0, r0, r2
 800864c:	bd10      	pop	{r4, pc}
 800864e:	2800      	cmp	r0, #0
 8008650:	d1f3      	bne.n	800863a <strncmp+0xa>
 8008652:	e7fa      	b.n	800864a <strncmp+0x1a>
 8008654:	4610      	mov	r0, r2
 8008656:	e7f9      	b.n	800864c <strncmp+0x1c>

08008658 <__ascii_wctomb>:
 8008658:	b149      	cbz	r1, 800866e <__ascii_wctomb+0x16>
 800865a:	2aff      	cmp	r2, #255	; 0xff
 800865c:	bf85      	ittet	hi
 800865e:	238a      	movhi	r3, #138	; 0x8a
 8008660:	6003      	strhi	r3, [r0, #0]
 8008662:	700a      	strbls	r2, [r1, #0]
 8008664:	f04f 30ff 	movhi.w	r0, #4294967295
 8008668:	bf98      	it	ls
 800866a:	2001      	movls	r0, #1
 800866c:	4770      	bx	lr
 800866e:	4608      	mov	r0, r1
 8008670:	4770      	bx	lr
	...

08008674 <__assert_func>:
 8008674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008676:	4614      	mov	r4, r2
 8008678:	461a      	mov	r2, r3
 800867a:	4b09      	ldr	r3, [pc, #36]	; (80086a0 <__assert_func+0x2c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4605      	mov	r5, r0
 8008680:	68d8      	ldr	r0, [r3, #12]
 8008682:	b14c      	cbz	r4, 8008698 <__assert_func+0x24>
 8008684:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <__assert_func+0x30>)
 8008686:	9100      	str	r1, [sp, #0]
 8008688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800868c:	4906      	ldr	r1, [pc, #24]	; (80086a8 <__assert_func+0x34>)
 800868e:	462b      	mov	r3, r5
 8008690:	f000 f80e 	bl	80086b0 <fiprintf>
 8008694:	f000 fa8c 	bl	8008bb0 <abort>
 8008698:	4b04      	ldr	r3, [pc, #16]	; (80086ac <__assert_func+0x38>)
 800869a:	461c      	mov	r4, r3
 800869c:	e7f3      	b.n	8008686 <__assert_func+0x12>
 800869e:	bf00      	nop
 80086a0:	20000010 	.word	0x20000010
 80086a4:	0800a36d 	.word	0x0800a36d
 80086a8:	0800a37a 	.word	0x0800a37a
 80086ac:	0800a3a8 	.word	0x0800a3a8

080086b0 <fiprintf>:
 80086b0:	b40e      	push	{r1, r2, r3}
 80086b2:	b503      	push	{r0, r1, lr}
 80086b4:	4601      	mov	r1, r0
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	4805      	ldr	r0, [pc, #20]	; (80086d0 <fiprintf+0x20>)
 80086ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80086be:	6800      	ldr	r0, [r0, #0]
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	f000 f885 	bl	80087d0 <_vfiprintf_r>
 80086c6:	b002      	add	sp, #8
 80086c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086cc:	b003      	add	sp, #12
 80086ce:	4770      	bx	lr
 80086d0:	20000010 	.word	0x20000010

080086d4 <memmove>:
 80086d4:	4288      	cmp	r0, r1
 80086d6:	b510      	push	{r4, lr}
 80086d8:	eb01 0402 	add.w	r4, r1, r2
 80086dc:	d902      	bls.n	80086e4 <memmove+0x10>
 80086de:	4284      	cmp	r4, r0
 80086e0:	4623      	mov	r3, r4
 80086e2:	d807      	bhi.n	80086f4 <memmove+0x20>
 80086e4:	1e43      	subs	r3, r0, #1
 80086e6:	42a1      	cmp	r1, r4
 80086e8:	d008      	beq.n	80086fc <memmove+0x28>
 80086ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086f2:	e7f8      	b.n	80086e6 <memmove+0x12>
 80086f4:	4402      	add	r2, r0
 80086f6:	4601      	mov	r1, r0
 80086f8:	428a      	cmp	r2, r1
 80086fa:	d100      	bne.n	80086fe <memmove+0x2a>
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008706:	e7f7      	b.n	80086f8 <memmove+0x24>

08008708 <__malloc_lock>:
 8008708:	4801      	ldr	r0, [pc, #4]	; (8008710 <__malloc_lock+0x8>)
 800870a:	f000 bc11 	b.w	8008f30 <__retarget_lock_acquire_recursive>
 800870e:	bf00      	nop
 8008710:	2000056c 	.word	0x2000056c

08008714 <__malloc_unlock>:
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <__malloc_unlock+0x8>)
 8008716:	f000 bc0c 	b.w	8008f32 <__retarget_lock_release_recursive>
 800871a:	bf00      	nop
 800871c:	2000056c 	.word	0x2000056c

08008720 <_realloc_r>:
 8008720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008724:	4680      	mov	r8, r0
 8008726:	4614      	mov	r4, r2
 8008728:	460e      	mov	r6, r1
 800872a:	b921      	cbnz	r1, 8008736 <_realloc_r+0x16>
 800872c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008730:	4611      	mov	r1, r2
 8008732:	f7ff bd95 	b.w	8008260 <_malloc_r>
 8008736:	b92a      	cbnz	r2, 8008744 <_realloc_r+0x24>
 8008738:	f7ff fd26 	bl	8008188 <_free_r>
 800873c:	4625      	mov	r5, r4
 800873e:	4628      	mov	r0, r5
 8008740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008744:	f000 fc5c 	bl	8009000 <_malloc_usable_size_r>
 8008748:	4284      	cmp	r4, r0
 800874a:	4607      	mov	r7, r0
 800874c:	d802      	bhi.n	8008754 <_realloc_r+0x34>
 800874e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008752:	d812      	bhi.n	800877a <_realloc_r+0x5a>
 8008754:	4621      	mov	r1, r4
 8008756:	4640      	mov	r0, r8
 8008758:	f7ff fd82 	bl	8008260 <_malloc_r>
 800875c:	4605      	mov	r5, r0
 800875e:	2800      	cmp	r0, #0
 8008760:	d0ed      	beq.n	800873e <_realloc_r+0x1e>
 8008762:	42bc      	cmp	r4, r7
 8008764:	4622      	mov	r2, r4
 8008766:	4631      	mov	r1, r6
 8008768:	bf28      	it	cs
 800876a:	463a      	movcs	r2, r7
 800876c:	f7fc f896 	bl	800489c <memcpy>
 8008770:	4631      	mov	r1, r6
 8008772:	4640      	mov	r0, r8
 8008774:	f7ff fd08 	bl	8008188 <_free_r>
 8008778:	e7e1      	b.n	800873e <_realloc_r+0x1e>
 800877a:	4635      	mov	r5, r6
 800877c:	e7df      	b.n	800873e <_realloc_r+0x1e>

0800877e <__sfputc_r>:
 800877e:	6893      	ldr	r3, [r2, #8]
 8008780:	3b01      	subs	r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	b410      	push	{r4}
 8008786:	6093      	str	r3, [r2, #8]
 8008788:	da08      	bge.n	800879c <__sfputc_r+0x1e>
 800878a:	6994      	ldr	r4, [r2, #24]
 800878c:	42a3      	cmp	r3, r4
 800878e:	db01      	blt.n	8008794 <__sfputc_r+0x16>
 8008790:	290a      	cmp	r1, #10
 8008792:	d103      	bne.n	800879c <__sfputc_r+0x1e>
 8008794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008798:	f000 b94a 	b.w	8008a30 <__swbuf_r>
 800879c:	6813      	ldr	r3, [r2, #0]
 800879e:	1c58      	adds	r0, r3, #1
 80087a0:	6010      	str	r0, [r2, #0]
 80087a2:	7019      	strb	r1, [r3, #0]
 80087a4:	4608      	mov	r0, r1
 80087a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <__sfputs_r>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	4606      	mov	r6, r0
 80087b0:	460f      	mov	r7, r1
 80087b2:	4614      	mov	r4, r2
 80087b4:	18d5      	adds	r5, r2, r3
 80087b6:	42ac      	cmp	r4, r5
 80087b8:	d101      	bne.n	80087be <__sfputs_r+0x12>
 80087ba:	2000      	movs	r0, #0
 80087bc:	e007      	b.n	80087ce <__sfputs_r+0x22>
 80087be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c2:	463a      	mov	r2, r7
 80087c4:	4630      	mov	r0, r6
 80087c6:	f7ff ffda 	bl	800877e <__sfputc_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d1f3      	bne.n	80087b6 <__sfputs_r+0xa>
 80087ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087d0 <_vfiprintf_r>:
 80087d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	460d      	mov	r5, r1
 80087d6:	b09d      	sub	sp, #116	; 0x74
 80087d8:	4614      	mov	r4, r2
 80087da:	4698      	mov	r8, r3
 80087dc:	4606      	mov	r6, r0
 80087de:	b118      	cbz	r0, 80087e8 <_vfiprintf_r+0x18>
 80087e0:	6983      	ldr	r3, [r0, #24]
 80087e2:	b90b      	cbnz	r3, 80087e8 <_vfiprintf_r+0x18>
 80087e4:	f000 fb06 	bl	8008df4 <__sinit>
 80087e8:	4b89      	ldr	r3, [pc, #548]	; (8008a10 <_vfiprintf_r+0x240>)
 80087ea:	429d      	cmp	r5, r3
 80087ec:	d11b      	bne.n	8008826 <_vfiprintf_r+0x56>
 80087ee:	6875      	ldr	r5, [r6, #4]
 80087f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087f2:	07d9      	lsls	r1, r3, #31
 80087f4:	d405      	bmi.n	8008802 <_vfiprintf_r+0x32>
 80087f6:	89ab      	ldrh	r3, [r5, #12]
 80087f8:	059a      	lsls	r2, r3, #22
 80087fa:	d402      	bmi.n	8008802 <_vfiprintf_r+0x32>
 80087fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087fe:	f000 fb97 	bl	8008f30 <__retarget_lock_acquire_recursive>
 8008802:	89ab      	ldrh	r3, [r5, #12]
 8008804:	071b      	lsls	r3, r3, #28
 8008806:	d501      	bpl.n	800880c <_vfiprintf_r+0x3c>
 8008808:	692b      	ldr	r3, [r5, #16]
 800880a:	b9eb      	cbnz	r3, 8008848 <_vfiprintf_r+0x78>
 800880c:	4629      	mov	r1, r5
 800880e:	4630      	mov	r0, r6
 8008810:	f000 f960 	bl	8008ad4 <__swsetup_r>
 8008814:	b1c0      	cbz	r0, 8008848 <_vfiprintf_r+0x78>
 8008816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008818:	07dc      	lsls	r4, r3, #31
 800881a:	d50e      	bpl.n	800883a <_vfiprintf_r+0x6a>
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	b01d      	add	sp, #116	; 0x74
 8008822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008826:	4b7b      	ldr	r3, [pc, #492]	; (8008a14 <_vfiprintf_r+0x244>)
 8008828:	429d      	cmp	r5, r3
 800882a:	d101      	bne.n	8008830 <_vfiprintf_r+0x60>
 800882c:	68b5      	ldr	r5, [r6, #8]
 800882e:	e7df      	b.n	80087f0 <_vfiprintf_r+0x20>
 8008830:	4b79      	ldr	r3, [pc, #484]	; (8008a18 <_vfiprintf_r+0x248>)
 8008832:	429d      	cmp	r5, r3
 8008834:	bf08      	it	eq
 8008836:	68f5      	ldreq	r5, [r6, #12]
 8008838:	e7da      	b.n	80087f0 <_vfiprintf_r+0x20>
 800883a:	89ab      	ldrh	r3, [r5, #12]
 800883c:	0598      	lsls	r0, r3, #22
 800883e:	d4ed      	bmi.n	800881c <_vfiprintf_r+0x4c>
 8008840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008842:	f000 fb76 	bl	8008f32 <__retarget_lock_release_recursive>
 8008846:	e7e9      	b.n	800881c <_vfiprintf_r+0x4c>
 8008848:	2300      	movs	r3, #0
 800884a:	9309      	str	r3, [sp, #36]	; 0x24
 800884c:	2320      	movs	r3, #32
 800884e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008852:	f8cd 800c 	str.w	r8, [sp, #12]
 8008856:	2330      	movs	r3, #48	; 0x30
 8008858:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a1c <_vfiprintf_r+0x24c>
 800885c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008860:	f04f 0901 	mov.w	r9, #1
 8008864:	4623      	mov	r3, r4
 8008866:	469a      	mov	sl, r3
 8008868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886c:	b10a      	cbz	r2, 8008872 <_vfiprintf_r+0xa2>
 800886e:	2a25      	cmp	r2, #37	; 0x25
 8008870:	d1f9      	bne.n	8008866 <_vfiprintf_r+0x96>
 8008872:	ebba 0b04 	subs.w	fp, sl, r4
 8008876:	d00b      	beq.n	8008890 <_vfiprintf_r+0xc0>
 8008878:	465b      	mov	r3, fp
 800887a:	4622      	mov	r2, r4
 800887c:	4629      	mov	r1, r5
 800887e:	4630      	mov	r0, r6
 8008880:	f7ff ff94 	bl	80087ac <__sfputs_r>
 8008884:	3001      	adds	r0, #1
 8008886:	f000 80aa 	beq.w	80089de <_vfiprintf_r+0x20e>
 800888a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800888c:	445a      	add	r2, fp
 800888e:	9209      	str	r2, [sp, #36]	; 0x24
 8008890:	f89a 3000 	ldrb.w	r3, [sl]
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 80a2 	beq.w	80089de <_vfiprintf_r+0x20e>
 800889a:	2300      	movs	r3, #0
 800889c:	f04f 32ff 	mov.w	r2, #4294967295
 80088a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a4:	f10a 0a01 	add.w	sl, sl, #1
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	9307      	str	r3, [sp, #28]
 80088ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088b0:	931a      	str	r3, [sp, #104]	; 0x68
 80088b2:	4654      	mov	r4, sl
 80088b4:	2205      	movs	r2, #5
 80088b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ba:	4858      	ldr	r0, [pc, #352]	; (8008a1c <_vfiprintf_r+0x24c>)
 80088bc:	f7f7 fc90 	bl	80001e0 <memchr>
 80088c0:	9a04      	ldr	r2, [sp, #16]
 80088c2:	b9d8      	cbnz	r0, 80088fc <_vfiprintf_r+0x12c>
 80088c4:	06d1      	lsls	r1, r2, #27
 80088c6:	bf44      	itt	mi
 80088c8:	2320      	movmi	r3, #32
 80088ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ce:	0713      	lsls	r3, r2, #28
 80088d0:	bf44      	itt	mi
 80088d2:	232b      	movmi	r3, #43	; 0x2b
 80088d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088d8:	f89a 3000 	ldrb.w	r3, [sl]
 80088dc:	2b2a      	cmp	r3, #42	; 0x2a
 80088de:	d015      	beq.n	800890c <_vfiprintf_r+0x13c>
 80088e0:	9a07      	ldr	r2, [sp, #28]
 80088e2:	4654      	mov	r4, sl
 80088e4:	2000      	movs	r0, #0
 80088e6:	f04f 0c0a 	mov.w	ip, #10
 80088ea:	4621      	mov	r1, r4
 80088ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088f0:	3b30      	subs	r3, #48	; 0x30
 80088f2:	2b09      	cmp	r3, #9
 80088f4:	d94e      	bls.n	8008994 <_vfiprintf_r+0x1c4>
 80088f6:	b1b0      	cbz	r0, 8008926 <_vfiprintf_r+0x156>
 80088f8:	9207      	str	r2, [sp, #28]
 80088fa:	e014      	b.n	8008926 <_vfiprintf_r+0x156>
 80088fc:	eba0 0308 	sub.w	r3, r0, r8
 8008900:	fa09 f303 	lsl.w	r3, r9, r3
 8008904:	4313      	orrs	r3, r2
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	46a2      	mov	sl, r4
 800890a:	e7d2      	b.n	80088b2 <_vfiprintf_r+0xe2>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	1d19      	adds	r1, r3, #4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	9103      	str	r1, [sp, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	bfbb      	ittet	lt
 8008918:	425b      	neglt	r3, r3
 800891a:	f042 0202 	orrlt.w	r2, r2, #2
 800891e:	9307      	strge	r3, [sp, #28]
 8008920:	9307      	strlt	r3, [sp, #28]
 8008922:	bfb8      	it	lt
 8008924:	9204      	strlt	r2, [sp, #16]
 8008926:	7823      	ldrb	r3, [r4, #0]
 8008928:	2b2e      	cmp	r3, #46	; 0x2e
 800892a:	d10c      	bne.n	8008946 <_vfiprintf_r+0x176>
 800892c:	7863      	ldrb	r3, [r4, #1]
 800892e:	2b2a      	cmp	r3, #42	; 0x2a
 8008930:	d135      	bne.n	800899e <_vfiprintf_r+0x1ce>
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	1d1a      	adds	r2, r3, #4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	9203      	str	r2, [sp, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	bfb8      	it	lt
 800893e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008942:	3402      	adds	r4, #2
 8008944:	9305      	str	r3, [sp, #20]
 8008946:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a2c <_vfiprintf_r+0x25c>
 800894a:	7821      	ldrb	r1, [r4, #0]
 800894c:	2203      	movs	r2, #3
 800894e:	4650      	mov	r0, sl
 8008950:	f7f7 fc46 	bl	80001e0 <memchr>
 8008954:	b140      	cbz	r0, 8008968 <_vfiprintf_r+0x198>
 8008956:	2340      	movs	r3, #64	; 0x40
 8008958:	eba0 000a 	sub.w	r0, r0, sl
 800895c:	fa03 f000 	lsl.w	r0, r3, r0
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	4303      	orrs	r3, r0
 8008964:	3401      	adds	r4, #1
 8008966:	9304      	str	r3, [sp, #16]
 8008968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896c:	482c      	ldr	r0, [pc, #176]	; (8008a20 <_vfiprintf_r+0x250>)
 800896e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008972:	2206      	movs	r2, #6
 8008974:	f7f7 fc34 	bl	80001e0 <memchr>
 8008978:	2800      	cmp	r0, #0
 800897a:	d03f      	beq.n	80089fc <_vfiprintf_r+0x22c>
 800897c:	4b29      	ldr	r3, [pc, #164]	; (8008a24 <_vfiprintf_r+0x254>)
 800897e:	bb1b      	cbnz	r3, 80089c8 <_vfiprintf_r+0x1f8>
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	3307      	adds	r3, #7
 8008984:	f023 0307 	bic.w	r3, r3, #7
 8008988:	3308      	adds	r3, #8
 800898a:	9303      	str	r3, [sp, #12]
 800898c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800898e:	443b      	add	r3, r7
 8008990:	9309      	str	r3, [sp, #36]	; 0x24
 8008992:	e767      	b.n	8008864 <_vfiprintf_r+0x94>
 8008994:	fb0c 3202 	mla	r2, ip, r2, r3
 8008998:	460c      	mov	r4, r1
 800899a:	2001      	movs	r0, #1
 800899c:	e7a5      	b.n	80088ea <_vfiprintf_r+0x11a>
 800899e:	2300      	movs	r3, #0
 80089a0:	3401      	adds	r4, #1
 80089a2:	9305      	str	r3, [sp, #20]
 80089a4:	4619      	mov	r1, r3
 80089a6:	f04f 0c0a 	mov.w	ip, #10
 80089aa:	4620      	mov	r0, r4
 80089ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089b0:	3a30      	subs	r2, #48	; 0x30
 80089b2:	2a09      	cmp	r2, #9
 80089b4:	d903      	bls.n	80089be <_vfiprintf_r+0x1ee>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0c5      	beq.n	8008946 <_vfiprintf_r+0x176>
 80089ba:	9105      	str	r1, [sp, #20]
 80089bc:	e7c3      	b.n	8008946 <_vfiprintf_r+0x176>
 80089be:	fb0c 2101 	mla	r1, ip, r1, r2
 80089c2:	4604      	mov	r4, r0
 80089c4:	2301      	movs	r3, #1
 80089c6:	e7f0      	b.n	80089aa <_vfiprintf_r+0x1da>
 80089c8:	ab03      	add	r3, sp, #12
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	462a      	mov	r2, r5
 80089ce:	4b16      	ldr	r3, [pc, #88]	; (8008a28 <_vfiprintf_r+0x258>)
 80089d0:	a904      	add	r1, sp, #16
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7fc f818 	bl	8004a08 <_printf_float>
 80089d8:	4607      	mov	r7, r0
 80089da:	1c78      	adds	r0, r7, #1
 80089dc:	d1d6      	bne.n	800898c <_vfiprintf_r+0x1bc>
 80089de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089e0:	07d9      	lsls	r1, r3, #31
 80089e2:	d405      	bmi.n	80089f0 <_vfiprintf_r+0x220>
 80089e4:	89ab      	ldrh	r3, [r5, #12]
 80089e6:	059a      	lsls	r2, r3, #22
 80089e8:	d402      	bmi.n	80089f0 <_vfiprintf_r+0x220>
 80089ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ec:	f000 faa1 	bl	8008f32 <__retarget_lock_release_recursive>
 80089f0:	89ab      	ldrh	r3, [r5, #12]
 80089f2:	065b      	lsls	r3, r3, #25
 80089f4:	f53f af12 	bmi.w	800881c <_vfiprintf_r+0x4c>
 80089f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089fa:	e711      	b.n	8008820 <_vfiprintf_r+0x50>
 80089fc:	ab03      	add	r3, sp, #12
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	462a      	mov	r2, r5
 8008a02:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <_vfiprintf_r+0x258>)
 8008a04:	a904      	add	r1, sp, #16
 8008a06:	4630      	mov	r0, r6
 8008a08:	f7fc faa2 	bl	8004f50 <_printf_i>
 8008a0c:	e7e4      	b.n	80089d8 <_vfiprintf_r+0x208>
 8008a0e:	bf00      	nop
 8008a10:	0800a3cc 	.word	0x0800a3cc
 8008a14:	0800a3ec 	.word	0x0800a3ec
 8008a18:	0800a3ac 	.word	0x0800a3ac
 8008a1c:	0800a35c 	.word	0x0800a35c
 8008a20:	0800a366 	.word	0x0800a366
 8008a24:	08004a09 	.word	0x08004a09
 8008a28:	080087ad 	.word	0x080087ad
 8008a2c:	0800a362 	.word	0x0800a362

08008a30 <__swbuf_r>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	460e      	mov	r6, r1
 8008a34:	4614      	mov	r4, r2
 8008a36:	4605      	mov	r5, r0
 8008a38:	b118      	cbz	r0, 8008a42 <__swbuf_r+0x12>
 8008a3a:	6983      	ldr	r3, [r0, #24]
 8008a3c:	b90b      	cbnz	r3, 8008a42 <__swbuf_r+0x12>
 8008a3e:	f000 f9d9 	bl	8008df4 <__sinit>
 8008a42:	4b21      	ldr	r3, [pc, #132]	; (8008ac8 <__swbuf_r+0x98>)
 8008a44:	429c      	cmp	r4, r3
 8008a46:	d12b      	bne.n	8008aa0 <__swbuf_r+0x70>
 8008a48:	686c      	ldr	r4, [r5, #4]
 8008a4a:	69a3      	ldr	r3, [r4, #24]
 8008a4c:	60a3      	str	r3, [r4, #8]
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	071a      	lsls	r2, r3, #28
 8008a52:	d52f      	bpl.n	8008ab4 <__swbuf_r+0x84>
 8008a54:	6923      	ldr	r3, [r4, #16]
 8008a56:	b36b      	cbz	r3, 8008ab4 <__swbuf_r+0x84>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	6820      	ldr	r0, [r4, #0]
 8008a5c:	1ac0      	subs	r0, r0, r3
 8008a5e:	6963      	ldr	r3, [r4, #20]
 8008a60:	b2f6      	uxtb	r6, r6
 8008a62:	4283      	cmp	r3, r0
 8008a64:	4637      	mov	r7, r6
 8008a66:	dc04      	bgt.n	8008a72 <__swbuf_r+0x42>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f92e 	bl	8008ccc <_fflush_r>
 8008a70:	bb30      	cbnz	r0, 8008ac0 <__swbuf_r+0x90>
 8008a72:	68a3      	ldr	r3, [r4, #8]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	60a3      	str	r3, [r4, #8]
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	6022      	str	r2, [r4, #0]
 8008a7e:	701e      	strb	r6, [r3, #0]
 8008a80:	6963      	ldr	r3, [r4, #20]
 8008a82:	3001      	adds	r0, #1
 8008a84:	4283      	cmp	r3, r0
 8008a86:	d004      	beq.n	8008a92 <__swbuf_r+0x62>
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	07db      	lsls	r3, r3, #31
 8008a8c:	d506      	bpl.n	8008a9c <__swbuf_r+0x6c>
 8008a8e:	2e0a      	cmp	r6, #10
 8008a90:	d104      	bne.n	8008a9c <__swbuf_r+0x6c>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 f919 	bl	8008ccc <_fflush_r>
 8008a9a:	b988      	cbnz	r0, 8008ac0 <__swbuf_r+0x90>
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <__swbuf_r+0x9c>)
 8008aa2:	429c      	cmp	r4, r3
 8008aa4:	d101      	bne.n	8008aaa <__swbuf_r+0x7a>
 8008aa6:	68ac      	ldr	r4, [r5, #8]
 8008aa8:	e7cf      	b.n	8008a4a <__swbuf_r+0x1a>
 8008aaa:	4b09      	ldr	r3, [pc, #36]	; (8008ad0 <__swbuf_r+0xa0>)
 8008aac:	429c      	cmp	r4, r3
 8008aae:	bf08      	it	eq
 8008ab0:	68ec      	ldreq	r4, [r5, #12]
 8008ab2:	e7ca      	b.n	8008a4a <__swbuf_r+0x1a>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f000 f80c 	bl	8008ad4 <__swsetup_r>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d0cb      	beq.n	8008a58 <__swbuf_r+0x28>
 8008ac0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ac4:	e7ea      	b.n	8008a9c <__swbuf_r+0x6c>
 8008ac6:	bf00      	nop
 8008ac8:	0800a3cc 	.word	0x0800a3cc
 8008acc:	0800a3ec 	.word	0x0800a3ec
 8008ad0:	0800a3ac 	.word	0x0800a3ac

08008ad4 <__swsetup_r>:
 8008ad4:	4b32      	ldr	r3, [pc, #200]	; (8008ba0 <__swsetup_r+0xcc>)
 8008ad6:	b570      	push	{r4, r5, r6, lr}
 8008ad8:	681d      	ldr	r5, [r3, #0]
 8008ada:	4606      	mov	r6, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	b125      	cbz	r5, 8008aea <__swsetup_r+0x16>
 8008ae0:	69ab      	ldr	r3, [r5, #24]
 8008ae2:	b913      	cbnz	r3, 8008aea <__swsetup_r+0x16>
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 f985 	bl	8008df4 <__sinit>
 8008aea:	4b2e      	ldr	r3, [pc, #184]	; (8008ba4 <__swsetup_r+0xd0>)
 8008aec:	429c      	cmp	r4, r3
 8008aee:	d10f      	bne.n	8008b10 <__swsetup_r+0x3c>
 8008af0:	686c      	ldr	r4, [r5, #4]
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008af8:	0719      	lsls	r1, r3, #28
 8008afa:	d42c      	bmi.n	8008b56 <__swsetup_r+0x82>
 8008afc:	06dd      	lsls	r5, r3, #27
 8008afe:	d411      	bmi.n	8008b24 <__swsetup_r+0x50>
 8008b00:	2309      	movs	r3, #9
 8008b02:	6033      	str	r3, [r6, #0]
 8008b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b08:	81a3      	strh	r3, [r4, #12]
 8008b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0e:	e03e      	b.n	8008b8e <__swsetup_r+0xba>
 8008b10:	4b25      	ldr	r3, [pc, #148]	; (8008ba8 <__swsetup_r+0xd4>)
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d101      	bne.n	8008b1a <__swsetup_r+0x46>
 8008b16:	68ac      	ldr	r4, [r5, #8]
 8008b18:	e7eb      	b.n	8008af2 <__swsetup_r+0x1e>
 8008b1a:	4b24      	ldr	r3, [pc, #144]	; (8008bac <__swsetup_r+0xd8>)
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	bf08      	it	eq
 8008b20:	68ec      	ldreq	r4, [r5, #12]
 8008b22:	e7e6      	b.n	8008af2 <__swsetup_r+0x1e>
 8008b24:	0758      	lsls	r0, r3, #29
 8008b26:	d512      	bpl.n	8008b4e <__swsetup_r+0x7a>
 8008b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b2a:	b141      	cbz	r1, 8008b3e <__swsetup_r+0x6a>
 8008b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d002      	beq.n	8008b3a <__swsetup_r+0x66>
 8008b34:	4630      	mov	r0, r6
 8008b36:	f7ff fb27 	bl	8008188 <_free_r>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b44:	81a3      	strh	r3, [r4, #12]
 8008b46:	2300      	movs	r3, #0
 8008b48:	6063      	str	r3, [r4, #4]
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f043 0308 	orr.w	r3, r3, #8
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	b94b      	cbnz	r3, 8008b6e <__swsetup_r+0x9a>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b64:	d003      	beq.n	8008b6e <__swsetup_r+0x9a>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 fa09 	bl	8008f80 <__smakebuf_r>
 8008b6e:	89a0      	ldrh	r0, [r4, #12]
 8008b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b74:	f010 0301 	ands.w	r3, r0, #1
 8008b78:	d00a      	beq.n	8008b90 <__swsetup_r+0xbc>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60a3      	str	r3, [r4, #8]
 8008b7e:	6963      	ldr	r3, [r4, #20]
 8008b80:	425b      	negs	r3, r3
 8008b82:	61a3      	str	r3, [r4, #24]
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	b943      	cbnz	r3, 8008b9a <__swsetup_r+0xc6>
 8008b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b8c:	d1ba      	bne.n	8008b04 <__swsetup_r+0x30>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	0781      	lsls	r1, r0, #30
 8008b92:	bf58      	it	pl
 8008b94:	6963      	ldrpl	r3, [r4, #20]
 8008b96:	60a3      	str	r3, [r4, #8]
 8008b98:	e7f4      	b.n	8008b84 <__swsetup_r+0xb0>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e7f7      	b.n	8008b8e <__swsetup_r+0xba>
 8008b9e:	bf00      	nop
 8008ba0:	20000010 	.word	0x20000010
 8008ba4:	0800a3cc 	.word	0x0800a3cc
 8008ba8:	0800a3ec 	.word	0x0800a3ec
 8008bac:	0800a3ac 	.word	0x0800a3ac

08008bb0 <abort>:
 8008bb0:	b508      	push	{r3, lr}
 8008bb2:	2006      	movs	r0, #6
 8008bb4:	f000 fa54 	bl	8009060 <raise>
 8008bb8:	2001      	movs	r0, #1
 8008bba:	f7f8 ff1d 	bl	80019f8 <_exit>
	...

08008bc0 <__sflush_r>:
 8008bc0:	898a      	ldrh	r2, [r1, #12]
 8008bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	0710      	lsls	r0, r2, #28
 8008bca:	460c      	mov	r4, r1
 8008bcc:	d458      	bmi.n	8008c80 <__sflush_r+0xc0>
 8008bce:	684b      	ldr	r3, [r1, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dc05      	bgt.n	8008be0 <__sflush_r+0x20>
 8008bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dc02      	bgt.n	8008be0 <__sflush_r+0x20>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008be2:	2e00      	cmp	r6, #0
 8008be4:	d0f9      	beq.n	8008bda <__sflush_r+0x1a>
 8008be6:	2300      	movs	r3, #0
 8008be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bec:	682f      	ldr	r7, [r5, #0]
 8008bee:	602b      	str	r3, [r5, #0]
 8008bf0:	d032      	beq.n	8008c58 <__sflush_r+0x98>
 8008bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	075a      	lsls	r2, r3, #29
 8008bf8:	d505      	bpl.n	8008c06 <__sflush_r+0x46>
 8008bfa:	6863      	ldr	r3, [r4, #4]
 8008bfc:	1ac0      	subs	r0, r0, r3
 8008bfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c00:	b10b      	cbz	r3, 8008c06 <__sflush_r+0x46>
 8008c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c04:	1ac0      	subs	r0, r0, r3
 8008c06:	2300      	movs	r3, #0
 8008c08:	4602      	mov	r2, r0
 8008c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c0c:	6a21      	ldr	r1, [r4, #32]
 8008c0e:	4628      	mov	r0, r5
 8008c10:	47b0      	blx	r6
 8008c12:	1c43      	adds	r3, r0, #1
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	d106      	bne.n	8008c26 <__sflush_r+0x66>
 8008c18:	6829      	ldr	r1, [r5, #0]
 8008c1a:	291d      	cmp	r1, #29
 8008c1c:	d82c      	bhi.n	8008c78 <__sflush_r+0xb8>
 8008c1e:	4a2a      	ldr	r2, [pc, #168]	; (8008cc8 <__sflush_r+0x108>)
 8008c20:	40ca      	lsrs	r2, r1
 8008c22:	07d6      	lsls	r6, r2, #31
 8008c24:	d528      	bpl.n	8008c78 <__sflush_r+0xb8>
 8008c26:	2200      	movs	r2, #0
 8008c28:	6062      	str	r2, [r4, #4]
 8008c2a:	04d9      	lsls	r1, r3, #19
 8008c2c:	6922      	ldr	r2, [r4, #16]
 8008c2e:	6022      	str	r2, [r4, #0]
 8008c30:	d504      	bpl.n	8008c3c <__sflush_r+0x7c>
 8008c32:	1c42      	adds	r2, r0, #1
 8008c34:	d101      	bne.n	8008c3a <__sflush_r+0x7a>
 8008c36:	682b      	ldr	r3, [r5, #0]
 8008c38:	b903      	cbnz	r3, 8008c3c <__sflush_r+0x7c>
 8008c3a:	6560      	str	r0, [r4, #84]	; 0x54
 8008c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c3e:	602f      	str	r7, [r5, #0]
 8008c40:	2900      	cmp	r1, #0
 8008c42:	d0ca      	beq.n	8008bda <__sflush_r+0x1a>
 8008c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c48:	4299      	cmp	r1, r3
 8008c4a:	d002      	beq.n	8008c52 <__sflush_r+0x92>
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f7ff fa9b 	bl	8008188 <_free_r>
 8008c52:	2000      	movs	r0, #0
 8008c54:	6360      	str	r0, [r4, #52]	; 0x34
 8008c56:	e7c1      	b.n	8008bdc <__sflush_r+0x1c>
 8008c58:	6a21      	ldr	r1, [r4, #32]
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b0      	blx	r6
 8008c60:	1c41      	adds	r1, r0, #1
 8008c62:	d1c7      	bne.n	8008bf4 <__sflush_r+0x34>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0c4      	beq.n	8008bf4 <__sflush_r+0x34>
 8008c6a:	2b1d      	cmp	r3, #29
 8008c6c:	d001      	beq.n	8008c72 <__sflush_r+0xb2>
 8008c6e:	2b16      	cmp	r3, #22
 8008c70:	d101      	bne.n	8008c76 <__sflush_r+0xb6>
 8008c72:	602f      	str	r7, [r5, #0]
 8008c74:	e7b1      	b.n	8008bda <__sflush_r+0x1a>
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c7c:	81a3      	strh	r3, [r4, #12]
 8008c7e:	e7ad      	b.n	8008bdc <__sflush_r+0x1c>
 8008c80:	690f      	ldr	r7, [r1, #16]
 8008c82:	2f00      	cmp	r7, #0
 8008c84:	d0a9      	beq.n	8008bda <__sflush_r+0x1a>
 8008c86:	0793      	lsls	r3, r2, #30
 8008c88:	680e      	ldr	r6, [r1, #0]
 8008c8a:	bf08      	it	eq
 8008c8c:	694b      	ldreq	r3, [r1, #20]
 8008c8e:	600f      	str	r7, [r1, #0]
 8008c90:	bf18      	it	ne
 8008c92:	2300      	movne	r3, #0
 8008c94:	eba6 0807 	sub.w	r8, r6, r7
 8008c98:	608b      	str	r3, [r1, #8]
 8008c9a:	f1b8 0f00 	cmp.w	r8, #0
 8008c9e:	dd9c      	ble.n	8008bda <__sflush_r+0x1a>
 8008ca0:	6a21      	ldr	r1, [r4, #32]
 8008ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ca4:	4643      	mov	r3, r8
 8008ca6:	463a      	mov	r2, r7
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47b0      	blx	r6
 8008cac:	2800      	cmp	r0, #0
 8008cae:	dc06      	bgt.n	8008cbe <__sflush_r+0xfe>
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb6:	81a3      	strh	r3, [r4, #12]
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e78e      	b.n	8008bdc <__sflush_r+0x1c>
 8008cbe:	4407      	add	r7, r0
 8008cc0:	eba8 0800 	sub.w	r8, r8, r0
 8008cc4:	e7e9      	b.n	8008c9a <__sflush_r+0xda>
 8008cc6:	bf00      	nop
 8008cc8:	20400001 	.word	0x20400001

08008ccc <_fflush_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	690b      	ldr	r3, [r1, #16]
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	b913      	cbnz	r3, 8008cdc <_fflush_r+0x10>
 8008cd6:	2500      	movs	r5, #0
 8008cd8:	4628      	mov	r0, r5
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	b118      	cbz	r0, 8008ce6 <_fflush_r+0x1a>
 8008cde:	6983      	ldr	r3, [r0, #24]
 8008ce0:	b90b      	cbnz	r3, 8008ce6 <_fflush_r+0x1a>
 8008ce2:	f000 f887 	bl	8008df4 <__sinit>
 8008ce6:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <_fflush_r+0x6c>)
 8008ce8:	429c      	cmp	r4, r3
 8008cea:	d11b      	bne.n	8008d24 <_fflush_r+0x58>
 8008cec:	686c      	ldr	r4, [r5, #4]
 8008cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0ef      	beq.n	8008cd6 <_fflush_r+0xa>
 8008cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cf8:	07d0      	lsls	r0, r2, #31
 8008cfa:	d404      	bmi.n	8008d06 <_fflush_r+0x3a>
 8008cfc:	0599      	lsls	r1, r3, #22
 8008cfe:	d402      	bmi.n	8008d06 <_fflush_r+0x3a>
 8008d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d02:	f000 f915 	bl	8008f30 <__retarget_lock_acquire_recursive>
 8008d06:	4628      	mov	r0, r5
 8008d08:	4621      	mov	r1, r4
 8008d0a:	f7ff ff59 	bl	8008bc0 <__sflush_r>
 8008d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d10:	07da      	lsls	r2, r3, #31
 8008d12:	4605      	mov	r5, r0
 8008d14:	d4e0      	bmi.n	8008cd8 <_fflush_r+0xc>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	059b      	lsls	r3, r3, #22
 8008d1a:	d4dd      	bmi.n	8008cd8 <_fflush_r+0xc>
 8008d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1e:	f000 f908 	bl	8008f32 <__retarget_lock_release_recursive>
 8008d22:	e7d9      	b.n	8008cd8 <_fflush_r+0xc>
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <_fflush_r+0x70>)
 8008d26:	429c      	cmp	r4, r3
 8008d28:	d101      	bne.n	8008d2e <_fflush_r+0x62>
 8008d2a:	68ac      	ldr	r4, [r5, #8]
 8008d2c:	e7df      	b.n	8008cee <_fflush_r+0x22>
 8008d2e:	4b04      	ldr	r3, [pc, #16]	; (8008d40 <_fflush_r+0x74>)
 8008d30:	429c      	cmp	r4, r3
 8008d32:	bf08      	it	eq
 8008d34:	68ec      	ldreq	r4, [r5, #12]
 8008d36:	e7da      	b.n	8008cee <_fflush_r+0x22>
 8008d38:	0800a3cc 	.word	0x0800a3cc
 8008d3c:	0800a3ec 	.word	0x0800a3ec
 8008d40:	0800a3ac 	.word	0x0800a3ac

08008d44 <std>:
 8008d44:	2300      	movs	r3, #0
 8008d46:	b510      	push	{r4, lr}
 8008d48:	4604      	mov	r4, r0
 8008d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d52:	6083      	str	r3, [r0, #8]
 8008d54:	8181      	strh	r1, [r0, #12]
 8008d56:	6643      	str	r3, [r0, #100]	; 0x64
 8008d58:	81c2      	strh	r2, [r0, #14]
 8008d5a:	6183      	str	r3, [r0, #24]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	2208      	movs	r2, #8
 8008d60:	305c      	adds	r0, #92	; 0x5c
 8008d62:	f7fb fda9 	bl	80048b8 <memset>
 8008d66:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <std+0x38>)
 8008d68:	6263      	str	r3, [r4, #36]	; 0x24
 8008d6a:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <std+0x3c>)
 8008d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <std+0x40>)
 8008d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d72:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <std+0x44>)
 8008d74:	6224      	str	r4, [r4, #32]
 8008d76:	6323      	str	r3, [r4, #48]	; 0x30
 8008d78:	bd10      	pop	{r4, pc}
 8008d7a:	bf00      	nop
 8008d7c:	08009099 	.word	0x08009099
 8008d80:	080090bb 	.word	0x080090bb
 8008d84:	080090f3 	.word	0x080090f3
 8008d88:	08009117 	.word	0x08009117

08008d8c <_cleanup_r>:
 8008d8c:	4901      	ldr	r1, [pc, #4]	; (8008d94 <_cleanup_r+0x8>)
 8008d8e:	f000 b8af 	b.w	8008ef0 <_fwalk_reent>
 8008d92:	bf00      	nop
 8008d94:	08008ccd 	.word	0x08008ccd

08008d98 <__sfmoreglue>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	2268      	movs	r2, #104	; 0x68
 8008d9c:	1e4d      	subs	r5, r1, #1
 8008d9e:	4355      	muls	r5, r2
 8008da0:	460e      	mov	r6, r1
 8008da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008da6:	f7ff fa5b 	bl	8008260 <_malloc_r>
 8008daa:	4604      	mov	r4, r0
 8008dac:	b140      	cbz	r0, 8008dc0 <__sfmoreglue+0x28>
 8008dae:	2100      	movs	r1, #0
 8008db0:	e9c0 1600 	strd	r1, r6, [r0]
 8008db4:	300c      	adds	r0, #12
 8008db6:	60a0      	str	r0, [r4, #8]
 8008db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dbc:	f7fb fd7c 	bl	80048b8 <memset>
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}

08008dc4 <__sfp_lock_acquire>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	; (8008dcc <__sfp_lock_acquire+0x8>)
 8008dc6:	f000 b8b3 	b.w	8008f30 <__retarget_lock_acquire_recursive>
 8008dca:	bf00      	nop
 8008dcc:	2000056d 	.word	0x2000056d

08008dd0 <__sfp_lock_release>:
 8008dd0:	4801      	ldr	r0, [pc, #4]	; (8008dd8 <__sfp_lock_release+0x8>)
 8008dd2:	f000 b8ae 	b.w	8008f32 <__retarget_lock_release_recursive>
 8008dd6:	bf00      	nop
 8008dd8:	2000056d 	.word	0x2000056d

08008ddc <__sinit_lock_acquire>:
 8008ddc:	4801      	ldr	r0, [pc, #4]	; (8008de4 <__sinit_lock_acquire+0x8>)
 8008dde:	f000 b8a7 	b.w	8008f30 <__retarget_lock_acquire_recursive>
 8008de2:	bf00      	nop
 8008de4:	2000056e 	.word	0x2000056e

08008de8 <__sinit_lock_release>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__sinit_lock_release+0x8>)
 8008dea:	f000 b8a2 	b.w	8008f32 <__retarget_lock_release_recursive>
 8008dee:	bf00      	nop
 8008df0:	2000056e 	.word	0x2000056e

08008df4 <__sinit>:
 8008df4:	b510      	push	{r4, lr}
 8008df6:	4604      	mov	r4, r0
 8008df8:	f7ff fff0 	bl	8008ddc <__sinit_lock_acquire>
 8008dfc:	69a3      	ldr	r3, [r4, #24]
 8008dfe:	b11b      	cbz	r3, 8008e08 <__sinit+0x14>
 8008e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e04:	f7ff bff0 	b.w	8008de8 <__sinit_lock_release>
 8008e08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8008e0e:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <__sinit+0x68>)
 8008e10:	4a13      	ldr	r2, [pc, #76]	; (8008e60 <__sinit+0x6c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	bf04      	itt	eq
 8008e1a:	2301      	moveq	r3, #1
 8008e1c:	61a3      	streq	r3, [r4, #24]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 f820 	bl	8008e64 <__sfp>
 8008e24:	6060      	str	r0, [r4, #4]
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 f81c 	bl	8008e64 <__sfp>
 8008e2c:	60a0      	str	r0, [r4, #8]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 f818 	bl	8008e64 <__sfp>
 8008e34:	2200      	movs	r2, #0
 8008e36:	60e0      	str	r0, [r4, #12]
 8008e38:	2104      	movs	r1, #4
 8008e3a:	6860      	ldr	r0, [r4, #4]
 8008e3c:	f7ff ff82 	bl	8008d44 <std>
 8008e40:	68a0      	ldr	r0, [r4, #8]
 8008e42:	2201      	movs	r2, #1
 8008e44:	2109      	movs	r1, #9
 8008e46:	f7ff ff7d 	bl	8008d44 <std>
 8008e4a:	68e0      	ldr	r0, [r4, #12]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	2112      	movs	r1, #18
 8008e50:	f7ff ff78 	bl	8008d44 <std>
 8008e54:	2301      	movs	r3, #1
 8008e56:	61a3      	str	r3, [r4, #24]
 8008e58:	e7d2      	b.n	8008e00 <__sinit+0xc>
 8008e5a:	bf00      	nop
 8008e5c:	08009f68 	.word	0x08009f68
 8008e60:	08008d8d 	.word	0x08008d8d

08008e64 <__sfp>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	4607      	mov	r7, r0
 8008e68:	f7ff ffac 	bl	8008dc4 <__sfp_lock_acquire>
 8008e6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ee8 <__sfp+0x84>)
 8008e6e:	681e      	ldr	r6, [r3, #0]
 8008e70:	69b3      	ldr	r3, [r6, #24]
 8008e72:	b913      	cbnz	r3, 8008e7a <__sfp+0x16>
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ffbd 	bl	8008df4 <__sinit>
 8008e7a:	3648      	adds	r6, #72	; 0x48
 8008e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	d503      	bpl.n	8008e8c <__sfp+0x28>
 8008e84:	6833      	ldr	r3, [r6, #0]
 8008e86:	b30b      	cbz	r3, 8008ecc <__sfp+0x68>
 8008e88:	6836      	ldr	r6, [r6, #0]
 8008e8a:	e7f7      	b.n	8008e7c <__sfp+0x18>
 8008e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e90:	b9d5      	cbnz	r5, 8008ec8 <__sfp+0x64>
 8008e92:	4b16      	ldr	r3, [pc, #88]	; (8008eec <__sfp+0x88>)
 8008e94:	60e3      	str	r3, [r4, #12]
 8008e96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e9a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e9c:	f000 f847 	bl	8008f2e <__retarget_lock_init_recursive>
 8008ea0:	f7ff ff96 	bl	8008dd0 <__sfp_lock_release>
 8008ea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008eac:	6025      	str	r5, [r4, #0]
 8008eae:	61a5      	str	r5, [r4, #24]
 8008eb0:	2208      	movs	r2, #8
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008eb8:	f7fb fcfe 	bl	80048b8 <memset>
 8008ebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec8:	3468      	adds	r4, #104	; 0x68
 8008eca:	e7d9      	b.n	8008e80 <__sfp+0x1c>
 8008ecc:	2104      	movs	r1, #4
 8008ece:	4638      	mov	r0, r7
 8008ed0:	f7ff ff62 	bl	8008d98 <__sfmoreglue>
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	6030      	str	r0, [r6, #0]
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d1d5      	bne.n	8008e88 <__sfp+0x24>
 8008edc:	f7ff ff78 	bl	8008dd0 <__sfp_lock_release>
 8008ee0:	230c      	movs	r3, #12
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	e7ee      	b.n	8008ec4 <__sfp+0x60>
 8008ee6:	bf00      	nop
 8008ee8:	08009f68 	.word	0x08009f68
 8008eec:	ffff0001 	.word	0xffff0001

08008ef0 <_fwalk_reent>:
 8008ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	4688      	mov	r8, r1
 8008ef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008efc:	2700      	movs	r7, #0
 8008efe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f02:	f1b9 0901 	subs.w	r9, r9, #1
 8008f06:	d505      	bpl.n	8008f14 <_fwalk_reent+0x24>
 8008f08:	6824      	ldr	r4, [r4, #0]
 8008f0a:	2c00      	cmp	r4, #0
 8008f0c:	d1f7      	bne.n	8008efe <_fwalk_reent+0xe>
 8008f0e:	4638      	mov	r0, r7
 8008f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f14:	89ab      	ldrh	r3, [r5, #12]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d907      	bls.n	8008f2a <_fwalk_reent+0x3a>
 8008f1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	d003      	beq.n	8008f2a <_fwalk_reent+0x3a>
 8008f22:	4629      	mov	r1, r5
 8008f24:	4630      	mov	r0, r6
 8008f26:	47c0      	blx	r8
 8008f28:	4307      	orrs	r7, r0
 8008f2a:	3568      	adds	r5, #104	; 0x68
 8008f2c:	e7e9      	b.n	8008f02 <_fwalk_reent+0x12>

08008f2e <__retarget_lock_init_recursive>:
 8008f2e:	4770      	bx	lr

08008f30 <__retarget_lock_acquire_recursive>:
 8008f30:	4770      	bx	lr

08008f32 <__retarget_lock_release_recursive>:
 8008f32:	4770      	bx	lr

08008f34 <__swhatbuf_r>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	460e      	mov	r6, r1
 8008f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3c:	2900      	cmp	r1, #0
 8008f3e:	b096      	sub	sp, #88	; 0x58
 8008f40:	4614      	mov	r4, r2
 8008f42:	461d      	mov	r5, r3
 8008f44:	da08      	bge.n	8008f58 <__swhatbuf_r+0x24>
 8008f46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	602a      	str	r2, [r5, #0]
 8008f4e:	061a      	lsls	r2, r3, #24
 8008f50:	d410      	bmi.n	8008f74 <__swhatbuf_r+0x40>
 8008f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f56:	e00e      	b.n	8008f76 <__swhatbuf_r+0x42>
 8008f58:	466a      	mov	r2, sp
 8008f5a:	f000 f903 	bl	8009164 <_fstat_r>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	dbf1      	blt.n	8008f46 <__swhatbuf_r+0x12>
 8008f62:	9a01      	ldr	r2, [sp, #4]
 8008f64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f6c:	425a      	negs	r2, r3
 8008f6e:	415a      	adcs	r2, r3
 8008f70:	602a      	str	r2, [r5, #0]
 8008f72:	e7ee      	b.n	8008f52 <__swhatbuf_r+0x1e>
 8008f74:	2340      	movs	r3, #64	; 0x40
 8008f76:	2000      	movs	r0, #0
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	b016      	add	sp, #88	; 0x58
 8008f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f80 <__smakebuf_r>:
 8008f80:	898b      	ldrh	r3, [r1, #12]
 8008f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f84:	079d      	lsls	r5, r3, #30
 8008f86:	4606      	mov	r6, r0
 8008f88:	460c      	mov	r4, r1
 8008f8a:	d507      	bpl.n	8008f9c <__smakebuf_r+0x1c>
 8008f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	6123      	str	r3, [r4, #16]
 8008f94:	2301      	movs	r3, #1
 8008f96:	6163      	str	r3, [r4, #20]
 8008f98:	b002      	add	sp, #8
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	ab01      	add	r3, sp, #4
 8008f9e:	466a      	mov	r2, sp
 8008fa0:	f7ff ffc8 	bl	8008f34 <__swhatbuf_r>
 8008fa4:	9900      	ldr	r1, [sp, #0]
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f7ff f959 	bl	8008260 <_malloc_r>
 8008fae:	b948      	cbnz	r0, 8008fc4 <__smakebuf_r+0x44>
 8008fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb4:	059a      	lsls	r2, r3, #22
 8008fb6:	d4ef      	bmi.n	8008f98 <__smakebuf_r+0x18>
 8008fb8:	f023 0303 	bic.w	r3, r3, #3
 8008fbc:	f043 0302 	orr.w	r3, r3, #2
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	e7e3      	b.n	8008f8c <__smakebuf_r+0xc>
 8008fc4:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <__smakebuf_r+0x7c>)
 8008fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	6020      	str	r0, [r4, #0]
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	9b00      	ldr	r3, [sp, #0]
 8008fd4:	6163      	str	r3, [r4, #20]
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	6120      	str	r0, [r4, #16]
 8008fda:	b15b      	cbz	r3, 8008ff4 <__smakebuf_r+0x74>
 8008fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 f8d1 	bl	8009188 <_isatty_r>
 8008fe6:	b128      	cbz	r0, 8008ff4 <__smakebuf_r+0x74>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f023 0303 	bic.w	r3, r3, #3
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	89a0      	ldrh	r0, [r4, #12]
 8008ff6:	4305      	orrs	r5, r0
 8008ff8:	81a5      	strh	r5, [r4, #12]
 8008ffa:	e7cd      	b.n	8008f98 <__smakebuf_r+0x18>
 8008ffc:	08008d8d 	.word	0x08008d8d

08009000 <_malloc_usable_size_r>:
 8009000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009004:	1f18      	subs	r0, r3, #4
 8009006:	2b00      	cmp	r3, #0
 8009008:	bfbc      	itt	lt
 800900a:	580b      	ldrlt	r3, [r1, r0]
 800900c:	18c0      	addlt	r0, r0, r3
 800900e:	4770      	bx	lr

08009010 <_raise_r>:
 8009010:	291f      	cmp	r1, #31
 8009012:	b538      	push	{r3, r4, r5, lr}
 8009014:	4604      	mov	r4, r0
 8009016:	460d      	mov	r5, r1
 8009018:	d904      	bls.n	8009024 <_raise_r+0x14>
 800901a:	2316      	movs	r3, #22
 800901c:	6003      	str	r3, [r0, #0]
 800901e:	f04f 30ff 	mov.w	r0, #4294967295
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009026:	b112      	cbz	r2, 800902e <_raise_r+0x1e>
 8009028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800902c:	b94b      	cbnz	r3, 8009042 <_raise_r+0x32>
 800902e:	4620      	mov	r0, r4
 8009030:	f000 f830 	bl	8009094 <_getpid_r>
 8009034:	462a      	mov	r2, r5
 8009036:	4601      	mov	r1, r0
 8009038:	4620      	mov	r0, r4
 800903a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800903e:	f000 b817 	b.w	8009070 <_kill_r>
 8009042:	2b01      	cmp	r3, #1
 8009044:	d00a      	beq.n	800905c <_raise_r+0x4c>
 8009046:	1c59      	adds	r1, r3, #1
 8009048:	d103      	bne.n	8009052 <_raise_r+0x42>
 800904a:	2316      	movs	r3, #22
 800904c:	6003      	str	r3, [r0, #0]
 800904e:	2001      	movs	r0, #1
 8009050:	e7e7      	b.n	8009022 <_raise_r+0x12>
 8009052:	2400      	movs	r4, #0
 8009054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009058:	4628      	mov	r0, r5
 800905a:	4798      	blx	r3
 800905c:	2000      	movs	r0, #0
 800905e:	e7e0      	b.n	8009022 <_raise_r+0x12>

08009060 <raise>:
 8009060:	4b02      	ldr	r3, [pc, #8]	; (800906c <raise+0xc>)
 8009062:	4601      	mov	r1, r0
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	f7ff bfd3 	b.w	8009010 <_raise_r>
 800906a:	bf00      	nop
 800906c:	20000010 	.word	0x20000010

08009070 <_kill_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d07      	ldr	r5, [pc, #28]	; (8009090 <_kill_r+0x20>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	4611      	mov	r1, r2
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	f7f8 fcab 	bl	80019d8 <_kill>
 8009082:	1c43      	adds	r3, r0, #1
 8009084:	d102      	bne.n	800908c <_kill_r+0x1c>
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	b103      	cbz	r3, 800908c <_kill_r+0x1c>
 800908a:	6023      	str	r3, [r4, #0]
 800908c:	bd38      	pop	{r3, r4, r5, pc}
 800908e:	bf00      	nop
 8009090:	20000568 	.word	0x20000568

08009094 <_getpid_r>:
 8009094:	f7f8 bc98 	b.w	80019c8 <_getpid>

08009098 <__sread>:
 8009098:	b510      	push	{r4, lr}
 800909a:	460c      	mov	r4, r1
 800909c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a0:	f000 f894 	bl	80091cc <_read_r>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	bfab      	itete	ge
 80090a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090aa:	89a3      	ldrhlt	r3, [r4, #12]
 80090ac:	181b      	addge	r3, r3, r0
 80090ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090b2:	bfac      	ite	ge
 80090b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80090b6:	81a3      	strhlt	r3, [r4, #12]
 80090b8:	bd10      	pop	{r4, pc}

080090ba <__swrite>:
 80090ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090be:	461f      	mov	r7, r3
 80090c0:	898b      	ldrh	r3, [r1, #12]
 80090c2:	05db      	lsls	r3, r3, #23
 80090c4:	4605      	mov	r5, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	4616      	mov	r6, r2
 80090ca:	d505      	bpl.n	80090d8 <__swrite+0x1e>
 80090cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d0:	2302      	movs	r3, #2
 80090d2:	2200      	movs	r2, #0
 80090d4:	f000 f868 	bl	80091a8 <_lseek_r>
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	4632      	mov	r2, r6
 80090e6:	463b      	mov	r3, r7
 80090e8:	4628      	mov	r0, r5
 80090ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ee:	f000 b817 	b.w	8009120 <_write_r>

080090f2 <__sseek>:
 80090f2:	b510      	push	{r4, lr}
 80090f4:	460c      	mov	r4, r1
 80090f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090fa:	f000 f855 	bl	80091a8 <_lseek_r>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	bf15      	itete	ne
 8009104:	6560      	strne	r0, [r4, #84]	; 0x54
 8009106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800910a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800910e:	81a3      	strheq	r3, [r4, #12]
 8009110:	bf18      	it	ne
 8009112:	81a3      	strhne	r3, [r4, #12]
 8009114:	bd10      	pop	{r4, pc}

08009116 <__sclose>:
 8009116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911a:	f000 b813 	b.w	8009144 <_close_r>
	...

08009120 <_write_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d07      	ldr	r5, [pc, #28]	; (8009140 <_write_r+0x20>)
 8009124:	4604      	mov	r4, r0
 8009126:	4608      	mov	r0, r1
 8009128:	4611      	mov	r1, r2
 800912a:	2200      	movs	r2, #0
 800912c:	602a      	str	r2, [r5, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	f7f8 fc89 	bl	8001a46 <_write>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_write_r+0x1e>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_write_r+0x1e>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	20000568 	.word	0x20000568

08009144 <_close_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d06      	ldr	r5, [pc, #24]	; (8009160 <_close_r+0x1c>)
 8009148:	2300      	movs	r3, #0
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	602b      	str	r3, [r5, #0]
 8009150:	f7f8 fc95 	bl	8001a7e <_close>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_close_r+0x1a>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_close_r+0x1a>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	20000568 	.word	0x20000568

08009164 <_fstat_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4d07      	ldr	r5, [pc, #28]	; (8009184 <_fstat_r+0x20>)
 8009168:	2300      	movs	r3, #0
 800916a:	4604      	mov	r4, r0
 800916c:	4608      	mov	r0, r1
 800916e:	4611      	mov	r1, r2
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	f7f8 fc90 	bl	8001a96 <_fstat>
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	d102      	bne.n	8009180 <_fstat_r+0x1c>
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	b103      	cbz	r3, 8009180 <_fstat_r+0x1c>
 800917e:	6023      	str	r3, [r4, #0]
 8009180:	bd38      	pop	{r3, r4, r5, pc}
 8009182:	bf00      	nop
 8009184:	20000568 	.word	0x20000568

08009188 <_isatty_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d06      	ldr	r5, [pc, #24]	; (80091a4 <_isatty_r+0x1c>)
 800918c:	2300      	movs	r3, #0
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	f7f8 fc8f 	bl	8001ab6 <_isatty>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d102      	bne.n	80091a2 <_isatty_r+0x1a>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	b103      	cbz	r3, 80091a2 <_isatty_r+0x1a>
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	20000568 	.word	0x20000568

080091a8 <_lseek_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4d07      	ldr	r5, [pc, #28]	; (80091c8 <_lseek_r+0x20>)
 80091ac:	4604      	mov	r4, r0
 80091ae:	4608      	mov	r0, r1
 80091b0:	4611      	mov	r1, r2
 80091b2:	2200      	movs	r2, #0
 80091b4:	602a      	str	r2, [r5, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	f7f8 fc88 	bl	8001acc <_lseek>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_lseek_r+0x1e>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_lseek_r+0x1e>
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	20000568 	.word	0x20000568

080091cc <_read_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d07      	ldr	r5, [pc, #28]	; (80091ec <_read_r+0x20>)
 80091d0:	4604      	mov	r4, r0
 80091d2:	4608      	mov	r0, r1
 80091d4:	4611      	mov	r1, r2
 80091d6:	2200      	movs	r2, #0
 80091d8:	602a      	str	r2, [r5, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	f7f8 fc16 	bl	8001a0c <_read>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_read_r+0x1e>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_read_r+0x1e>
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	20000568 	.word	0x20000568

080091f0 <asin>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	ed2d 8b02 	vpush	{d8}
 80091f6:	ec55 4b10 	vmov	r4, r5, d0
 80091fa:	f000 f831 	bl	8009260 <__ieee754_asin>
 80091fe:	4622      	mov	r2, r4
 8009200:	462b      	mov	r3, r5
 8009202:	4620      	mov	r0, r4
 8009204:	4629      	mov	r1, r5
 8009206:	eeb0 8a40 	vmov.f32	s16, s0
 800920a:	eef0 8a60 	vmov.f32	s17, s1
 800920e:	f7f7 fc8d 	bl	8000b2c <__aeabi_dcmpun>
 8009212:	b9a8      	cbnz	r0, 8009240 <asin+0x50>
 8009214:	ec45 4b10 	vmov	d0, r4, r5
 8009218:	f000 fd52 	bl	8009cc0 <fabs>
 800921c:	4b0c      	ldr	r3, [pc, #48]	; (8009250 <asin+0x60>)
 800921e:	ec51 0b10 	vmov	r0, r1, d0
 8009222:	2200      	movs	r2, #0
 8009224:	f7f7 fc78 	bl	8000b18 <__aeabi_dcmpgt>
 8009228:	b150      	cbz	r0, 8009240 <asin+0x50>
 800922a:	f7fb fb0d 	bl	8004848 <__errno>
 800922e:	ecbd 8b02 	vpop	{d8}
 8009232:	2321      	movs	r3, #33	; 0x21
 8009234:	6003      	str	r3, [r0, #0]
 8009236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800923a:	4806      	ldr	r0, [pc, #24]	; (8009254 <asin+0x64>)
 800923c:	f7ff b9e0 	b.w	8008600 <nan>
 8009240:	eeb0 0a48 	vmov.f32	s0, s16
 8009244:	eef0 0a68 	vmov.f32	s1, s17
 8009248:	ecbd 8b02 	vpop	{d8}
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	bf00      	nop
 8009250:	3ff00000 	.word	0x3ff00000
 8009254:	0800a3a8 	.word	0x0800a3a8

08009258 <atan2>:
 8009258:	f000 ba16 	b.w	8009688 <__ieee754_atan2>
 800925c:	0000      	movs	r0, r0
	...

08009260 <__ieee754_asin>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	ed2d 8b04 	vpush	{d8-d9}
 8009268:	ec55 4b10 	vmov	r4, r5, d0
 800926c:	4bcc      	ldr	r3, [pc, #816]	; (80095a0 <__ieee754_asin+0x340>)
 800926e:	b083      	sub	sp, #12
 8009270:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009274:	4598      	cmp	r8, r3
 8009276:	9501      	str	r5, [sp, #4]
 8009278:	dd35      	ble.n	80092e6 <__ieee754_asin+0x86>
 800927a:	ee10 3a10 	vmov	r3, s0
 800927e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8009282:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8009286:	ea58 0303 	orrs.w	r3, r8, r3
 800928a:	d117      	bne.n	80092bc <__ieee754_asin+0x5c>
 800928c:	a3aa      	add	r3, pc, #680	; (adr r3, 8009538 <__ieee754_asin+0x2d8>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	ee10 0a10 	vmov	r0, s0
 8009296:	4629      	mov	r1, r5
 8009298:	f7f7 f9ae 	bl	80005f8 <__aeabi_dmul>
 800929c:	a3a8      	add	r3, pc, #672	; (adr r3, 8009540 <__ieee754_asin+0x2e0>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	4606      	mov	r6, r0
 80092a4:	460f      	mov	r7, r1
 80092a6:	4620      	mov	r0, r4
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7f7 f9a5 	bl	80005f8 <__aeabi_dmul>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4630      	mov	r0, r6
 80092b4:	4639      	mov	r1, r7
 80092b6:	f7f6 ffe9 	bl	800028c <__adddf3>
 80092ba:	e00b      	b.n	80092d4 <__ieee754_asin+0x74>
 80092bc:	ee10 2a10 	vmov	r2, s0
 80092c0:	462b      	mov	r3, r5
 80092c2:	ee10 0a10 	vmov	r0, s0
 80092c6:	4629      	mov	r1, r5
 80092c8:	f7f6 ffde 	bl	8000288 <__aeabi_dsub>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	f7f7 fabc 	bl	800084c <__aeabi_ddiv>
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	ec45 4b10 	vmov	d0, r4, r5
 80092dc:	b003      	add	sp, #12
 80092de:	ecbd 8b04 	vpop	{d8-d9}
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e6:	4baf      	ldr	r3, [pc, #700]	; (80095a4 <__ieee754_asin+0x344>)
 80092e8:	4598      	cmp	r8, r3
 80092ea:	dc11      	bgt.n	8009310 <__ieee754_asin+0xb0>
 80092ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80092f0:	f280 80ae 	bge.w	8009450 <__ieee754_asin+0x1f0>
 80092f4:	a394      	add	r3, pc, #592	; (adr r3, 8009548 <__ieee754_asin+0x2e8>)
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	ee10 0a10 	vmov	r0, s0
 80092fe:	4629      	mov	r1, r5
 8009300:	f7f6 ffc4 	bl	800028c <__adddf3>
 8009304:	4ba8      	ldr	r3, [pc, #672]	; (80095a8 <__ieee754_asin+0x348>)
 8009306:	2200      	movs	r2, #0
 8009308:	f7f7 fc06 	bl	8000b18 <__aeabi_dcmpgt>
 800930c:	2800      	cmp	r0, #0
 800930e:	d1e3      	bne.n	80092d8 <__ieee754_asin+0x78>
 8009310:	ec45 4b10 	vmov	d0, r4, r5
 8009314:	f000 fcd4 	bl	8009cc0 <fabs>
 8009318:	49a3      	ldr	r1, [pc, #652]	; (80095a8 <__ieee754_asin+0x348>)
 800931a:	ec53 2b10 	vmov	r2, r3, d0
 800931e:	2000      	movs	r0, #0
 8009320:	f7f6 ffb2 	bl	8000288 <__aeabi_dsub>
 8009324:	4ba1      	ldr	r3, [pc, #644]	; (80095ac <__ieee754_asin+0x34c>)
 8009326:	2200      	movs	r2, #0
 8009328:	f7f7 f966 	bl	80005f8 <__aeabi_dmul>
 800932c:	a388      	add	r3, pc, #544	; (adr r3, 8009550 <__ieee754_asin+0x2f0>)
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	4604      	mov	r4, r0
 8009334:	460d      	mov	r5, r1
 8009336:	f7f7 f95f 	bl	80005f8 <__aeabi_dmul>
 800933a:	a387      	add	r3, pc, #540	; (adr r3, 8009558 <__ieee754_asin+0x2f8>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f6 ffa4 	bl	800028c <__adddf3>
 8009344:	4622      	mov	r2, r4
 8009346:	462b      	mov	r3, r5
 8009348:	f7f7 f956 	bl	80005f8 <__aeabi_dmul>
 800934c:	a384      	add	r3, pc, #528	; (adr r3, 8009560 <__ieee754_asin+0x300>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	f7f6 ff99 	bl	8000288 <__aeabi_dsub>
 8009356:	4622      	mov	r2, r4
 8009358:	462b      	mov	r3, r5
 800935a:	f7f7 f94d 	bl	80005f8 <__aeabi_dmul>
 800935e:	a382      	add	r3, pc, #520	; (adr r3, 8009568 <__ieee754_asin+0x308>)
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	f7f6 ff92 	bl	800028c <__adddf3>
 8009368:	4622      	mov	r2, r4
 800936a:	462b      	mov	r3, r5
 800936c:	f7f7 f944 	bl	80005f8 <__aeabi_dmul>
 8009370:	a37f      	add	r3, pc, #508	; (adr r3, 8009570 <__ieee754_asin+0x310>)
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	f7f6 ff87 	bl	8000288 <__aeabi_dsub>
 800937a:	4622      	mov	r2, r4
 800937c:	462b      	mov	r3, r5
 800937e:	f7f7 f93b 	bl	80005f8 <__aeabi_dmul>
 8009382:	a37d      	add	r3, pc, #500	; (adr r3, 8009578 <__ieee754_asin+0x318>)
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	f7f6 ff80 	bl	800028c <__adddf3>
 800938c:	4622      	mov	r2, r4
 800938e:	462b      	mov	r3, r5
 8009390:	f7f7 f932 	bl	80005f8 <__aeabi_dmul>
 8009394:	a37a      	add	r3, pc, #488	; (adr r3, 8009580 <__ieee754_asin+0x320>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	ec41 0b18 	vmov	d8, r0, r1
 800939e:	4620      	mov	r0, r4
 80093a0:	4629      	mov	r1, r5
 80093a2:	f7f7 f929 	bl	80005f8 <__aeabi_dmul>
 80093a6:	a378      	add	r3, pc, #480	; (adr r3, 8009588 <__ieee754_asin+0x328>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f7f6 ff6c 	bl	8000288 <__aeabi_dsub>
 80093b0:	4622      	mov	r2, r4
 80093b2:	462b      	mov	r3, r5
 80093b4:	f7f7 f920 	bl	80005f8 <__aeabi_dmul>
 80093b8:	a375      	add	r3, pc, #468	; (adr r3, 8009590 <__ieee754_asin+0x330>)
 80093ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093be:	f7f6 ff65 	bl	800028c <__adddf3>
 80093c2:	4622      	mov	r2, r4
 80093c4:	462b      	mov	r3, r5
 80093c6:	f7f7 f917 	bl	80005f8 <__aeabi_dmul>
 80093ca:	a373      	add	r3, pc, #460	; (adr r3, 8009598 <__ieee754_asin+0x338>)
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f7f6 ff5a 	bl	8000288 <__aeabi_dsub>
 80093d4:	4622      	mov	r2, r4
 80093d6:	462b      	mov	r3, r5
 80093d8:	f7f7 f90e 	bl	80005f8 <__aeabi_dmul>
 80093dc:	4b72      	ldr	r3, [pc, #456]	; (80095a8 <__ieee754_asin+0x348>)
 80093de:	2200      	movs	r2, #0
 80093e0:	f7f6 ff54 	bl	800028c <__adddf3>
 80093e4:	ec45 4b10 	vmov	d0, r4, r5
 80093e8:	4606      	mov	r6, r0
 80093ea:	460f      	mov	r7, r1
 80093ec:	f000 fa16 	bl	800981c <__ieee754_sqrt>
 80093f0:	4b6f      	ldr	r3, [pc, #444]	; (80095b0 <__ieee754_asin+0x350>)
 80093f2:	4598      	cmp	r8, r3
 80093f4:	ec5b ab10 	vmov	sl, fp, d0
 80093f8:	f340 80dc 	ble.w	80095b4 <__ieee754_asin+0x354>
 80093fc:	4632      	mov	r2, r6
 80093fe:	463b      	mov	r3, r7
 8009400:	ec51 0b18 	vmov	r0, r1, d8
 8009404:	f7f7 fa22 	bl	800084c <__aeabi_ddiv>
 8009408:	4652      	mov	r2, sl
 800940a:	465b      	mov	r3, fp
 800940c:	f7f7 f8f4 	bl	80005f8 <__aeabi_dmul>
 8009410:	4652      	mov	r2, sl
 8009412:	465b      	mov	r3, fp
 8009414:	f7f6 ff3a 	bl	800028c <__adddf3>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	f7f6 ff36 	bl	800028c <__adddf3>
 8009420:	a347      	add	r3, pc, #284	; (adr r3, 8009540 <__ieee754_asin+0x2e0>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	f7f6 ff2f 	bl	8000288 <__aeabi_dsub>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	a142      	add	r1, pc, #264	; (adr r1, 8009538 <__ieee754_asin+0x2d8>)
 8009430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009434:	f7f6 ff28 	bl	8000288 <__aeabi_dsub>
 8009438:	9b01      	ldr	r3, [sp, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfdc      	itt	le
 800943e:	4602      	movle	r2, r0
 8009440:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	bfdc      	itt	le
 800944a:	4614      	movle	r4, r2
 800944c:	461d      	movle	r5, r3
 800944e:	e743      	b.n	80092d8 <__ieee754_asin+0x78>
 8009450:	ee10 2a10 	vmov	r2, s0
 8009454:	ee10 0a10 	vmov	r0, s0
 8009458:	462b      	mov	r3, r5
 800945a:	4629      	mov	r1, r5
 800945c:	f7f7 f8cc 	bl	80005f8 <__aeabi_dmul>
 8009460:	a33b      	add	r3, pc, #236	; (adr r3, 8009550 <__ieee754_asin+0x2f0>)
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	4606      	mov	r6, r0
 8009468:	460f      	mov	r7, r1
 800946a:	f7f7 f8c5 	bl	80005f8 <__aeabi_dmul>
 800946e:	a33a      	add	r3, pc, #232	; (adr r3, 8009558 <__ieee754_asin+0x2f8>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f7f6 ff0a 	bl	800028c <__adddf3>
 8009478:	4632      	mov	r2, r6
 800947a:	463b      	mov	r3, r7
 800947c:	f7f7 f8bc 	bl	80005f8 <__aeabi_dmul>
 8009480:	a337      	add	r3, pc, #220	; (adr r3, 8009560 <__ieee754_asin+0x300>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	f7f6 feff 	bl	8000288 <__aeabi_dsub>
 800948a:	4632      	mov	r2, r6
 800948c:	463b      	mov	r3, r7
 800948e:	f7f7 f8b3 	bl	80005f8 <__aeabi_dmul>
 8009492:	a335      	add	r3, pc, #212	; (adr r3, 8009568 <__ieee754_asin+0x308>)
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	f7f6 fef8 	bl	800028c <__adddf3>
 800949c:	4632      	mov	r2, r6
 800949e:	463b      	mov	r3, r7
 80094a0:	f7f7 f8aa 	bl	80005f8 <__aeabi_dmul>
 80094a4:	a332      	add	r3, pc, #200	; (adr r3, 8009570 <__ieee754_asin+0x310>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f7f6 feed 	bl	8000288 <__aeabi_dsub>
 80094ae:	4632      	mov	r2, r6
 80094b0:	463b      	mov	r3, r7
 80094b2:	f7f7 f8a1 	bl	80005f8 <__aeabi_dmul>
 80094b6:	a330      	add	r3, pc, #192	; (adr r3, 8009578 <__ieee754_asin+0x318>)
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	f7f6 fee6 	bl	800028c <__adddf3>
 80094c0:	4632      	mov	r2, r6
 80094c2:	463b      	mov	r3, r7
 80094c4:	f7f7 f898 	bl	80005f8 <__aeabi_dmul>
 80094c8:	a32d      	add	r3, pc, #180	; (adr r3, 8009580 <__ieee754_asin+0x320>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	4680      	mov	r8, r0
 80094d0:	4689      	mov	r9, r1
 80094d2:	4630      	mov	r0, r6
 80094d4:	4639      	mov	r1, r7
 80094d6:	f7f7 f88f 	bl	80005f8 <__aeabi_dmul>
 80094da:	a32b      	add	r3, pc, #172	; (adr r3, 8009588 <__ieee754_asin+0x328>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f7f6 fed2 	bl	8000288 <__aeabi_dsub>
 80094e4:	4632      	mov	r2, r6
 80094e6:	463b      	mov	r3, r7
 80094e8:	f7f7 f886 	bl	80005f8 <__aeabi_dmul>
 80094ec:	a328      	add	r3, pc, #160	; (adr r3, 8009590 <__ieee754_asin+0x330>)
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	f7f6 fecb 	bl	800028c <__adddf3>
 80094f6:	4632      	mov	r2, r6
 80094f8:	463b      	mov	r3, r7
 80094fa:	f7f7 f87d 	bl	80005f8 <__aeabi_dmul>
 80094fe:	a326      	add	r3, pc, #152	; (adr r3, 8009598 <__ieee754_asin+0x338>)
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f7f6 fec0 	bl	8000288 <__aeabi_dsub>
 8009508:	4632      	mov	r2, r6
 800950a:	463b      	mov	r3, r7
 800950c:	f7f7 f874 	bl	80005f8 <__aeabi_dmul>
 8009510:	4b25      	ldr	r3, [pc, #148]	; (80095a8 <__ieee754_asin+0x348>)
 8009512:	2200      	movs	r2, #0
 8009514:	f7f6 feba 	bl	800028c <__adddf3>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4640      	mov	r0, r8
 800951e:	4649      	mov	r1, r9
 8009520:	f7f7 f994 	bl	800084c <__aeabi_ddiv>
 8009524:	4622      	mov	r2, r4
 8009526:	462b      	mov	r3, r5
 8009528:	f7f7 f866 	bl	80005f8 <__aeabi_dmul>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4620      	mov	r0, r4
 8009532:	4629      	mov	r1, r5
 8009534:	e6bf      	b.n	80092b6 <__ieee754_asin+0x56>
 8009536:	bf00      	nop
 8009538:	54442d18 	.word	0x54442d18
 800953c:	3ff921fb 	.word	0x3ff921fb
 8009540:	33145c07 	.word	0x33145c07
 8009544:	3c91a626 	.word	0x3c91a626
 8009548:	8800759c 	.word	0x8800759c
 800954c:	7e37e43c 	.word	0x7e37e43c
 8009550:	0dfdf709 	.word	0x0dfdf709
 8009554:	3f023de1 	.word	0x3f023de1
 8009558:	7501b288 	.word	0x7501b288
 800955c:	3f49efe0 	.word	0x3f49efe0
 8009560:	b5688f3b 	.word	0xb5688f3b
 8009564:	3fa48228 	.word	0x3fa48228
 8009568:	0e884455 	.word	0x0e884455
 800956c:	3fc9c155 	.word	0x3fc9c155
 8009570:	03eb6f7d 	.word	0x03eb6f7d
 8009574:	3fd4d612 	.word	0x3fd4d612
 8009578:	55555555 	.word	0x55555555
 800957c:	3fc55555 	.word	0x3fc55555
 8009580:	b12e9282 	.word	0xb12e9282
 8009584:	3fb3b8c5 	.word	0x3fb3b8c5
 8009588:	1b8d0159 	.word	0x1b8d0159
 800958c:	3fe6066c 	.word	0x3fe6066c
 8009590:	9c598ac8 	.word	0x9c598ac8
 8009594:	40002ae5 	.word	0x40002ae5
 8009598:	1c8a2d4b 	.word	0x1c8a2d4b
 800959c:	40033a27 	.word	0x40033a27
 80095a0:	3fefffff 	.word	0x3fefffff
 80095a4:	3fdfffff 	.word	0x3fdfffff
 80095a8:	3ff00000 	.word	0x3ff00000
 80095ac:	3fe00000 	.word	0x3fe00000
 80095b0:	3fef3332 	.word	0x3fef3332
 80095b4:	ee10 2a10 	vmov	r2, s0
 80095b8:	ee10 0a10 	vmov	r0, s0
 80095bc:	465b      	mov	r3, fp
 80095be:	4659      	mov	r1, fp
 80095c0:	f7f6 fe64 	bl	800028c <__adddf3>
 80095c4:	4632      	mov	r2, r6
 80095c6:	463b      	mov	r3, r7
 80095c8:	ec41 0b19 	vmov	d9, r0, r1
 80095cc:	ec51 0b18 	vmov	r0, r1, d8
 80095d0:	f7f7 f93c 	bl	800084c <__aeabi_ddiv>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	ec51 0b19 	vmov	r0, r1, d9
 80095dc:	f7f7 f80c 	bl	80005f8 <__aeabi_dmul>
 80095e0:	f04f 0800 	mov.w	r8, #0
 80095e4:	4606      	mov	r6, r0
 80095e6:	460f      	mov	r7, r1
 80095e8:	4642      	mov	r2, r8
 80095ea:	465b      	mov	r3, fp
 80095ec:	4640      	mov	r0, r8
 80095ee:	4659      	mov	r1, fp
 80095f0:	f7f7 f802 	bl	80005f8 <__aeabi_dmul>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4620      	mov	r0, r4
 80095fa:	4629      	mov	r1, r5
 80095fc:	f7f6 fe44 	bl	8000288 <__aeabi_dsub>
 8009600:	4642      	mov	r2, r8
 8009602:	4604      	mov	r4, r0
 8009604:	460d      	mov	r5, r1
 8009606:	465b      	mov	r3, fp
 8009608:	4650      	mov	r0, sl
 800960a:	4659      	mov	r1, fp
 800960c:	f7f6 fe3e 	bl	800028c <__adddf3>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	4620      	mov	r0, r4
 8009616:	4629      	mov	r1, r5
 8009618:	f7f7 f918 	bl	800084c <__aeabi_ddiv>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	f7f6 fe34 	bl	800028c <__adddf3>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	a113      	add	r1, pc, #76	; (adr r1, 8009678 <__ieee754_asin+0x418>)
 800962a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800962e:	f7f6 fe2b 	bl	8000288 <__aeabi_dsub>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	4630      	mov	r0, r6
 8009638:	4639      	mov	r1, r7
 800963a:	f7f6 fe25 	bl	8000288 <__aeabi_dsub>
 800963e:	4642      	mov	r2, r8
 8009640:	4604      	mov	r4, r0
 8009642:	460d      	mov	r5, r1
 8009644:	465b      	mov	r3, fp
 8009646:	4640      	mov	r0, r8
 8009648:	4659      	mov	r1, fp
 800964a:	f7f6 fe1f 	bl	800028c <__adddf3>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	a10b      	add	r1, pc, #44	; (adr r1, 8009680 <__ieee754_asin+0x420>)
 8009654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009658:	f7f6 fe16 	bl	8000288 <__aeabi_dsub>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4620      	mov	r0, r4
 8009662:	4629      	mov	r1, r5
 8009664:	f7f6 fe10 	bl	8000288 <__aeabi_dsub>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	a104      	add	r1, pc, #16	; (adr r1, 8009680 <__ieee754_asin+0x420>)
 800966e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009672:	e6df      	b.n	8009434 <__ieee754_asin+0x1d4>
 8009674:	f3af 8000 	nop.w
 8009678:	33145c07 	.word	0x33145c07
 800967c:	3c91a626 	.word	0x3c91a626
 8009680:	54442d18 	.word	0x54442d18
 8009684:	3fe921fb 	.word	0x3fe921fb

08009688 <__ieee754_atan2>:
 8009688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800968c:	ec57 6b11 	vmov	r6, r7, d1
 8009690:	4273      	negs	r3, r6
 8009692:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009818 <__ieee754_atan2+0x190>
 8009696:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800969a:	4333      	orrs	r3, r6
 800969c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80096a0:	4573      	cmp	r3, lr
 80096a2:	ec51 0b10 	vmov	r0, r1, d0
 80096a6:	ee11 8a10 	vmov	r8, s2
 80096aa:	d80a      	bhi.n	80096c2 <__ieee754_atan2+0x3a>
 80096ac:	4244      	negs	r4, r0
 80096ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096b2:	4304      	orrs	r4, r0
 80096b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80096b8:	4574      	cmp	r4, lr
 80096ba:	ee10 9a10 	vmov	r9, s0
 80096be:	468c      	mov	ip, r1
 80096c0:	d907      	bls.n	80096d2 <__ieee754_atan2+0x4a>
 80096c2:	4632      	mov	r2, r6
 80096c4:	463b      	mov	r3, r7
 80096c6:	f7f6 fde1 	bl	800028c <__adddf3>
 80096ca:	ec41 0b10 	vmov	d0, r0, r1
 80096ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80096d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80096da:	4334      	orrs	r4, r6
 80096dc:	d103      	bne.n	80096e6 <__ieee754_atan2+0x5e>
 80096de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e2:	f000 b94d 	b.w	8009980 <atan>
 80096e6:	17bc      	asrs	r4, r7, #30
 80096e8:	f004 0402 	and.w	r4, r4, #2
 80096ec:	ea53 0909 	orrs.w	r9, r3, r9
 80096f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80096f4:	d107      	bne.n	8009706 <__ieee754_atan2+0x7e>
 80096f6:	2c02      	cmp	r4, #2
 80096f8:	d060      	beq.n	80097bc <__ieee754_atan2+0x134>
 80096fa:	2c03      	cmp	r4, #3
 80096fc:	d1e5      	bne.n	80096ca <__ieee754_atan2+0x42>
 80096fe:	a142      	add	r1, pc, #264	; (adr r1, 8009808 <__ieee754_atan2+0x180>)
 8009700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009704:	e7e1      	b.n	80096ca <__ieee754_atan2+0x42>
 8009706:	ea52 0808 	orrs.w	r8, r2, r8
 800970a:	d106      	bne.n	800971a <__ieee754_atan2+0x92>
 800970c:	f1bc 0f00 	cmp.w	ip, #0
 8009710:	da5f      	bge.n	80097d2 <__ieee754_atan2+0x14a>
 8009712:	a13f      	add	r1, pc, #252	; (adr r1, 8009810 <__ieee754_atan2+0x188>)
 8009714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009718:	e7d7      	b.n	80096ca <__ieee754_atan2+0x42>
 800971a:	4572      	cmp	r2, lr
 800971c:	d10f      	bne.n	800973e <__ieee754_atan2+0xb6>
 800971e:	4293      	cmp	r3, r2
 8009720:	f104 34ff 	add.w	r4, r4, #4294967295
 8009724:	d107      	bne.n	8009736 <__ieee754_atan2+0xae>
 8009726:	2c02      	cmp	r4, #2
 8009728:	d84c      	bhi.n	80097c4 <__ieee754_atan2+0x13c>
 800972a:	4b35      	ldr	r3, [pc, #212]	; (8009800 <__ieee754_atan2+0x178>)
 800972c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009730:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009734:	e7c9      	b.n	80096ca <__ieee754_atan2+0x42>
 8009736:	2c02      	cmp	r4, #2
 8009738:	d848      	bhi.n	80097cc <__ieee754_atan2+0x144>
 800973a:	4b32      	ldr	r3, [pc, #200]	; (8009804 <__ieee754_atan2+0x17c>)
 800973c:	e7f6      	b.n	800972c <__ieee754_atan2+0xa4>
 800973e:	4573      	cmp	r3, lr
 8009740:	d0e4      	beq.n	800970c <__ieee754_atan2+0x84>
 8009742:	1a9b      	subs	r3, r3, r2
 8009744:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009748:	ea4f 5223 	mov.w	r2, r3, asr #20
 800974c:	da1e      	bge.n	800978c <__ieee754_atan2+0x104>
 800974e:	2f00      	cmp	r7, #0
 8009750:	da01      	bge.n	8009756 <__ieee754_atan2+0xce>
 8009752:	323c      	adds	r2, #60	; 0x3c
 8009754:	db1e      	blt.n	8009794 <__ieee754_atan2+0x10c>
 8009756:	4632      	mov	r2, r6
 8009758:	463b      	mov	r3, r7
 800975a:	f7f7 f877 	bl	800084c <__aeabi_ddiv>
 800975e:	ec41 0b10 	vmov	d0, r0, r1
 8009762:	f000 faad 	bl	8009cc0 <fabs>
 8009766:	f000 f90b 	bl	8009980 <atan>
 800976a:	ec51 0b10 	vmov	r0, r1, d0
 800976e:	2c01      	cmp	r4, #1
 8009770:	d013      	beq.n	800979a <__ieee754_atan2+0x112>
 8009772:	2c02      	cmp	r4, #2
 8009774:	d015      	beq.n	80097a2 <__ieee754_atan2+0x11a>
 8009776:	2c00      	cmp	r4, #0
 8009778:	d0a7      	beq.n	80096ca <__ieee754_atan2+0x42>
 800977a:	a319      	add	r3, pc, #100	; (adr r3, 80097e0 <__ieee754_atan2+0x158>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f7f6 fd82 	bl	8000288 <__aeabi_dsub>
 8009784:	a318      	add	r3, pc, #96	; (adr r3, 80097e8 <__ieee754_atan2+0x160>)
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	e014      	b.n	80097b6 <__ieee754_atan2+0x12e>
 800978c:	a118      	add	r1, pc, #96	; (adr r1, 80097f0 <__ieee754_atan2+0x168>)
 800978e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009792:	e7ec      	b.n	800976e <__ieee754_atan2+0xe6>
 8009794:	2000      	movs	r0, #0
 8009796:	2100      	movs	r1, #0
 8009798:	e7e9      	b.n	800976e <__ieee754_atan2+0xe6>
 800979a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800979e:	4619      	mov	r1, r3
 80097a0:	e793      	b.n	80096ca <__ieee754_atan2+0x42>
 80097a2:	a30f      	add	r3, pc, #60	; (adr r3, 80097e0 <__ieee754_atan2+0x158>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 fd6e 	bl	8000288 <__aeabi_dsub>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	a10d      	add	r1, pc, #52	; (adr r1, 80097e8 <__ieee754_atan2+0x160>)
 80097b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097b6:	f7f6 fd67 	bl	8000288 <__aeabi_dsub>
 80097ba:	e786      	b.n	80096ca <__ieee754_atan2+0x42>
 80097bc:	a10a      	add	r1, pc, #40	; (adr r1, 80097e8 <__ieee754_atan2+0x160>)
 80097be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c2:	e782      	b.n	80096ca <__ieee754_atan2+0x42>
 80097c4:	a10c      	add	r1, pc, #48	; (adr r1, 80097f8 <__ieee754_atan2+0x170>)
 80097c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ca:	e77e      	b.n	80096ca <__ieee754_atan2+0x42>
 80097cc:	2000      	movs	r0, #0
 80097ce:	2100      	movs	r1, #0
 80097d0:	e77b      	b.n	80096ca <__ieee754_atan2+0x42>
 80097d2:	a107      	add	r1, pc, #28	; (adr r1, 80097f0 <__ieee754_atan2+0x168>)
 80097d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097d8:	e777      	b.n	80096ca <__ieee754_atan2+0x42>
 80097da:	bf00      	nop
 80097dc:	f3af 8000 	nop.w
 80097e0:	33145c07 	.word	0x33145c07
 80097e4:	3ca1a626 	.word	0x3ca1a626
 80097e8:	54442d18 	.word	0x54442d18
 80097ec:	400921fb 	.word	0x400921fb
 80097f0:	54442d18 	.word	0x54442d18
 80097f4:	3ff921fb 	.word	0x3ff921fb
 80097f8:	54442d18 	.word	0x54442d18
 80097fc:	3fe921fb 	.word	0x3fe921fb
 8009800:	0800a410 	.word	0x0800a410
 8009804:	0800a428 	.word	0x0800a428
 8009808:	54442d18 	.word	0x54442d18
 800980c:	c00921fb 	.word	0xc00921fb
 8009810:	54442d18 	.word	0x54442d18
 8009814:	bff921fb 	.word	0xbff921fb
 8009818:	7ff00000 	.word	0x7ff00000

0800981c <__ieee754_sqrt>:
 800981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009820:	ec55 4b10 	vmov	r4, r5, d0
 8009824:	4e55      	ldr	r6, [pc, #340]	; (800997c <__ieee754_sqrt+0x160>)
 8009826:	43ae      	bics	r6, r5
 8009828:	ee10 0a10 	vmov	r0, s0
 800982c:	ee10 3a10 	vmov	r3, s0
 8009830:	462a      	mov	r2, r5
 8009832:	4629      	mov	r1, r5
 8009834:	d110      	bne.n	8009858 <__ieee754_sqrt+0x3c>
 8009836:	ee10 2a10 	vmov	r2, s0
 800983a:	462b      	mov	r3, r5
 800983c:	f7f6 fedc 	bl	80005f8 <__aeabi_dmul>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f7f6 fd20 	bl	800028c <__adddf3>
 800984c:	4604      	mov	r4, r0
 800984e:	460d      	mov	r5, r1
 8009850:	ec45 4b10 	vmov	d0, r4, r5
 8009854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009858:	2d00      	cmp	r5, #0
 800985a:	dc10      	bgt.n	800987e <__ieee754_sqrt+0x62>
 800985c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009860:	4330      	orrs	r0, r6
 8009862:	d0f5      	beq.n	8009850 <__ieee754_sqrt+0x34>
 8009864:	b15d      	cbz	r5, 800987e <__ieee754_sqrt+0x62>
 8009866:	ee10 2a10 	vmov	r2, s0
 800986a:	462b      	mov	r3, r5
 800986c:	ee10 0a10 	vmov	r0, s0
 8009870:	f7f6 fd0a 	bl	8000288 <__aeabi_dsub>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	f7f6 ffe8 	bl	800084c <__aeabi_ddiv>
 800987c:	e7e6      	b.n	800984c <__ieee754_sqrt+0x30>
 800987e:	1512      	asrs	r2, r2, #20
 8009880:	d074      	beq.n	800996c <__ieee754_sqrt+0x150>
 8009882:	07d4      	lsls	r4, r2, #31
 8009884:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009888:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800988c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009890:	bf5e      	ittt	pl
 8009892:	0fda      	lsrpl	r2, r3, #31
 8009894:	005b      	lslpl	r3, r3, #1
 8009896:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800989a:	2400      	movs	r4, #0
 800989c:	0fda      	lsrs	r2, r3, #31
 800989e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80098a2:	107f      	asrs	r7, r7, #1
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	2516      	movs	r5, #22
 80098a8:	4620      	mov	r0, r4
 80098aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80098ae:	1886      	adds	r6, r0, r2
 80098b0:	428e      	cmp	r6, r1
 80098b2:	bfde      	ittt	le
 80098b4:	1b89      	suble	r1, r1, r6
 80098b6:	18b0      	addle	r0, r6, r2
 80098b8:	18a4      	addle	r4, r4, r2
 80098ba:	0049      	lsls	r1, r1, #1
 80098bc:	3d01      	subs	r5, #1
 80098be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80098c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80098c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80098ca:	d1f0      	bne.n	80098ae <__ieee754_sqrt+0x92>
 80098cc:	462a      	mov	r2, r5
 80098ce:	f04f 0e20 	mov.w	lr, #32
 80098d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80098d6:	4281      	cmp	r1, r0
 80098d8:	eb06 0c05 	add.w	ip, r6, r5
 80098dc:	dc02      	bgt.n	80098e4 <__ieee754_sqrt+0xc8>
 80098de:	d113      	bne.n	8009908 <__ieee754_sqrt+0xec>
 80098e0:	459c      	cmp	ip, r3
 80098e2:	d811      	bhi.n	8009908 <__ieee754_sqrt+0xec>
 80098e4:	f1bc 0f00 	cmp.w	ip, #0
 80098e8:	eb0c 0506 	add.w	r5, ip, r6
 80098ec:	da43      	bge.n	8009976 <__ieee754_sqrt+0x15a>
 80098ee:	2d00      	cmp	r5, #0
 80098f0:	db41      	blt.n	8009976 <__ieee754_sqrt+0x15a>
 80098f2:	f100 0801 	add.w	r8, r0, #1
 80098f6:	1a09      	subs	r1, r1, r0
 80098f8:	459c      	cmp	ip, r3
 80098fa:	bf88      	it	hi
 80098fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009900:	eba3 030c 	sub.w	r3, r3, ip
 8009904:	4432      	add	r2, r6
 8009906:	4640      	mov	r0, r8
 8009908:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800990c:	f1be 0e01 	subs.w	lr, lr, #1
 8009910:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009914:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009918:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800991c:	d1db      	bne.n	80098d6 <__ieee754_sqrt+0xba>
 800991e:	430b      	orrs	r3, r1
 8009920:	d006      	beq.n	8009930 <__ieee754_sqrt+0x114>
 8009922:	1c50      	adds	r0, r2, #1
 8009924:	bf13      	iteet	ne
 8009926:	3201      	addne	r2, #1
 8009928:	3401      	addeq	r4, #1
 800992a:	4672      	moveq	r2, lr
 800992c:	f022 0201 	bicne.w	r2, r2, #1
 8009930:	1063      	asrs	r3, r4, #1
 8009932:	0852      	lsrs	r2, r2, #1
 8009934:	07e1      	lsls	r1, r4, #31
 8009936:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800993a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800993e:	bf48      	it	mi
 8009940:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009944:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009948:	4614      	mov	r4, r2
 800994a:	e781      	b.n	8009850 <__ieee754_sqrt+0x34>
 800994c:	0ad9      	lsrs	r1, r3, #11
 800994e:	3815      	subs	r0, #21
 8009950:	055b      	lsls	r3, r3, #21
 8009952:	2900      	cmp	r1, #0
 8009954:	d0fa      	beq.n	800994c <__ieee754_sqrt+0x130>
 8009956:	02cd      	lsls	r5, r1, #11
 8009958:	d50a      	bpl.n	8009970 <__ieee754_sqrt+0x154>
 800995a:	f1c2 0420 	rsb	r4, r2, #32
 800995e:	fa23 f404 	lsr.w	r4, r3, r4
 8009962:	1e55      	subs	r5, r2, #1
 8009964:	4093      	lsls	r3, r2
 8009966:	4321      	orrs	r1, r4
 8009968:	1b42      	subs	r2, r0, r5
 800996a:	e78a      	b.n	8009882 <__ieee754_sqrt+0x66>
 800996c:	4610      	mov	r0, r2
 800996e:	e7f0      	b.n	8009952 <__ieee754_sqrt+0x136>
 8009970:	0049      	lsls	r1, r1, #1
 8009972:	3201      	adds	r2, #1
 8009974:	e7ef      	b.n	8009956 <__ieee754_sqrt+0x13a>
 8009976:	4680      	mov	r8, r0
 8009978:	e7bd      	b.n	80098f6 <__ieee754_sqrt+0xda>
 800997a:	bf00      	nop
 800997c:	7ff00000 	.word	0x7ff00000

08009980 <atan>:
 8009980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	ec55 4b10 	vmov	r4, r5, d0
 8009988:	4bc3      	ldr	r3, [pc, #780]	; (8009c98 <atan+0x318>)
 800998a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800998e:	429e      	cmp	r6, r3
 8009990:	46ab      	mov	fp, r5
 8009992:	dd18      	ble.n	80099c6 <atan+0x46>
 8009994:	4bc1      	ldr	r3, [pc, #772]	; (8009c9c <atan+0x31c>)
 8009996:	429e      	cmp	r6, r3
 8009998:	dc01      	bgt.n	800999e <atan+0x1e>
 800999a:	d109      	bne.n	80099b0 <atan+0x30>
 800999c:	b144      	cbz	r4, 80099b0 <atan+0x30>
 800999e:	4622      	mov	r2, r4
 80099a0:	462b      	mov	r3, r5
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7f6 fc71 	bl	800028c <__adddf3>
 80099aa:	4604      	mov	r4, r0
 80099ac:	460d      	mov	r5, r1
 80099ae:	e006      	b.n	80099be <atan+0x3e>
 80099b0:	f1bb 0f00 	cmp.w	fp, #0
 80099b4:	f300 8131 	bgt.w	8009c1a <atan+0x29a>
 80099b8:	a59b      	add	r5, pc, #620	; (adr r5, 8009c28 <atan+0x2a8>)
 80099ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099be:	ec45 4b10 	vmov	d0, r4, r5
 80099c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c6:	4bb6      	ldr	r3, [pc, #728]	; (8009ca0 <atan+0x320>)
 80099c8:	429e      	cmp	r6, r3
 80099ca:	dc14      	bgt.n	80099f6 <atan+0x76>
 80099cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80099d0:	429e      	cmp	r6, r3
 80099d2:	dc0d      	bgt.n	80099f0 <atan+0x70>
 80099d4:	a396      	add	r3, pc, #600	; (adr r3, 8009c30 <atan+0x2b0>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	ee10 0a10 	vmov	r0, s0
 80099de:	4629      	mov	r1, r5
 80099e0:	f7f6 fc54 	bl	800028c <__adddf3>
 80099e4:	4baf      	ldr	r3, [pc, #700]	; (8009ca4 <atan+0x324>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	f7f7 f896 	bl	8000b18 <__aeabi_dcmpgt>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d1e6      	bne.n	80099be <atan+0x3e>
 80099f0:	f04f 3aff 	mov.w	sl, #4294967295
 80099f4:	e02b      	b.n	8009a4e <atan+0xce>
 80099f6:	f000 f963 	bl	8009cc0 <fabs>
 80099fa:	4bab      	ldr	r3, [pc, #684]	; (8009ca8 <atan+0x328>)
 80099fc:	429e      	cmp	r6, r3
 80099fe:	ec55 4b10 	vmov	r4, r5, d0
 8009a02:	f300 80bf 	bgt.w	8009b84 <atan+0x204>
 8009a06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009a0a:	429e      	cmp	r6, r3
 8009a0c:	f300 80a0 	bgt.w	8009b50 <atan+0x1d0>
 8009a10:	ee10 2a10 	vmov	r2, s0
 8009a14:	ee10 0a10 	vmov	r0, s0
 8009a18:	462b      	mov	r3, r5
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	f7f6 fc36 	bl	800028c <__adddf3>
 8009a20:	4ba0      	ldr	r3, [pc, #640]	; (8009ca4 <atan+0x324>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	f7f6 fc30 	bl	8000288 <__aeabi_dsub>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7f6 fc29 	bl	800028c <__adddf3>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4630      	mov	r0, r6
 8009a40:	4639      	mov	r1, r7
 8009a42:	f7f6 ff03 	bl	800084c <__aeabi_ddiv>
 8009a46:	f04f 0a00 	mov.w	sl, #0
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	4622      	mov	r2, r4
 8009a50:	462b      	mov	r3, r5
 8009a52:	4620      	mov	r0, r4
 8009a54:	4629      	mov	r1, r5
 8009a56:	f7f6 fdcf 	bl	80005f8 <__aeabi_dmul>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4680      	mov	r8, r0
 8009a60:	4689      	mov	r9, r1
 8009a62:	f7f6 fdc9 	bl	80005f8 <__aeabi_dmul>
 8009a66:	a374      	add	r3, pc, #464	; (adr r3, 8009c38 <atan+0x2b8>)
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	460f      	mov	r7, r1
 8009a70:	f7f6 fdc2 	bl	80005f8 <__aeabi_dmul>
 8009a74:	a372      	add	r3, pc, #456	; (adr r3, 8009c40 <atan+0x2c0>)
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	f7f6 fc07 	bl	800028c <__adddf3>
 8009a7e:	4632      	mov	r2, r6
 8009a80:	463b      	mov	r3, r7
 8009a82:	f7f6 fdb9 	bl	80005f8 <__aeabi_dmul>
 8009a86:	a370      	add	r3, pc, #448	; (adr r3, 8009c48 <atan+0x2c8>)
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f7f6 fbfe 	bl	800028c <__adddf3>
 8009a90:	4632      	mov	r2, r6
 8009a92:	463b      	mov	r3, r7
 8009a94:	f7f6 fdb0 	bl	80005f8 <__aeabi_dmul>
 8009a98:	a36d      	add	r3, pc, #436	; (adr r3, 8009c50 <atan+0x2d0>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f7f6 fbf5 	bl	800028c <__adddf3>
 8009aa2:	4632      	mov	r2, r6
 8009aa4:	463b      	mov	r3, r7
 8009aa6:	f7f6 fda7 	bl	80005f8 <__aeabi_dmul>
 8009aaa:	a36b      	add	r3, pc, #428	; (adr r3, 8009c58 <atan+0x2d8>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f7f6 fbec 	bl	800028c <__adddf3>
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	463b      	mov	r3, r7
 8009ab8:	f7f6 fd9e 	bl	80005f8 <__aeabi_dmul>
 8009abc:	a368      	add	r3, pc, #416	; (adr r3, 8009c60 <atan+0x2e0>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f7f6 fbe3 	bl	800028c <__adddf3>
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	464b      	mov	r3, r9
 8009aca:	f7f6 fd95 	bl	80005f8 <__aeabi_dmul>
 8009ace:	a366      	add	r3, pc, #408	; (adr r3, 8009c68 <atan+0x2e8>)
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	4680      	mov	r8, r0
 8009ad6:	4689      	mov	r9, r1
 8009ad8:	4630      	mov	r0, r6
 8009ada:	4639      	mov	r1, r7
 8009adc:	f7f6 fd8c 	bl	80005f8 <__aeabi_dmul>
 8009ae0:	a363      	add	r3, pc, #396	; (adr r3, 8009c70 <atan+0x2f0>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f6 fbcf 	bl	8000288 <__aeabi_dsub>
 8009aea:	4632      	mov	r2, r6
 8009aec:	463b      	mov	r3, r7
 8009aee:	f7f6 fd83 	bl	80005f8 <__aeabi_dmul>
 8009af2:	a361      	add	r3, pc, #388	; (adr r3, 8009c78 <atan+0x2f8>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f7f6 fbc6 	bl	8000288 <__aeabi_dsub>
 8009afc:	4632      	mov	r2, r6
 8009afe:	463b      	mov	r3, r7
 8009b00:	f7f6 fd7a 	bl	80005f8 <__aeabi_dmul>
 8009b04:	a35e      	add	r3, pc, #376	; (adr r3, 8009c80 <atan+0x300>)
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	f7f6 fbbd 	bl	8000288 <__aeabi_dsub>
 8009b0e:	4632      	mov	r2, r6
 8009b10:	463b      	mov	r3, r7
 8009b12:	f7f6 fd71 	bl	80005f8 <__aeabi_dmul>
 8009b16:	a35c      	add	r3, pc, #368	; (adr r3, 8009c88 <atan+0x308>)
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	f7f6 fbb4 	bl	8000288 <__aeabi_dsub>
 8009b20:	4632      	mov	r2, r6
 8009b22:	463b      	mov	r3, r7
 8009b24:	f7f6 fd68 	bl	80005f8 <__aeabi_dmul>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4640      	mov	r0, r8
 8009b2e:	4649      	mov	r1, r9
 8009b30:	f7f6 fbac 	bl	800028c <__adddf3>
 8009b34:	4622      	mov	r2, r4
 8009b36:	462b      	mov	r3, r5
 8009b38:	f7f6 fd5e 	bl	80005f8 <__aeabi_dmul>
 8009b3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	d14b      	bne.n	8009bde <atan+0x25e>
 8009b46:	4620      	mov	r0, r4
 8009b48:	4629      	mov	r1, r5
 8009b4a:	f7f6 fb9d 	bl	8000288 <__aeabi_dsub>
 8009b4e:	e72c      	b.n	80099aa <atan+0x2a>
 8009b50:	ee10 0a10 	vmov	r0, s0
 8009b54:	4b53      	ldr	r3, [pc, #332]	; (8009ca4 <atan+0x324>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	4629      	mov	r1, r5
 8009b5a:	f7f6 fb95 	bl	8000288 <__aeabi_dsub>
 8009b5e:	4b51      	ldr	r3, [pc, #324]	; (8009ca4 <atan+0x324>)
 8009b60:	4606      	mov	r6, r0
 8009b62:	460f      	mov	r7, r1
 8009b64:	2200      	movs	r2, #0
 8009b66:	4620      	mov	r0, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f7f6 fb8f 	bl	800028c <__adddf3>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4630      	mov	r0, r6
 8009b74:	4639      	mov	r1, r7
 8009b76:	f7f6 fe69 	bl	800084c <__aeabi_ddiv>
 8009b7a:	f04f 0a01 	mov.w	sl, #1
 8009b7e:	4604      	mov	r4, r0
 8009b80:	460d      	mov	r5, r1
 8009b82:	e764      	b.n	8009a4e <atan+0xce>
 8009b84:	4b49      	ldr	r3, [pc, #292]	; (8009cac <atan+0x32c>)
 8009b86:	429e      	cmp	r6, r3
 8009b88:	da1d      	bge.n	8009bc6 <atan+0x246>
 8009b8a:	ee10 0a10 	vmov	r0, s0
 8009b8e:	4b48      	ldr	r3, [pc, #288]	; (8009cb0 <atan+0x330>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	4629      	mov	r1, r5
 8009b94:	f7f6 fb78 	bl	8000288 <__aeabi_dsub>
 8009b98:	4b45      	ldr	r3, [pc, #276]	; (8009cb0 <atan+0x330>)
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	460f      	mov	r7, r1
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	f7f6 fd28 	bl	80005f8 <__aeabi_dmul>
 8009ba8:	4b3e      	ldr	r3, [pc, #248]	; (8009ca4 <atan+0x324>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	f7f6 fb6e 	bl	800028c <__adddf3>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	f7f6 fe48 	bl	800084c <__aeabi_ddiv>
 8009bbc:	f04f 0a02 	mov.w	sl, #2
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	e743      	b.n	8009a4e <atan+0xce>
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	ee10 2a10 	vmov	r2, s0
 8009bcc:	4939      	ldr	r1, [pc, #228]	; (8009cb4 <atan+0x334>)
 8009bce:	2000      	movs	r0, #0
 8009bd0:	f7f6 fe3c 	bl	800084c <__aeabi_ddiv>
 8009bd4:	f04f 0a03 	mov.w	sl, #3
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	e737      	b.n	8009a4e <atan+0xce>
 8009bde:	4b36      	ldr	r3, [pc, #216]	; (8009cb8 <atan+0x338>)
 8009be0:	4e36      	ldr	r6, [pc, #216]	; (8009cbc <atan+0x33c>)
 8009be2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009be6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009bea:	e9da 2300 	ldrd	r2, r3, [sl]
 8009bee:	f7f6 fb4b 	bl	8000288 <__aeabi_dsub>
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	462b      	mov	r3, r5
 8009bf6:	f7f6 fb47 	bl	8000288 <__aeabi_dsub>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009c02:	f7f6 fb41 	bl	8000288 <__aeabi_dsub>
 8009c06:	f1bb 0f00 	cmp.w	fp, #0
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	460d      	mov	r5, r1
 8009c0e:	f6bf aed6 	bge.w	80099be <atan+0x3e>
 8009c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c16:	461d      	mov	r5, r3
 8009c18:	e6d1      	b.n	80099be <atan+0x3e>
 8009c1a:	a51d      	add	r5, pc, #116	; (adr r5, 8009c90 <atan+0x310>)
 8009c1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c20:	e6cd      	b.n	80099be <atan+0x3e>
 8009c22:	bf00      	nop
 8009c24:	f3af 8000 	nop.w
 8009c28:	54442d18 	.word	0x54442d18
 8009c2c:	bff921fb 	.word	0xbff921fb
 8009c30:	8800759c 	.word	0x8800759c
 8009c34:	7e37e43c 	.word	0x7e37e43c
 8009c38:	e322da11 	.word	0xe322da11
 8009c3c:	3f90ad3a 	.word	0x3f90ad3a
 8009c40:	24760deb 	.word	0x24760deb
 8009c44:	3fa97b4b 	.word	0x3fa97b4b
 8009c48:	a0d03d51 	.word	0xa0d03d51
 8009c4c:	3fb10d66 	.word	0x3fb10d66
 8009c50:	c54c206e 	.word	0xc54c206e
 8009c54:	3fb745cd 	.word	0x3fb745cd
 8009c58:	920083ff 	.word	0x920083ff
 8009c5c:	3fc24924 	.word	0x3fc24924
 8009c60:	5555550d 	.word	0x5555550d
 8009c64:	3fd55555 	.word	0x3fd55555
 8009c68:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c6c:	bfa2b444 	.word	0xbfa2b444
 8009c70:	52defd9a 	.word	0x52defd9a
 8009c74:	3fadde2d 	.word	0x3fadde2d
 8009c78:	af749a6d 	.word	0xaf749a6d
 8009c7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c80:	fe231671 	.word	0xfe231671
 8009c84:	3fbc71c6 	.word	0x3fbc71c6
 8009c88:	9998ebc4 	.word	0x9998ebc4
 8009c8c:	3fc99999 	.word	0x3fc99999
 8009c90:	54442d18 	.word	0x54442d18
 8009c94:	3ff921fb 	.word	0x3ff921fb
 8009c98:	440fffff 	.word	0x440fffff
 8009c9c:	7ff00000 	.word	0x7ff00000
 8009ca0:	3fdbffff 	.word	0x3fdbffff
 8009ca4:	3ff00000 	.word	0x3ff00000
 8009ca8:	3ff2ffff 	.word	0x3ff2ffff
 8009cac:	40038000 	.word	0x40038000
 8009cb0:	3ff80000 	.word	0x3ff80000
 8009cb4:	bff00000 	.word	0xbff00000
 8009cb8:	0800a460 	.word	0x0800a460
 8009cbc:	0800a440 	.word	0x0800a440

08009cc0 <fabs>:
 8009cc0:	ec51 0b10 	vmov	r0, r1, d0
 8009cc4:	ee10 2a10 	vmov	r2, s0
 8009cc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ccc:	ec43 2b10 	vmov	d0, r2, r3
 8009cd0:	4770      	bx	lr
	...

08009cd4 <_init>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	bf00      	nop
 8009cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cda:	bc08      	pop	{r3}
 8009cdc:	469e      	mov	lr, r3
 8009cde:	4770      	bx	lr

08009ce0 <_fini>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	bf00      	nop
 8009ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce6:	bc08      	pop	{r3}
 8009ce8:	469e      	mov	lr, r3
 8009cea:	4770      	bx	lr
